/*
 * Generic Virtual-Device Fuzzing Target Trace State Callbacks
 *
 * Copyright Red Hat Inc., 2020
 *
 * Authors:
 *  Qiang Liu <qiangliu@zju.edu.cn>
 *
 * This work is licensed under the terms of the GNU GPL, version 2 or later.
 * See the COPYING file in the top-level directory.
 */

#ifndef STATEFUL_FUZZ_TSC_H
#define STATEFUL_FUZZ_TSC_H

#include "exec/ioport.h"
#include "tests/qtest/libqos/pci-pc.h"
#include "tests/qtest/libqos/libqtest.h"
#include "fuzz.h"

typedef struct Callback {
    uint8_t id;
    char name[32];
    uint8_t *(*get_data)(void);
    size_t (*get_size)(void);
} Callback;

static void fill(uint8_t *dst, size_t dst_size, uint64_t filler, size_t filler_size) {
    uint8_t *filler_p = (uint8_t *)&filler;
    for (int i = 0; i < dst_size; i++)
        dst[i] = filler_p[i % filler_size];
}

#define CALLBACK_MAXSIZE 0x100000

// ==== hw/usb/hcd-uhci.c:uhci_process_frame:frame_addr = ============================
size_t size_0 = 0;

static uint64_t uhci_qh_0 = 0;
static uint64_t UHCI_TD_v7a024204f7 = 0;
static uint64_t buffer_v8133287637 = 0;
static uint64_t UHCI_TD_vaf19922ad9 = 0;
static uint64_t buffer_v8f4ff31e78 = 0;
static uint64_t v6f25e2a25a_base = 0;

static uint8_t *get_data_0() {
    size_0 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v6baa9455e3_0; break;
    }
v6baa9455e3_0:;
    stateful_free(uhci_qh_0);
    uhci_qh_0 = stateful_malloc(0x8, /*chained=*/false);
    // printf("[+] uhci_qh_0 = 0x%lx\n", uhci_qh_0);
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vd4713d60c8_0; break;
    }
vd4713d60c8_0:;
    stateful_free(UHCI_TD_v7a024204f7);
    UHCI_TD_v7a024204f7 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] UHCI_TD_v7a024204f7 = 0x%lx\n", UHCI_TD_v7a024204f7);
    uint8_t *v9148624fea = (uint8_t *)malloc(0x4);
    fill(v9148624fea, 0x4, (UHCI_TD_v7a024204f7 & 0xfffffffe), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_v7a024204f7 + 0x0, 0x4, (uint8_t *)v9148624fea);
    free(v9148624fea);
    uint8_t *v1759edc372 = (uint8_t *)malloc(0x4);
    fill(v1759edc372, 0x4, (((get_data_from_pool4() & ((1 << (0x12 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x12) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x14) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x15) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x19) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x1a) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x1d)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_v7a024204f7 + 0x4, 0x4, (uint8_t *)v1759edc372);
    free(v1759edc372);
    uint8_t *v1beb37117d = (uint8_t *)malloc(0x4);
    fill(v1beb37117d, 0x4, (((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x00) | ((0 & ((1 << (0x07 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x13)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_v7a024204f7 + 0x8, 0x4, (uint8_t *)v1beb37117d);
    free(v1beb37117d);
    stateful_free(buffer_v8133287637);
    buffer_v8133287637 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8133287637 = 0x%lx\n", buffer_v8133287637);
    uint8_t *v71eacd0549 = (uint8_t *)malloc(0x100);
    fill(v71eacd0549, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8133287637 + 0x0, 0x100, (uint8_t *)v71eacd0549);
    free(v71eacd0549);
    uint8_t *vcc45782198 = (uint8_t *)malloc(0x4);
    fill(vcc45782198, 0x4, (buffer_v8133287637 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_v7a024204f7 + 0xc, 0x4, (uint8_t *)vcc45782198);
    free(vcc45782198);
    uint8_t *v935ddd7251 = (uint8_t *)malloc(0x4);
    fill(v935ddd7251, 0x4, (UHCI_TD_v7a024204f7 & 0xfffffffe), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, uhci_qh_0 + 0x0, 0x4, (uint8_t *)v935ddd7251);
    free(v935ddd7251);
    goto vd4713d60c8_out;
vd4713d60c8_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v4f65d4d925_0; break;
    }
v4f65d4d925_0:;
    stateful_free(UHCI_TD_vaf19922ad9);
    UHCI_TD_vaf19922ad9 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] UHCI_TD_vaf19922ad9 = 0x%lx\n", UHCI_TD_vaf19922ad9);
    uint8_t *vcfc6e62585 = (uint8_t *)malloc(0x4);
    fill(vcfc6e62585, 0x4, (UHCI_TD_vaf19922ad9 & 0xfffffffe), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_vaf19922ad9 + 0x0, 0x4, (uint8_t *)vcfc6e62585);
    free(vcfc6e62585);
    uint8_t *v73581a8146 = (uint8_t *)malloc(0x4);
    fill(v73581a8146, 0x4, (((get_data_from_pool4() & ((1 << (0x12 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x12) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x14) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x15) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x19) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x1a) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x1d)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_vaf19922ad9 + 0x4, 0x4, (uint8_t *)v73581a8146);
    free(v73581a8146);
    uint8_t *v5b7c709acb = (uint8_t *)malloc(0x4);
    fill(v5b7c709acb, 0x4, (((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x00) | ((0 & ((1 << (0x07 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x13)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_vaf19922ad9 + 0x8, 0x4, (uint8_t *)v5b7c709acb);
    free(v5b7c709acb);
    stateful_free(buffer_v8f4ff31e78);
    buffer_v8f4ff31e78 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8f4ff31e78 = 0x%lx\n", buffer_v8f4ff31e78);
    uint8_t *vd857010255 = (uint8_t *)malloc(0x100);
    fill(vd857010255, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8f4ff31e78 + 0x0, 0x100, (uint8_t *)vd857010255);
    free(vd857010255);
    uint8_t *v552116dd2b = (uint8_t *)malloc(0x4);
    fill(v552116dd2b, 0x4, (buffer_v8f4ff31e78 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, UHCI_TD_vaf19922ad9 + 0xc, 0x4, (uint8_t *)v552116dd2b);
    free(v552116dd2b);
    uint8_t *vfebd845d0d = (uint8_t *)malloc(0x4);
    fill(vfebd845d0d, 0x4, (UHCI_TD_vaf19922ad9 & 0xfffffffe), 0x4 > 0x4 ? 0x4 : 0x4);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, uhci_qh_0 + 0x4, 0x4, (uint8_t *)vfebd845d0d);
    free(vfebd845d0d);
    goto v4f65d4d925_out;
v4f65d4d925_out:;
    stateful_free(v6f25e2a25a_base);
    v6f25e2a25a_base = stateful_malloc(0x1000, /*chained=*/false);
    // printf("[+] v6f25e2a25a_base = 0x%lx\n", v6f25e2a25a_base);
    uint8_t *v1db53334fb = (uint8_t *)malloc(0x1000);
    fill(v1db53334fb, 0x1000, ((uhci_qh_0 & 0xfffffffe) | 0x2), 0x1000 > 0x4 ? 0x4 : 0x1000);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, v6f25e2a25a_base, 0x1000, (uint8_t *)v1db53334fb);
    free(v1db53334fb);
    uint64_t v589f8779b0 = (v6f25e2a25a_base | 0x0);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, get_interface_id("uhci", EVENT_TYPE_PIO_WRITE), 0x8, 0x4, (uint8_t *)&v589f8779b0);
    uint64_t vf87f43fdf6 = (v6f25e2a25a_base | 0x0);
    size_0 += serialize(Data, size_0, CALLBACK_MAXSIZE, get_interface_id("uhci", EVENT_TYPE_PIO_WRITE), 0xa, 0x4, (uint8_t *)&vf87f43fdf6);
    goto v6baa9455e3_out;
v6baa9455e3_out:;
    return Data;
}

static size_t get_size_0() { return size_0;}

// ==== hw/usb/hcd-ohci.c:ohci_frame_boundary:if (ohci_read_ ============================
size_t size_1 = 0;

static uint64_t ohci_hcca_0 = 0;
static uint64_t OHCI_ED_v6fa231e959 = 0;
static uint64_t OHCI_TD_v98b33c6e0a = 0;
static uint64_t OHCI_ISO_TD_vfcfcfa81b3 = 0;
static uint64_t buffer_v429817c533 = 0;
static uint64_t buffer_vbb4a06cbe7 = 0;
static uint64_t buffer_v361524c2cc = 0;
static uint64_t buffer_v403d1f83a8 = 0;
static uint64_t buffer_vb0d9c2aa8f = 0;
static uint64_t buffer_vbdd7d19b75 = 0;
static uint64_t buffer_vbd30291a55 = 0;
static uint64_t buffer_v47e7f5938b = 0;
static uint64_t OHCI_ED_vb732d46f21 = 0;
static uint64_t OHCI_TD_va69cfb85d4 = 0;
static uint64_t OHCI_ISO_TD_v9836318900 = 0;
static uint64_t buffer_v559b5975b2 = 0;
static uint64_t buffer_v6a1689addf = 0;
static uint64_t buffer_vb5816b74a9 = 0;
static uint64_t buffer_v720299e32a = 0;
static uint64_t buffer_vb396905742 = 0;
static uint64_t buffer_vc167733f9a = 0;
static uint64_t buffer_v9f6048fe24 = 0;
static uint64_t buffer_v6a46721acf = 0;
static uint64_t OHCI_ED_vb9bdee2dd6 = 0;
static uint64_t OHCI_TD_vadb328cbf3 = 0;
static uint64_t OHCI_ISO_TD_vde59f550f0 = 0;
static uint64_t buffer_v30c1fb6a19 = 0;
static uint64_t buffer_va636425c9b = 0;
static uint64_t buffer_v4d6b234fdf = 0;
static uint64_t buffer_vfa7ff8bfb0 = 0;
static uint64_t buffer_v597aab614d = 0;
static uint64_t buffer_v58d87776a5 = 0;
static uint64_t buffer_v27896389df = 0;
static uint64_t buffer_v4c14982d9e = 0;
static uint64_t OHCI_ED_ve7180322a4 = 0;
static uint64_t OHCI_TD_v89b5b368df = 0;
static uint64_t OHCI_ISO_TD_v247145f4a8 = 0;
static uint64_t buffer_v4578bab326 = 0;
static uint64_t buffer_vca24be4d56 = 0;
static uint64_t buffer_v17fd3736b7 = 0;
static uint64_t buffer_v9edb95f2c7 = 0;
static uint64_t buffer_v4505f4f60a = 0;
static uint64_t buffer_v5c6460364a = 0;
static uint64_t buffer_v8c69778ffd = 0;
static uint64_t buffer_v1d69d9fc4b = 0;
static uint64_t OHCI_ED_v4d7bd30712 = 0;
static uint64_t OHCI_TD_v1bd094486a = 0;
static uint64_t OHCI_ISO_TD_ve89dc8158f = 0;
static uint64_t buffer_v1fd3c01757 = 0;
static uint64_t buffer_vb318ad4c1d = 0;
static uint64_t buffer_v9aedbd06d3 = 0;
static uint64_t buffer_va38d8afcfd = 0;
static uint64_t buffer_vceca2ee310 = 0;
static uint64_t buffer_vbff773ce32 = 0;
static uint64_t buffer_v628308690f = 0;
static uint64_t buffer_v4a31b24384 = 0;
static uint64_t OHCI_ED_v2aa50f4ec6 = 0;
static uint64_t OHCI_TD_vb3b68b57da = 0;
static uint64_t OHCI_ISO_TD_v869bdbd2e7 = 0;
static uint64_t buffer_vad4ab155c0 = 0;
static uint64_t buffer_v7f411fed1e = 0;
static uint64_t buffer_v1ac902ee25 = 0;
static uint64_t buffer_v60c6b3ed75 = 0;
static uint64_t buffer_vd3b564b08b = 0;
static uint64_t buffer_v7ce71b48fb = 0;
static uint64_t buffer_ve345ac72ea = 0;
static uint64_t buffer_vee6a8e2f9c = 0;
static uint64_t OHCI_ED_v866d700209 = 0;
static uint64_t OHCI_TD_va1727f7ea5 = 0;
static uint64_t OHCI_ISO_TD_v2168108139 = 0;
static uint64_t buffer_v72d6bc20d8 = 0;
static uint64_t buffer_vf7f60e7f75 = 0;
static uint64_t buffer_v809f292387 = 0;
static uint64_t buffer_vbf391fbb13 = 0;
static uint64_t buffer_vc12ea9b8e7 = 0;
static uint64_t buffer_vf8e45086ca = 0;
static uint64_t buffer_v961d8dcf9b = 0;
static uint64_t buffer_vbda17da200 = 0;
static uint64_t OHCI_ED_vdc2151e17e = 0;
static uint64_t OHCI_TD_v68777babc5 = 0;
static uint64_t OHCI_ISO_TD_v6238d0a0cf = 0;
static uint64_t buffer_v3d2bf04220 = 0;
static uint64_t buffer_vd476fe38ba = 0;
static uint64_t buffer_vf11ddff70e = 0;
static uint64_t buffer_v6af944e07b = 0;
static uint64_t buffer_vb799ae8e9a = 0;
static uint64_t buffer_vb2ddc481ac = 0;
static uint64_t buffer_vfc98c279cf = 0;
static uint64_t buffer_v62fda85477 = 0;
static uint64_t OHCI_ED_v26c00984c7 = 0;
static uint64_t OHCI_TD_v58bf3b9ea6 = 0;
static uint64_t OHCI_ISO_TD_v7d859725c7 = 0;
static uint64_t buffer_vef151673a1 = 0;
static uint64_t buffer_vcca1a03463 = 0;
static uint64_t buffer_v71cff81464 = 0;
static uint64_t buffer_v30c32323c1 = 0;
static uint64_t buffer_vf4dd05d513 = 0;
static uint64_t buffer_vef2d9a38e6 = 0;
static uint64_t buffer_v374a6cc9e0 = 0;
static uint64_t buffer_vf20b575d4e = 0;
static uint64_t OHCI_ED_v101bb5fa6a = 0;
static uint64_t OHCI_TD_vf45da406bb = 0;
static uint64_t OHCI_ISO_TD_v725c2675ca = 0;
static uint64_t buffer_v6ac1ca75af = 0;
static uint64_t buffer_v141b1a1b40 = 0;
static uint64_t buffer_v1f12a0e912 = 0;
static uint64_t buffer_v78548d7b11 = 0;
static uint64_t buffer_v2d8b5b4159 = 0;
static uint64_t buffer_vf96d4403d4 = 0;
static uint64_t buffer_v5da53b38d1 = 0;
static uint64_t buffer_ve4b8298798 = 0;
static uint64_t OHCI_ED_ve6a1a40bf0 = 0;
static uint64_t OHCI_TD_vb080e0035e = 0;
static uint64_t OHCI_ISO_TD_v9ad7558fee = 0;
static uint64_t buffer_v2452bc39db = 0;
static uint64_t buffer_v1cc5a8a074 = 0;
static uint64_t buffer_v215203c742 = 0;
static uint64_t buffer_v35475c5ef7 = 0;
static uint64_t buffer_v53b53b92a2 = 0;
static uint64_t buffer_vfe3216bd97 = 0;
static uint64_t buffer_v280a07ee4e = 0;
static uint64_t buffer_vcdec85da20 = 0;
static uint64_t OHCI_ED_vc13e66af3c = 0;
static uint64_t OHCI_TD_v99e8c82821 = 0;
static uint64_t OHCI_ISO_TD_v21cc14b312 = 0;
static uint64_t buffer_v8cffbbb14c = 0;
static uint64_t buffer_ved28508dbd = 0;
static uint64_t buffer_v6c148fc697 = 0;
static uint64_t buffer_v5ac4b6c7a3 = 0;
static uint64_t buffer_vecfb95b877 = 0;
static uint64_t buffer_v2284fd9689 = 0;
static uint64_t buffer_v70f8dd9952 = 0;
static uint64_t buffer_vcbe88a3f2f = 0;
static uint64_t OHCI_ED_vb3dd77e1cb = 0;
static uint64_t OHCI_TD_v6bf4d047c4 = 0;
static uint64_t OHCI_ISO_TD_v247f4d9785 = 0;
static uint64_t buffer_v4b7350d134 = 0;
static uint64_t buffer_vb2f11ef9d4 = 0;
static uint64_t buffer_v764657ca9e = 0;
static uint64_t buffer_v4c6e6fbb37 = 0;
static uint64_t buffer_v78aff58ec0 = 0;
static uint64_t buffer_v67c21355c3 = 0;
static uint64_t buffer_vfbe86a8ea1 = 0;
static uint64_t buffer_va614be3ab2 = 0;
static uint64_t OHCI_ED_v40aaec7abf = 0;
static uint64_t OHCI_TD_v15d38ca998 = 0;
static uint64_t OHCI_ISO_TD_vcad0027312 = 0;
static uint64_t buffer_v889c8ae24e = 0;
static uint64_t buffer_v29deb984c3 = 0;
static uint64_t buffer_vdc66a27b6a = 0;
static uint64_t buffer_v8513d91e48 = 0;
static uint64_t buffer_v88083ebc35 = 0;
static uint64_t buffer_v4ad12b4c47 = 0;
static uint64_t buffer_v2835bcdb23 = 0;
static uint64_t buffer_v1eda4209b2 = 0;
static uint64_t OHCI_ED_vbe0a5a5679 = 0;
static uint64_t OHCI_TD_v8066b49bb1 = 0;
static uint64_t OHCI_ISO_TD_v71a8c9c60f = 0;
static uint64_t buffer_vbec60ffe24 = 0;
static uint64_t buffer_v68a3c38373 = 0;
static uint64_t buffer_vfa999f9b86 = 0;
static uint64_t buffer_vddfae808af = 0;
static uint64_t buffer_vab4414aeec = 0;
static uint64_t buffer_v5c7cbc6201 = 0;
static uint64_t buffer_v9ef1c8461d = 0;
static uint64_t buffer_vb31e9be8a3 = 0;
static uint64_t OHCI_ED_v30f2c48549 = 0;
static uint64_t OHCI_TD_vaffe2554e5 = 0;
static uint64_t OHCI_ISO_TD_v2114c2d650 = 0;
static uint64_t buffer_v2fd3b9f2e9 = 0;
static uint64_t buffer_vcbab5b5138 = 0;
static uint64_t buffer_vf0a61c5e70 = 0;
static uint64_t buffer_vb5c25d4296 = 0;
static uint64_t buffer_v636abf8ce7 = 0;
static uint64_t buffer_va217cf253b = 0;
static uint64_t buffer_v2fcf3b87de = 0;
static uint64_t buffer_v2c623ac3ad = 0;
static uint64_t OHCI_ED_v6953a1155a = 0;
static uint64_t OHCI_TD_v3725bd0c79 = 0;
static uint64_t OHCI_ISO_TD_vacfeba4441 = 0;
static uint64_t buffer_v29b108230d = 0;
static uint64_t buffer_v23f1b67e01 = 0;
static uint64_t buffer_v7425f4e938 = 0;
static uint64_t buffer_v9bbac83856 = 0;
static uint64_t buffer_ve2014a459b = 0;
static uint64_t buffer_v51abf5e5cb = 0;
static uint64_t buffer_v4168705a53 = 0;
static uint64_t buffer_vb5aafef85a = 0;
static uint64_t OHCI_ED_v864696c1de = 0;
static uint64_t OHCI_TD_v4d236555bc = 0;
static uint64_t OHCI_ISO_TD_vdc2897c684 = 0;
static uint64_t buffer_v7b69e69041 = 0;
static uint64_t buffer_vb6651d6edf = 0;
static uint64_t buffer_v1284b9d78d = 0;
static uint64_t buffer_v75e417dd7e = 0;
static uint64_t buffer_v15eae9d21e = 0;
static uint64_t buffer_v275f275cc3 = 0;
static uint64_t buffer_veb52ee01e2 = 0;
static uint64_t buffer_v9cdd9f6c70 = 0;
static uint64_t OHCI_ED_vc9fe60368a = 0;
static uint64_t OHCI_TD_vb63f83c6c8 = 0;
static uint64_t OHCI_ISO_TD_vbb9e5a022c = 0;
static uint64_t buffer_v37d316a43f = 0;
static uint64_t buffer_v83e9973b89 = 0;
static uint64_t buffer_vcbdc014dbe = 0;
static uint64_t buffer_va52ba0ce62 = 0;
static uint64_t buffer_v5be12d0990 = 0;
static uint64_t buffer_va91da2cd8b = 0;
static uint64_t buffer_v3d798f0be6 = 0;
static uint64_t buffer_v3bcd6aec53 = 0;
static uint64_t OHCI_ED_v2bdfb72795 = 0;
static uint64_t OHCI_TD_va283453695 = 0;
static uint64_t OHCI_ISO_TD_vd0f0c75d21 = 0;
static uint64_t buffer_v62759469c2 = 0;
static uint64_t buffer_v974d9d499b = 0;
static uint64_t buffer_v5bce228b98 = 0;
static uint64_t buffer_v4f06ea1874 = 0;
static uint64_t buffer_vbcc4616df4 = 0;
static uint64_t buffer_v142a6c95d9 = 0;
static uint64_t buffer_v9ab3cc2723 = 0;
static uint64_t buffer_vc90ded2951 = 0;
static uint64_t OHCI_ED_v9cd3bdf356 = 0;
static uint64_t OHCI_TD_v4e0e15d329 = 0;
static uint64_t OHCI_ISO_TD_v5a79b46a26 = 0;
static uint64_t buffer_va0b976c27d = 0;
static uint64_t buffer_v3dd0c86606 = 0;
static uint64_t buffer_v53a081a6a7 = 0;
static uint64_t buffer_vff9d318d22 = 0;
static uint64_t buffer_va9fa4ea6f8 = 0;
static uint64_t buffer_v72ef7dce37 = 0;
static uint64_t buffer_v5ba830dc24 = 0;
static uint64_t buffer_va629d3322d = 0;
static uint64_t OHCI_ED_vb476998daf = 0;
static uint64_t OHCI_TD_v63eaa07ff4 = 0;
static uint64_t OHCI_ISO_TD_v8024532000 = 0;
static uint64_t buffer_v25ee54abb3 = 0;
static uint64_t buffer_vd216ad53d4 = 0;
static uint64_t buffer_vf22a4fc63f = 0;
static uint64_t buffer_vb7c144fb2b = 0;
static uint64_t buffer_v40a210150a = 0;
static uint64_t buffer_ve3b4df81ee = 0;
static uint64_t buffer_v16f14aad7f = 0;
static uint64_t buffer_vabf0f4bd4a = 0;
static uint64_t OHCI_ED_vcda6a32645 = 0;
static uint64_t OHCI_TD_v8cea309b49 = 0;
static uint64_t OHCI_ISO_TD_v74b7061c09 = 0;
static uint64_t buffer_v1eb95739b8 = 0;
static uint64_t buffer_v7efa2faf58 = 0;
static uint64_t buffer_v8c626a9fee = 0;
static uint64_t buffer_v8429aeae87 = 0;
static uint64_t buffer_v402988fdf8 = 0;
static uint64_t buffer_vecadbb86f1 = 0;
static uint64_t buffer_ve642965cde = 0;
static uint64_t buffer_vf3ca5f6427 = 0;
static uint64_t OHCI_ED_vfccae6b86e = 0;
static uint64_t OHCI_TD_vb2975c6918 = 0;
static uint64_t OHCI_ISO_TD_v300a21879c = 0;
static uint64_t buffer_vefa2ce128c = 0;
static uint64_t buffer_v878f40ed2c = 0;
static uint64_t buffer_v94665d4528 = 0;
static uint64_t buffer_vc1378e7562 = 0;
static uint64_t buffer_v4fb7c3bb44 = 0;
static uint64_t buffer_vf23db30647 = 0;
static uint64_t buffer_vfd768f6351 = 0;
static uint64_t buffer_vcaa0a6796e = 0;
static uint64_t OHCI_ED_ve65a3ae43a = 0;
static uint64_t OHCI_TD_vb3390a6ea0 = 0;
static uint64_t OHCI_ISO_TD_v4643d7053d = 0;
static uint64_t buffer_vb47a5dcecf = 0;
static uint64_t buffer_v30331476f5 = 0;
static uint64_t buffer_vec6e61bd70 = 0;
static uint64_t buffer_vf0bd740565 = 0;
static uint64_t buffer_vc602bd20c1 = 0;
static uint64_t buffer_v53e836639c = 0;
static uint64_t buffer_v7b6e28f4e9 = 0;
static uint64_t buffer_vc334f55802 = 0;
static uint64_t OHCI_ED_v4741ee56b5 = 0;
static uint64_t OHCI_TD_vaa5658322a = 0;
static uint64_t OHCI_ISO_TD_vdd6d47e490 = 0;
static uint64_t buffer_v12677895c6 = 0;
static uint64_t buffer_vb7a02afd30 = 0;
static uint64_t buffer_v8a663359ab = 0;
static uint64_t buffer_v67fece7f1f = 0;
static uint64_t buffer_ve7bf9a9664 = 0;
static uint64_t buffer_v466bd06fa2 = 0;
static uint64_t buffer_v82f1240d4e = 0;
static uint64_t buffer_ve91e70af22 = 0;
static uint64_t OHCI_ED_vd020baee95 = 0;
static uint64_t OHCI_TD_v43fd46ffd0 = 0;
static uint64_t OHCI_ISO_TD_v42ce91c0cc = 0;
static uint64_t buffer_vb56b9357b3 = 0;
static uint64_t buffer_v1257363cf2 = 0;
static uint64_t buffer_vca8033a7a5 = 0;
static uint64_t buffer_v85b303d375 = 0;
static uint64_t buffer_v2287401ba7 = 0;
static uint64_t buffer_v8e50c79ac5 = 0;
static uint64_t buffer_v57e7ef7b84 = 0;
static uint64_t buffer_vc65d8e4ed0 = 0;
static uint64_t OHCI_ED_vd560e64c55 = 0;
static uint64_t OHCI_TD_v5d156b6ece = 0;
static uint64_t OHCI_ISO_TD_v20068c1cbb = 0;
static uint64_t buffer_vb4cba0a317 = 0;
static uint64_t buffer_vcbf8e26a4f = 0;
static uint64_t buffer_ved469bf4d5 = 0;
static uint64_t buffer_vdd35d11688 = 0;
static uint64_t buffer_vc1a7de009e = 0;
static uint64_t buffer_vcdc39412d9 = 0;
static uint64_t buffer_v2e40253469 = 0;
static uint64_t buffer_vcd6a5e0c74 = 0;
static uint64_t OHCI_ED_v5b8c494910 = 0;
static uint64_t OHCI_TD_v2d5590c905 = 0;
static uint64_t OHCI_ISO_TD_v37e5725e5a = 0;
static uint64_t buffer_v79fe0a1b7e = 0;
static uint64_t buffer_v1480f037d3 = 0;
static uint64_t buffer_vf484878d5b = 0;
static uint64_t buffer_vf7d870b678 = 0;
static uint64_t buffer_vce03a34da0 = 0;
static uint64_t buffer_v96bfafff5b = 0;
static uint64_t buffer_v5672ebc760 = 0;
static uint64_t buffer_v291a58af25 = 0;
static uint64_t OHCI_ED_vae09ccfba3 = 0;
static uint64_t OHCI_TD_va2bb62833d = 0;
static uint64_t OHCI_ISO_TD_v5a220eb23c = 0;
static uint64_t buffer_ve0db22d329 = 0;
static uint64_t buffer_v2353d45590 = 0;
static uint64_t buffer_vc5507d2b90 = 0;
static uint64_t buffer_vafdb4e0b01 = 0;
static uint64_t buffer_vcd34bcd7b7 = 0;
static uint64_t buffer_v261cec19ff = 0;
static uint64_t buffer_vd2f7442906 = 0;
static uint64_t buffer_vf246038295 = 0;
static uint64_t OHCI_ED_vc96ef1a5ac = 0;
static uint64_t OHCI_TD_vec2b5e213f = 0;
static uint64_t OHCI_ISO_TD_v829fe7ba5d = 0;
static uint64_t buffer_v667fceeb88 = 0;
static uint64_t buffer_v3ee29e686f = 0;
static uint64_t buffer_vff7acd8640 = 0;
static uint64_t buffer_v86ce563de2 = 0;
static uint64_t buffer_vc79385209c = 0;
static uint64_t buffer_v3cad275ae0 = 0;
static uint64_t buffer_v9c684df10a = 0;
static uint64_t buffer_vcc4e66dade = 0;
static uint64_t OHCI_ED_v64a2bc48f9 = 0;
static uint64_t OHCI_TD_v2b6b7b4229 = 0;
static uint64_t OHCI_ISO_TD_v693d993c79 = 0;
static uint64_t buffer_v586d7f415e = 0;
static uint64_t buffer_vdccbbedc0e = 0;
static uint64_t buffer_vf5141524e0 = 0;
static uint64_t buffer_v4bc972ce53 = 0;
static uint64_t buffer_va9d499ca26 = 0;
static uint64_t buffer_v6e63ffa48d = 0;
static uint64_t buffer_v69199a8aae = 0;
static uint64_t buffer_vba5612f760 = 0;

static uint8_t *get_data_1() {
    size_1 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v11ebcd4942_0; break;
    }
v11ebcd4942_0:;
    stateful_free(ohci_hcca_0);
    ohci_hcca_0 = stateful_malloc(0x88, /*chained=*/false);
    // printf("[+] ohci_hcca_0 = 0x%lx\n", ohci_hcca_0);
    switch (get_data_from_pool4() % 1){ 
        case 0: goto va59cec9812_0; break;
    }
va59cec9812_0:;
    stateful_free(OHCI_ED_v6fa231e959);
    OHCI_ED_v6fa231e959 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v6fa231e959 = 0x%lx\n", OHCI_ED_v6fa231e959);
    uint8_t *v2728ec952b = (uint8_t *)malloc(0x4);
    fill(v2728ec952b, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6fa231e959 + 0x0, 0x4, (uint8_t *)v2728ec952b);
    free(v2728ec952b);
    uint8_t *v3a6e8f122a = (uint8_t *)malloc(0x4);
    fill(v3a6e8f122a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6fa231e959 + 0x4, 0x4, (uint8_t *)v3a6e8f122a);
    free(v3a6e8f122a);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v80ee526e0f_0; break;
        case 1: goto v80ee526e0f_1; break;
    }
v80ee526e0f_0:;
    stateful_free(OHCI_TD_v98b33c6e0a);
    OHCI_TD_v98b33c6e0a = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v98b33c6e0a = 0x%lx\n", OHCI_TD_v98b33c6e0a);
    uint8_t *v2887a3a9e6 = (uint8_t *)malloc(0x4);
    fill(v2887a3a9e6, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v98b33c6e0a + 0x0, 0x4, (uint8_t *)v2887a3a9e6);
    free(v2887a3a9e6);
    uint8_t *ve983cc1d25 = (uint8_t *)malloc(0x4);
    fill(ve983cc1d25, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v98b33c6e0a + 0x4, 0x4, (uint8_t *)ve983cc1d25);
    free(ve983cc1d25);
    uint8_t *v4e245cf78e = (uint8_t *)malloc(0x4);
    fill(v4e245cf78e, 0x4, (OHCI_TD_v98b33c6e0a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v98b33c6e0a + 0x8, 0x4, (uint8_t *)v4e245cf78e);
    free(v4e245cf78e);
    uint8_t *v58b5f05260 = (uint8_t *)malloc(0x4);
    fill(v58b5f05260, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v98b33c6e0a + 0xc, 0x4, (uint8_t *)v58b5f05260);
    free(v58b5f05260);
    uint8_t *vf6f259264e = (uint8_t *)malloc(0x4);
    fill(vf6f259264e, 0x4, (OHCI_TD_v98b33c6e0a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6fa231e959 + 0x8, 0x4, (uint8_t *)vf6f259264e);
    free(vf6f259264e);
    goto v80ee526e0f_out;
v80ee526e0f_1:;
    stateful_free(OHCI_ISO_TD_vfcfcfa81b3);
    OHCI_ISO_TD_vfcfcfa81b3 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vfcfcfa81b3 = 0x%lx\n", OHCI_ISO_TD_vfcfcfa81b3);
    uint8_t *v603803f32b = (uint8_t *)malloc(0x4);
    fill(v603803f32b, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x0, 0x4, (uint8_t *)v603803f32b);
    free(v603803f32b);
    uint8_t *v938ad77cb1 = (uint8_t *)malloc(0x4);
    fill(v938ad77cb1, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x4, 0x4, (uint8_t *)v938ad77cb1);
    free(v938ad77cb1);
    uint8_t *ve47516941d = (uint8_t *)malloc(0x4);
    fill(ve47516941d, 0x4, (OHCI_ISO_TD_vfcfcfa81b3 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x8, 0x4, (uint8_t *)ve47516941d);
    free(ve47516941d);
    uint8_t *vb8f35c26d1 = (uint8_t *)malloc(0x4);
    fill(vb8f35c26d1, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0xc, 0x4, (uint8_t *)vb8f35c26d1);
    free(vb8f35c26d1);
    stateful_free(buffer_v429817c533);
    buffer_v429817c533 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v429817c533 = 0x%lx\n", buffer_v429817c533);
    uint8_t *v2b02237ee2 = (uint8_t *)malloc(0x100);
    fill(v2b02237ee2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v429817c533 + 0x0, 0x100, (uint8_t *)v2b02237ee2);
    free(v2b02237ee2);
    uint8_t *v3544f189a9 = (uint8_t *)malloc(0x2);
    fill(v3544f189a9, 0x2, (buffer_v429817c533 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x10, 0x2, (uint8_t *)v3544f189a9);
    free(v3544f189a9);
    stateful_free(buffer_vbb4a06cbe7);
    buffer_vbb4a06cbe7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbb4a06cbe7 = 0x%lx\n", buffer_vbb4a06cbe7);
    uint8_t *veb6ec9e022 = (uint8_t *)malloc(0x100);
    fill(veb6ec9e022, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbb4a06cbe7 + 0x0, 0x100, (uint8_t *)veb6ec9e022);
    free(veb6ec9e022);
    uint8_t *ve29b24d72b = (uint8_t *)malloc(0x2);
    fill(ve29b24d72b, 0x2, (buffer_vbb4a06cbe7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x12, 0x2, (uint8_t *)ve29b24d72b);
    free(ve29b24d72b);
    stateful_free(buffer_v361524c2cc);
    buffer_v361524c2cc = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v361524c2cc = 0x%lx\n", buffer_v361524c2cc);
    uint8_t *vdf98377981 = (uint8_t *)malloc(0x100);
    fill(vdf98377981, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v361524c2cc + 0x0, 0x100, (uint8_t *)vdf98377981);
    free(vdf98377981);
    uint8_t *v64e322cfa5 = (uint8_t *)malloc(0x2);
    fill(v64e322cfa5, 0x2, (buffer_v361524c2cc | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x14, 0x2, (uint8_t *)v64e322cfa5);
    free(v64e322cfa5);
    stateful_free(buffer_v403d1f83a8);
    buffer_v403d1f83a8 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v403d1f83a8 = 0x%lx\n", buffer_v403d1f83a8);
    uint8_t *v5d4438218a = (uint8_t *)malloc(0x100);
    fill(v5d4438218a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v403d1f83a8 + 0x0, 0x100, (uint8_t *)v5d4438218a);
    free(v5d4438218a);
    uint8_t *veab3c4d8d4 = (uint8_t *)malloc(0x2);
    fill(veab3c4d8d4, 0x2, (buffer_v403d1f83a8 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x16, 0x2, (uint8_t *)veab3c4d8d4);
    free(veab3c4d8d4);
    stateful_free(buffer_vb0d9c2aa8f);
    buffer_vb0d9c2aa8f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb0d9c2aa8f = 0x%lx\n", buffer_vb0d9c2aa8f);
    uint8_t *vf3fa861390 = (uint8_t *)malloc(0x100);
    fill(vf3fa861390, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb0d9c2aa8f + 0x0, 0x100, (uint8_t *)vf3fa861390);
    free(vf3fa861390);
    uint8_t *v179d221d8e = (uint8_t *)malloc(0x2);
    fill(v179d221d8e, 0x2, (buffer_vb0d9c2aa8f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x18, 0x2, (uint8_t *)v179d221d8e);
    free(v179d221d8e);
    stateful_free(buffer_vbdd7d19b75);
    buffer_vbdd7d19b75 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbdd7d19b75 = 0x%lx\n", buffer_vbdd7d19b75);
    uint8_t *vcfd645605c = (uint8_t *)malloc(0x100);
    fill(vcfd645605c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbdd7d19b75 + 0x0, 0x100, (uint8_t *)vcfd645605c);
    free(vcfd645605c);
    uint8_t *v1ce5fc632d = (uint8_t *)malloc(0x2);
    fill(v1ce5fc632d, 0x2, (buffer_vbdd7d19b75 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x1a, 0x2, (uint8_t *)v1ce5fc632d);
    free(v1ce5fc632d);
    stateful_free(buffer_vbd30291a55);
    buffer_vbd30291a55 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbd30291a55 = 0x%lx\n", buffer_vbd30291a55);
    uint8_t *vaf8c96a918 = (uint8_t *)malloc(0x100);
    fill(vaf8c96a918, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbd30291a55 + 0x0, 0x100, (uint8_t *)vaf8c96a918);
    free(vaf8c96a918);
    uint8_t *v3a05c0b73d = (uint8_t *)malloc(0x2);
    fill(v3a05c0b73d, 0x2, (buffer_vbd30291a55 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x1c, 0x2, (uint8_t *)v3a05c0b73d);
    free(v3a05c0b73d);
    stateful_free(buffer_v47e7f5938b);
    buffer_v47e7f5938b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v47e7f5938b = 0x%lx\n", buffer_v47e7f5938b);
    uint8_t *v398071b146 = (uint8_t *)malloc(0x100);
    fill(v398071b146, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v47e7f5938b + 0x0, 0x100, (uint8_t *)v398071b146);
    free(v398071b146);
    uint8_t *v17776c3a57 = (uint8_t *)malloc(0x2);
    fill(v17776c3a57, 0x2, (buffer_v47e7f5938b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vfcfcfa81b3 + 0x1e, 0x2, (uint8_t *)v17776c3a57);
    free(v17776c3a57);
    uint8_t *v92dbd6134e = (uint8_t *)malloc(0x4);
    fill(v92dbd6134e, 0x4, (OHCI_ISO_TD_vfcfcfa81b3 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6fa231e959 + 0x8, 0x4, (uint8_t *)v92dbd6134e);
    free(v92dbd6134e);
    goto v80ee526e0f_out;
v80ee526e0f_out:;
    uint8_t *vef96a21449 = (uint8_t *)malloc(0x4);
    fill(vef96a21449, 0x4, OHCI_ED_v6fa231e959, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6fa231e959 + 0xc, 0x4, (uint8_t *)vef96a21449);
    free(vef96a21449);
    uint8_t *vc6b7e7cbbe = (uint8_t *)malloc(0x4);
    fill(vc6b7e7cbbe, 0x4, OHCI_ED_v6fa231e959, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x0, 0x4, (uint8_t *)vc6b7e7cbbe);
    free(vc6b7e7cbbe);
    goto va59cec9812_out;
va59cec9812_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vac642b4c49_0; break;
    }
vac642b4c49_0:;
    stateful_free(OHCI_ED_vb732d46f21);
    OHCI_ED_vb732d46f21 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vb732d46f21 = 0x%lx\n", OHCI_ED_vb732d46f21);
    uint8_t *v4a9686a4e7 = (uint8_t *)malloc(0x4);
    fill(v4a9686a4e7, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb732d46f21 + 0x0, 0x4, (uint8_t *)v4a9686a4e7);
    free(v4a9686a4e7);
    uint8_t *v277dfc7b72 = (uint8_t *)malloc(0x4);
    fill(v277dfc7b72, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb732d46f21 + 0x4, 0x4, (uint8_t *)v277dfc7b72);
    free(v277dfc7b72);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto vbf9cc54563_0; break;
        case 1: goto vbf9cc54563_1; break;
    }
vbf9cc54563_0:;
    stateful_free(OHCI_TD_va69cfb85d4);
    OHCI_TD_va69cfb85d4 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_va69cfb85d4 = 0x%lx\n", OHCI_TD_va69cfb85d4);
    uint8_t *vacf606fc38 = (uint8_t *)malloc(0x4);
    fill(vacf606fc38, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va69cfb85d4 + 0x0, 0x4, (uint8_t *)vacf606fc38);
    free(vacf606fc38);
    uint8_t *v4fab2ad880 = (uint8_t *)malloc(0x4);
    fill(v4fab2ad880, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va69cfb85d4 + 0x4, 0x4, (uint8_t *)v4fab2ad880);
    free(v4fab2ad880);
    uint8_t *v6b8fd6af15 = (uint8_t *)malloc(0x4);
    fill(v6b8fd6af15, 0x4, (OHCI_TD_va69cfb85d4 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va69cfb85d4 + 0x8, 0x4, (uint8_t *)v6b8fd6af15);
    free(v6b8fd6af15);
    uint8_t *v51306e5c78 = (uint8_t *)malloc(0x4);
    fill(v51306e5c78, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va69cfb85d4 + 0xc, 0x4, (uint8_t *)v51306e5c78);
    free(v51306e5c78);
    uint8_t *vf325f875e4 = (uint8_t *)malloc(0x4);
    fill(vf325f875e4, 0x4, (OHCI_TD_va69cfb85d4 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb732d46f21 + 0x8, 0x4, (uint8_t *)vf325f875e4);
    free(vf325f875e4);
    goto vbf9cc54563_out;
vbf9cc54563_1:;
    stateful_free(OHCI_ISO_TD_v9836318900);
    OHCI_ISO_TD_v9836318900 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v9836318900 = 0x%lx\n", OHCI_ISO_TD_v9836318900);
    uint8_t *v53a9ec5db9 = (uint8_t *)malloc(0x4);
    fill(v53a9ec5db9, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x0, 0x4, (uint8_t *)v53a9ec5db9);
    free(v53a9ec5db9);
    uint8_t *v5d393bf9b2 = (uint8_t *)malloc(0x4);
    fill(v5d393bf9b2, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x4, 0x4, (uint8_t *)v5d393bf9b2);
    free(v5d393bf9b2);
    uint8_t *vf3f053233b = (uint8_t *)malloc(0x4);
    fill(vf3f053233b, 0x4, (OHCI_ISO_TD_v9836318900 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x8, 0x4, (uint8_t *)vf3f053233b);
    free(vf3f053233b);
    uint8_t *v213124bd01 = (uint8_t *)malloc(0x4);
    fill(v213124bd01, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0xc, 0x4, (uint8_t *)v213124bd01);
    free(v213124bd01);
    stateful_free(buffer_v559b5975b2);
    buffer_v559b5975b2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v559b5975b2 = 0x%lx\n", buffer_v559b5975b2);
    uint8_t *vbdb62ff314 = (uint8_t *)malloc(0x100);
    fill(vbdb62ff314, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v559b5975b2 + 0x0, 0x100, (uint8_t *)vbdb62ff314);
    free(vbdb62ff314);
    uint8_t *vd907328632 = (uint8_t *)malloc(0x2);
    fill(vd907328632, 0x2, (buffer_v559b5975b2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x10, 0x2, (uint8_t *)vd907328632);
    free(vd907328632);
    stateful_free(buffer_v6a1689addf);
    buffer_v6a1689addf = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v6a1689addf = 0x%lx\n", buffer_v6a1689addf);
    uint8_t *v61c61ae46a = (uint8_t *)malloc(0x100);
    fill(v61c61ae46a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v6a1689addf + 0x0, 0x100, (uint8_t *)v61c61ae46a);
    free(v61c61ae46a);
    uint8_t *v183cfeceb0 = (uint8_t *)malloc(0x2);
    fill(v183cfeceb0, 0x2, (buffer_v6a1689addf | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x12, 0x2, (uint8_t *)v183cfeceb0);
    free(v183cfeceb0);
    stateful_free(buffer_vb5816b74a9);
    buffer_vb5816b74a9 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb5816b74a9 = 0x%lx\n", buffer_vb5816b74a9);
    uint8_t *vd3bb63d75e = (uint8_t *)malloc(0x100);
    fill(vd3bb63d75e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb5816b74a9 + 0x0, 0x100, (uint8_t *)vd3bb63d75e);
    free(vd3bb63d75e);
    uint8_t *vb6ffe12c1a = (uint8_t *)malloc(0x2);
    fill(vb6ffe12c1a, 0x2, (buffer_vb5816b74a9 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x14, 0x2, (uint8_t *)vb6ffe12c1a);
    free(vb6ffe12c1a);
    stateful_free(buffer_v720299e32a);
    buffer_v720299e32a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v720299e32a = 0x%lx\n", buffer_v720299e32a);
    uint8_t *v51cd2c07a8 = (uint8_t *)malloc(0x100);
    fill(v51cd2c07a8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v720299e32a + 0x0, 0x100, (uint8_t *)v51cd2c07a8);
    free(v51cd2c07a8);
    uint8_t *v8f41d3e41e = (uint8_t *)malloc(0x2);
    fill(v8f41d3e41e, 0x2, (buffer_v720299e32a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x16, 0x2, (uint8_t *)v8f41d3e41e);
    free(v8f41d3e41e);
    stateful_free(buffer_vb396905742);
    buffer_vb396905742 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb396905742 = 0x%lx\n", buffer_vb396905742);
    uint8_t *v7844c2ac72 = (uint8_t *)malloc(0x100);
    fill(v7844c2ac72, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb396905742 + 0x0, 0x100, (uint8_t *)v7844c2ac72);
    free(v7844c2ac72);
    uint8_t *v8c3af69e74 = (uint8_t *)malloc(0x2);
    fill(v8c3af69e74, 0x2, (buffer_vb396905742 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x18, 0x2, (uint8_t *)v8c3af69e74);
    free(v8c3af69e74);
    stateful_free(buffer_vc167733f9a);
    buffer_vc167733f9a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc167733f9a = 0x%lx\n", buffer_vc167733f9a);
    uint8_t *vdcff697dd2 = (uint8_t *)malloc(0x100);
    fill(vdcff697dd2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc167733f9a + 0x0, 0x100, (uint8_t *)vdcff697dd2);
    free(vdcff697dd2);
    uint8_t *v3f9bbcfc74 = (uint8_t *)malloc(0x2);
    fill(v3f9bbcfc74, 0x2, (buffer_vc167733f9a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x1a, 0x2, (uint8_t *)v3f9bbcfc74);
    free(v3f9bbcfc74);
    stateful_free(buffer_v9f6048fe24);
    buffer_v9f6048fe24 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9f6048fe24 = 0x%lx\n", buffer_v9f6048fe24);
    uint8_t *ve355c369b9 = (uint8_t *)malloc(0x100);
    fill(ve355c369b9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9f6048fe24 + 0x0, 0x100, (uint8_t *)ve355c369b9);
    free(ve355c369b9);
    uint8_t *vc67781b2c3 = (uint8_t *)malloc(0x2);
    fill(vc67781b2c3, 0x2, (buffer_v9f6048fe24 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x1c, 0x2, (uint8_t *)vc67781b2c3);
    free(vc67781b2c3);
    stateful_free(buffer_v6a46721acf);
    buffer_v6a46721acf = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v6a46721acf = 0x%lx\n", buffer_v6a46721acf);
    uint8_t *v7a2be04940 = (uint8_t *)malloc(0x100);
    fill(v7a2be04940, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v6a46721acf + 0x0, 0x100, (uint8_t *)v7a2be04940);
    free(v7a2be04940);
    uint8_t *v3a6f36fa24 = (uint8_t *)malloc(0x2);
    fill(v3a6f36fa24, 0x2, (buffer_v6a46721acf | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9836318900 + 0x1e, 0x2, (uint8_t *)v3a6f36fa24);
    free(v3a6f36fa24);
    uint8_t *v3006ff8516 = (uint8_t *)malloc(0x4);
    fill(v3006ff8516, 0x4, (OHCI_ISO_TD_v9836318900 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb732d46f21 + 0x8, 0x4, (uint8_t *)v3006ff8516);
    free(v3006ff8516);
    goto vbf9cc54563_out;
vbf9cc54563_out:;
    uint8_t *ve668bb6ec4 = (uint8_t *)malloc(0x4);
    fill(ve668bb6ec4, 0x4, OHCI_ED_vb732d46f21, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb732d46f21 + 0xc, 0x4, (uint8_t *)ve668bb6ec4);
    free(ve668bb6ec4);
    uint8_t *vad83095163 = (uint8_t *)malloc(0x4);
    fill(vad83095163, 0x4, OHCI_ED_vb732d46f21, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x4, 0x4, (uint8_t *)vad83095163);
    free(vad83095163);
    goto vac642b4c49_out;
vac642b4c49_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vfa83ada4a2_0; break;
    }
vfa83ada4a2_0:;
    stateful_free(OHCI_ED_vb9bdee2dd6);
    OHCI_ED_vb9bdee2dd6 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vb9bdee2dd6 = 0x%lx\n", OHCI_ED_vb9bdee2dd6);
    uint8_t *v6f1d5baf95 = (uint8_t *)malloc(0x4);
    fill(v6f1d5baf95, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb9bdee2dd6 + 0x0, 0x4, (uint8_t *)v6f1d5baf95);
    free(v6f1d5baf95);
    uint8_t *vedc641cd92 = (uint8_t *)malloc(0x4);
    fill(vedc641cd92, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb9bdee2dd6 + 0x4, 0x4, (uint8_t *)vedc641cd92);
    free(vedc641cd92);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v3c54c71fca_0; break;
        case 1: goto v3c54c71fca_1; break;
    }
v3c54c71fca_0:;
    stateful_free(OHCI_TD_vadb328cbf3);
    OHCI_TD_vadb328cbf3 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vadb328cbf3 = 0x%lx\n", OHCI_TD_vadb328cbf3);
    uint8_t *vb2591c4002 = (uint8_t *)malloc(0x4);
    fill(vb2591c4002, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vadb328cbf3 + 0x0, 0x4, (uint8_t *)vb2591c4002);
    free(vb2591c4002);
    uint8_t *v3e2b665322 = (uint8_t *)malloc(0x4);
    fill(v3e2b665322, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vadb328cbf3 + 0x4, 0x4, (uint8_t *)v3e2b665322);
    free(v3e2b665322);
    uint8_t *v840658d1c1 = (uint8_t *)malloc(0x4);
    fill(v840658d1c1, 0x4, (OHCI_TD_vadb328cbf3 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vadb328cbf3 + 0x8, 0x4, (uint8_t *)v840658d1c1);
    free(v840658d1c1);
    uint8_t *v5690f74dae = (uint8_t *)malloc(0x4);
    fill(v5690f74dae, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vadb328cbf3 + 0xc, 0x4, (uint8_t *)v5690f74dae);
    free(v5690f74dae);
    uint8_t *v31307e46af = (uint8_t *)malloc(0x4);
    fill(v31307e46af, 0x4, (OHCI_TD_vadb328cbf3 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb9bdee2dd6 + 0x8, 0x4, (uint8_t *)v31307e46af);
    free(v31307e46af);
    goto v3c54c71fca_out;
v3c54c71fca_1:;
    stateful_free(OHCI_ISO_TD_vde59f550f0);
    OHCI_ISO_TD_vde59f550f0 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vde59f550f0 = 0x%lx\n", OHCI_ISO_TD_vde59f550f0);
    uint8_t *vefb80c63f4 = (uint8_t *)malloc(0x4);
    fill(vefb80c63f4, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x0, 0x4, (uint8_t *)vefb80c63f4);
    free(vefb80c63f4);
    uint8_t *vb44788bd5e = (uint8_t *)malloc(0x4);
    fill(vb44788bd5e, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x4, 0x4, (uint8_t *)vb44788bd5e);
    free(vb44788bd5e);
    uint8_t *v67f8ab5705 = (uint8_t *)malloc(0x4);
    fill(v67f8ab5705, 0x4, (OHCI_ISO_TD_vde59f550f0 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x8, 0x4, (uint8_t *)v67f8ab5705);
    free(v67f8ab5705);
    uint8_t *vda98da5716 = (uint8_t *)malloc(0x4);
    fill(vda98da5716, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0xc, 0x4, (uint8_t *)vda98da5716);
    free(vda98da5716);
    stateful_free(buffer_v30c1fb6a19);
    buffer_v30c1fb6a19 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v30c1fb6a19 = 0x%lx\n", buffer_v30c1fb6a19);
    uint8_t *v7d5d9031e8 = (uint8_t *)malloc(0x100);
    fill(v7d5d9031e8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v30c1fb6a19 + 0x0, 0x100, (uint8_t *)v7d5d9031e8);
    free(v7d5d9031e8);
    uint8_t *vbb00d206f8 = (uint8_t *)malloc(0x2);
    fill(vbb00d206f8, 0x2, (buffer_v30c1fb6a19 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x10, 0x2, (uint8_t *)vbb00d206f8);
    free(vbb00d206f8);
    stateful_free(buffer_va636425c9b);
    buffer_va636425c9b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va636425c9b = 0x%lx\n", buffer_va636425c9b);
    uint8_t *v4fe4b7355c = (uint8_t *)malloc(0x100);
    fill(v4fe4b7355c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va636425c9b + 0x0, 0x100, (uint8_t *)v4fe4b7355c);
    free(v4fe4b7355c);
    uint8_t *vdd9539fcf7 = (uint8_t *)malloc(0x2);
    fill(vdd9539fcf7, 0x2, (buffer_va636425c9b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x12, 0x2, (uint8_t *)vdd9539fcf7);
    free(vdd9539fcf7);
    stateful_free(buffer_v4d6b234fdf);
    buffer_v4d6b234fdf = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4d6b234fdf = 0x%lx\n", buffer_v4d6b234fdf);
    uint8_t *v42260a4477 = (uint8_t *)malloc(0x100);
    fill(v42260a4477, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4d6b234fdf + 0x0, 0x100, (uint8_t *)v42260a4477);
    free(v42260a4477);
    uint8_t *v72789d7597 = (uint8_t *)malloc(0x2);
    fill(v72789d7597, 0x2, (buffer_v4d6b234fdf | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x14, 0x2, (uint8_t *)v72789d7597);
    free(v72789d7597);
    stateful_free(buffer_vfa7ff8bfb0);
    buffer_vfa7ff8bfb0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfa7ff8bfb0 = 0x%lx\n", buffer_vfa7ff8bfb0);
    uint8_t *vb44361f16c = (uint8_t *)malloc(0x100);
    fill(vb44361f16c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfa7ff8bfb0 + 0x0, 0x100, (uint8_t *)vb44361f16c);
    free(vb44361f16c);
    uint8_t *v7c2b940d90 = (uint8_t *)malloc(0x2);
    fill(v7c2b940d90, 0x2, (buffer_vfa7ff8bfb0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x16, 0x2, (uint8_t *)v7c2b940d90);
    free(v7c2b940d90);
    stateful_free(buffer_v597aab614d);
    buffer_v597aab614d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v597aab614d = 0x%lx\n", buffer_v597aab614d);
    uint8_t *v1dd95d4c06 = (uint8_t *)malloc(0x100);
    fill(v1dd95d4c06, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v597aab614d + 0x0, 0x100, (uint8_t *)v1dd95d4c06);
    free(v1dd95d4c06);
    uint8_t *ve299cb4824 = (uint8_t *)malloc(0x2);
    fill(ve299cb4824, 0x2, (buffer_v597aab614d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x18, 0x2, (uint8_t *)ve299cb4824);
    free(ve299cb4824);
    stateful_free(buffer_v58d87776a5);
    buffer_v58d87776a5 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v58d87776a5 = 0x%lx\n", buffer_v58d87776a5);
    uint8_t *v43a061c445 = (uint8_t *)malloc(0x100);
    fill(v43a061c445, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v58d87776a5 + 0x0, 0x100, (uint8_t *)v43a061c445);
    free(v43a061c445);
    uint8_t *v5804a8811d = (uint8_t *)malloc(0x2);
    fill(v5804a8811d, 0x2, (buffer_v58d87776a5 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x1a, 0x2, (uint8_t *)v5804a8811d);
    free(v5804a8811d);
    stateful_free(buffer_v27896389df);
    buffer_v27896389df = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v27896389df = 0x%lx\n", buffer_v27896389df);
    uint8_t *v54e27ea642 = (uint8_t *)malloc(0x100);
    fill(v54e27ea642, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v27896389df + 0x0, 0x100, (uint8_t *)v54e27ea642);
    free(v54e27ea642);
    uint8_t *v1152797ec2 = (uint8_t *)malloc(0x2);
    fill(v1152797ec2, 0x2, (buffer_v27896389df | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x1c, 0x2, (uint8_t *)v1152797ec2);
    free(v1152797ec2);
    stateful_free(buffer_v4c14982d9e);
    buffer_v4c14982d9e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4c14982d9e = 0x%lx\n", buffer_v4c14982d9e);
    uint8_t *v393031a6c8 = (uint8_t *)malloc(0x100);
    fill(v393031a6c8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4c14982d9e + 0x0, 0x100, (uint8_t *)v393031a6c8);
    free(v393031a6c8);
    uint8_t *v3aeb5bc0f6 = (uint8_t *)malloc(0x2);
    fill(v3aeb5bc0f6, 0x2, (buffer_v4c14982d9e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vde59f550f0 + 0x1e, 0x2, (uint8_t *)v3aeb5bc0f6);
    free(v3aeb5bc0f6);
    uint8_t *v706146ffbe = (uint8_t *)malloc(0x4);
    fill(v706146ffbe, 0x4, (OHCI_ISO_TD_vde59f550f0 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb9bdee2dd6 + 0x8, 0x4, (uint8_t *)v706146ffbe);
    free(v706146ffbe);
    goto v3c54c71fca_out;
v3c54c71fca_out:;
    uint8_t *vd4062cce77 = (uint8_t *)malloc(0x4);
    fill(vd4062cce77, 0x4, OHCI_ED_vb9bdee2dd6, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb9bdee2dd6 + 0xc, 0x4, (uint8_t *)vd4062cce77);
    free(vd4062cce77);
    uint8_t *v20e30a4dfb = (uint8_t *)malloc(0x4);
    fill(v20e30a4dfb, 0x4, OHCI_ED_vb9bdee2dd6, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x8, 0x4, (uint8_t *)v20e30a4dfb);
    free(v20e30a4dfb);
    goto vfa83ada4a2_out;
vfa83ada4a2_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v8ef066d442_0; break;
    }
v8ef066d442_0:;
    stateful_free(OHCI_ED_ve7180322a4);
    OHCI_ED_ve7180322a4 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_ve7180322a4 = 0x%lx\n", OHCI_ED_ve7180322a4);
    uint8_t *v72f78920dd = (uint8_t *)malloc(0x4);
    fill(v72f78920dd, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve7180322a4 + 0x0, 0x4, (uint8_t *)v72f78920dd);
    free(v72f78920dd);
    uint8_t *v68bfbf7ed4 = (uint8_t *)malloc(0x4);
    fill(v68bfbf7ed4, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve7180322a4 + 0x4, 0x4, (uint8_t *)v68bfbf7ed4);
    free(v68bfbf7ed4);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v6f790959a3_0; break;
        case 1: goto v6f790959a3_1; break;
    }
v6f790959a3_0:;
    stateful_free(OHCI_TD_v89b5b368df);
    OHCI_TD_v89b5b368df = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v89b5b368df = 0x%lx\n", OHCI_TD_v89b5b368df);
    uint8_t *vd5e32aef05 = (uint8_t *)malloc(0x4);
    fill(vd5e32aef05, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v89b5b368df + 0x0, 0x4, (uint8_t *)vd5e32aef05);
    free(vd5e32aef05);
    uint8_t *vd87d3afca3 = (uint8_t *)malloc(0x4);
    fill(vd87d3afca3, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v89b5b368df + 0x4, 0x4, (uint8_t *)vd87d3afca3);
    free(vd87d3afca3);
    uint8_t *v5028361fa9 = (uint8_t *)malloc(0x4);
    fill(v5028361fa9, 0x4, (OHCI_TD_v89b5b368df & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v89b5b368df + 0x8, 0x4, (uint8_t *)v5028361fa9);
    free(v5028361fa9);
    uint8_t *v49954cf1fa = (uint8_t *)malloc(0x4);
    fill(v49954cf1fa, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v89b5b368df + 0xc, 0x4, (uint8_t *)v49954cf1fa);
    free(v49954cf1fa);
    uint8_t *vb55dc442c8 = (uint8_t *)malloc(0x4);
    fill(vb55dc442c8, 0x4, (OHCI_TD_v89b5b368df & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve7180322a4 + 0x8, 0x4, (uint8_t *)vb55dc442c8);
    free(vb55dc442c8);
    goto v6f790959a3_out;
v6f790959a3_1:;
    stateful_free(OHCI_ISO_TD_v247145f4a8);
    OHCI_ISO_TD_v247145f4a8 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v247145f4a8 = 0x%lx\n", OHCI_ISO_TD_v247145f4a8);
    uint8_t *v88653e42ce = (uint8_t *)malloc(0x4);
    fill(v88653e42ce, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x0, 0x4, (uint8_t *)v88653e42ce);
    free(v88653e42ce);
    uint8_t *v6c749cf41f = (uint8_t *)malloc(0x4);
    fill(v6c749cf41f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x4, 0x4, (uint8_t *)v6c749cf41f);
    free(v6c749cf41f);
    uint8_t *v854df9b62b = (uint8_t *)malloc(0x4);
    fill(v854df9b62b, 0x4, (OHCI_ISO_TD_v247145f4a8 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x8, 0x4, (uint8_t *)v854df9b62b);
    free(v854df9b62b);
    uint8_t *v623a35ae7a = (uint8_t *)malloc(0x4);
    fill(v623a35ae7a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0xc, 0x4, (uint8_t *)v623a35ae7a);
    free(v623a35ae7a);
    stateful_free(buffer_v4578bab326);
    buffer_v4578bab326 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4578bab326 = 0x%lx\n", buffer_v4578bab326);
    uint8_t *vd3100ac519 = (uint8_t *)malloc(0x100);
    fill(vd3100ac519, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4578bab326 + 0x0, 0x100, (uint8_t *)vd3100ac519);
    free(vd3100ac519);
    uint8_t *v7ff5101d3f = (uint8_t *)malloc(0x2);
    fill(v7ff5101d3f, 0x2, (buffer_v4578bab326 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x10, 0x2, (uint8_t *)v7ff5101d3f);
    free(v7ff5101d3f);
    stateful_free(buffer_vca24be4d56);
    buffer_vca24be4d56 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vca24be4d56 = 0x%lx\n", buffer_vca24be4d56);
    uint8_t *vef05b6fed4 = (uint8_t *)malloc(0x100);
    fill(vef05b6fed4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vca24be4d56 + 0x0, 0x100, (uint8_t *)vef05b6fed4);
    free(vef05b6fed4);
    uint8_t *v5b7801ea86 = (uint8_t *)malloc(0x2);
    fill(v5b7801ea86, 0x2, (buffer_vca24be4d56 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x12, 0x2, (uint8_t *)v5b7801ea86);
    free(v5b7801ea86);
    stateful_free(buffer_v17fd3736b7);
    buffer_v17fd3736b7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v17fd3736b7 = 0x%lx\n", buffer_v17fd3736b7);
    uint8_t *v2e665ecb06 = (uint8_t *)malloc(0x100);
    fill(v2e665ecb06, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v17fd3736b7 + 0x0, 0x100, (uint8_t *)v2e665ecb06);
    free(v2e665ecb06);
    uint8_t *vf190cb53b4 = (uint8_t *)malloc(0x2);
    fill(vf190cb53b4, 0x2, (buffer_v17fd3736b7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x14, 0x2, (uint8_t *)vf190cb53b4);
    free(vf190cb53b4);
    stateful_free(buffer_v9edb95f2c7);
    buffer_v9edb95f2c7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9edb95f2c7 = 0x%lx\n", buffer_v9edb95f2c7);
    uint8_t *vc6218f7ffc = (uint8_t *)malloc(0x100);
    fill(vc6218f7ffc, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9edb95f2c7 + 0x0, 0x100, (uint8_t *)vc6218f7ffc);
    free(vc6218f7ffc);
    uint8_t *vb8d1353905 = (uint8_t *)malloc(0x2);
    fill(vb8d1353905, 0x2, (buffer_v9edb95f2c7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x16, 0x2, (uint8_t *)vb8d1353905);
    free(vb8d1353905);
    stateful_free(buffer_v4505f4f60a);
    buffer_v4505f4f60a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4505f4f60a = 0x%lx\n", buffer_v4505f4f60a);
    uint8_t *v3665b6a563 = (uint8_t *)malloc(0x100);
    fill(v3665b6a563, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4505f4f60a + 0x0, 0x100, (uint8_t *)v3665b6a563);
    free(v3665b6a563);
    uint8_t *v86b0915a88 = (uint8_t *)malloc(0x2);
    fill(v86b0915a88, 0x2, (buffer_v4505f4f60a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x18, 0x2, (uint8_t *)v86b0915a88);
    free(v86b0915a88);
    stateful_free(buffer_v5c6460364a);
    buffer_v5c6460364a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5c6460364a = 0x%lx\n", buffer_v5c6460364a);
    uint8_t *vfbdc678abf = (uint8_t *)malloc(0x100);
    fill(vfbdc678abf, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5c6460364a + 0x0, 0x100, (uint8_t *)vfbdc678abf);
    free(vfbdc678abf);
    uint8_t *v65578e91be = (uint8_t *)malloc(0x2);
    fill(v65578e91be, 0x2, (buffer_v5c6460364a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x1a, 0x2, (uint8_t *)v65578e91be);
    free(v65578e91be);
    stateful_free(buffer_v8c69778ffd);
    buffer_v8c69778ffd = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8c69778ffd = 0x%lx\n", buffer_v8c69778ffd);
    uint8_t *v65739938a9 = (uint8_t *)malloc(0x100);
    fill(v65739938a9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8c69778ffd + 0x0, 0x100, (uint8_t *)v65739938a9);
    free(v65739938a9);
    uint8_t *vbda314883e = (uint8_t *)malloc(0x2);
    fill(vbda314883e, 0x2, (buffer_v8c69778ffd | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x1c, 0x2, (uint8_t *)vbda314883e);
    free(vbda314883e);
    stateful_free(buffer_v1d69d9fc4b);
    buffer_v1d69d9fc4b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1d69d9fc4b = 0x%lx\n", buffer_v1d69d9fc4b);
    uint8_t *va9584453c2 = (uint8_t *)malloc(0x100);
    fill(va9584453c2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1d69d9fc4b + 0x0, 0x100, (uint8_t *)va9584453c2);
    free(va9584453c2);
    uint8_t *v4a0609aa82 = (uint8_t *)malloc(0x2);
    fill(v4a0609aa82, 0x2, (buffer_v1d69d9fc4b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247145f4a8 + 0x1e, 0x2, (uint8_t *)v4a0609aa82);
    free(v4a0609aa82);
    uint8_t *v25d203e399 = (uint8_t *)malloc(0x4);
    fill(v25d203e399, 0x4, (OHCI_ISO_TD_v247145f4a8 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve7180322a4 + 0x8, 0x4, (uint8_t *)v25d203e399);
    free(v25d203e399);
    goto v6f790959a3_out;
v6f790959a3_out:;
    uint8_t *v2234c40f40 = (uint8_t *)malloc(0x4);
    fill(v2234c40f40, 0x4, OHCI_ED_ve7180322a4, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve7180322a4 + 0xc, 0x4, (uint8_t *)v2234c40f40);
    free(v2234c40f40);
    uint8_t *v9bcae27d33 = (uint8_t *)malloc(0x4);
    fill(v9bcae27d33, 0x4, OHCI_ED_ve7180322a4, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0xc, 0x4, (uint8_t *)v9bcae27d33);
    free(v9bcae27d33);
    goto v8ef066d442_out;
v8ef066d442_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v4ed135530c_0; break;
    }
v4ed135530c_0:;
    stateful_free(OHCI_ED_v4d7bd30712);
    OHCI_ED_v4d7bd30712 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v4d7bd30712 = 0x%lx\n", OHCI_ED_v4d7bd30712);
    uint8_t *v8278e1e52a = (uint8_t *)malloc(0x4);
    fill(v8278e1e52a, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4d7bd30712 + 0x0, 0x4, (uint8_t *)v8278e1e52a);
    free(v8278e1e52a);
    uint8_t *veac503ff79 = (uint8_t *)malloc(0x4);
    fill(veac503ff79, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4d7bd30712 + 0x4, 0x4, (uint8_t *)veac503ff79);
    free(veac503ff79);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v5419eefcd5_0; break;
        case 1: goto v5419eefcd5_1; break;
    }
v5419eefcd5_0:;
    stateful_free(OHCI_TD_v1bd094486a);
    OHCI_TD_v1bd094486a = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v1bd094486a = 0x%lx\n", OHCI_TD_v1bd094486a);
    uint8_t *vedaeec39ea = (uint8_t *)malloc(0x4);
    fill(vedaeec39ea, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v1bd094486a + 0x0, 0x4, (uint8_t *)vedaeec39ea);
    free(vedaeec39ea);
    uint8_t *vdec22e0cd4 = (uint8_t *)malloc(0x4);
    fill(vdec22e0cd4, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v1bd094486a + 0x4, 0x4, (uint8_t *)vdec22e0cd4);
    free(vdec22e0cd4);
    uint8_t *vd273dcbef6 = (uint8_t *)malloc(0x4);
    fill(vd273dcbef6, 0x4, (OHCI_TD_v1bd094486a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v1bd094486a + 0x8, 0x4, (uint8_t *)vd273dcbef6);
    free(vd273dcbef6);
    uint8_t *vd2bddb3b64 = (uint8_t *)malloc(0x4);
    fill(vd2bddb3b64, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v1bd094486a + 0xc, 0x4, (uint8_t *)vd2bddb3b64);
    free(vd2bddb3b64);
    uint8_t *vc8359b916e = (uint8_t *)malloc(0x4);
    fill(vc8359b916e, 0x4, (OHCI_TD_v1bd094486a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4d7bd30712 + 0x8, 0x4, (uint8_t *)vc8359b916e);
    free(vc8359b916e);
    goto v5419eefcd5_out;
v5419eefcd5_1:;
    stateful_free(OHCI_ISO_TD_ve89dc8158f);
    OHCI_ISO_TD_ve89dc8158f = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_ve89dc8158f = 0x%lx\n", OHCI_ISO_TD_ve89dc8158f);
    uint8_t *v9abf3e69e5 = (uint8_t *)malloc(0x4);
    fill(v9abf3e69e5, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x0, 0x4, (uint8_t *)v9abf3e69e5);
    free(v9abf3e69e5);
    uint8_t *v6b58996c15 = (uint8_t *)malloc(0x4);
    fill(v6b58996c15, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x4, 0x4, (uint8_t *)v6b58996c15);
    free(v6b58996c15);
    uint8_t *v13f1484aa5 = (uint8_t *)malloc(0x4);
    fill(v13f1484aa5, 0x4, (OHCI_ISO_TD_ve89dc8158f & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x8, 0x4, (uint8_t *)v13f1484aa5);
    free(v13f1484aa5);
    uint8_t *vc1308a09cd = (uint8_t *)malloc(0x4);
    fill(vc1308a09cd, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0xc, 0x4, (uint8_t *)vc1308a09cd);
    free(vc1308a09cd);
    stateful_free(buffer_v1fd3c01757);
    buffer_v1fd3c01757 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1fd3c01757 = 0x%lx\n", buffer_v1fd3c01757);
    uint8_t *vabc2ded76b = (uint8_t *)malloc(0x100);
    fill(vabc2ded76b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1fd3c01757 + 0x0, 0x100, (uint8_t *)vabc2ded76b);
    free(vabc2ded76b);
    uint8_t *vec7b009c9b = (uint8_t *)malloc(0x2);
    fill(vec7b009c9b, 0x2, (buffer_v1fd3c01757 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x10, 0x2, (uint8_t *)vec7b009c9b);
    free(vec7b009c9b);
    stateful_free(buffer_vb318ad4c1d);
    buffer_vb318ad4c1d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb318ad4c1d = 0x%lx\n", buffer_vb318ad4c1d);
    uint8_t *vc5fa8ac995 = (uint8_t *)malloc(0x100);
    fill(vc5fa8ac995, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb318ad4c1d + 0x0, 0x100, (uint8_t *)vc5fa8ac995);
    free(vc5fa8ac995);
    uint8_t *v7b768615f6 = (uint8_t *)malloc(0x2);
    fill(v7b768615f6, 0x2, (buffer_vb318ad4c1d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x12, 0x2, (uint8_t *)v7b768615f6);
    free(v7b768615f6);
    stateful_free(buffer_v9aedbd06d3);
    buffer_v9aedbd06d3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9aedbd06d3 = 0x%lx\n", buffer_v9aedbd06d3);
    uint8_t *vc3ac232caf = (uint8_t *)malloc(0x100);
    fill(vc3ac232caf, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9aedbd06d3 + 0x0, 0x100, (uint8_t *)vc3ac232caf);
    free(vc3ac232caf);
    uint8_t *va2a1fa451c = (uint8_t *)malloc(0x2);
    fill(va2a1fa451c, 0x2, (buffer_v9aedbd06d3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x14, 0x2, (uint8_t *)va2a1fa451c);
    free(va2a1fa451c);
    stateful_free(buffer_va38d8afcfd);
    buffer_va38d8afcfd = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va38d8afcfd = 0x%lx\n", buffer_va38d8afcfd);
    uint8_t *v9b9a9bf50a = (uint8_t *)malloc(0x100);
    fill(v9b9a9bf50a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va38d8afcfd + 0x0, 0x100, (uint8_t *)v9b9a9bf50a);
    free(v9b9a9bf50a);
    uint8_t *ve36b3a5f23 = (uint8_t *)malloc(0x2);
    fill(ve36b3a5f23, 0x2, (buffer_va38d8afcfd | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x16, 0x2, (uint8_t *)ve36b3a5f23);
    free(ve36b3a5f23);
    stateful_free(buffer_vceca2ee310);
    buffer_vceca2ee310 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vceca2ee310 = 0x%lx\n", buffer_vceca2ee310);
    uint8_t *vc780f2f39a = (uint8_t *)malloc(0x100);
    fill(vc780f2f39a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vceca2ee310 + 0x0, 0x100, (uint8_t *)vc780f2f39a);
    free(vc780f2f39a);
    uint8_t *v7117e78e70 = (uint8_t *)malloc(0x2);
    fill(v7117e78e70, 0x2, (buffer_vceca2ee310 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x18, 0x2, (uint8_t *)v7117e78e70);
    free(v7117e78e70);
    stateful_free(buffer_vbff773ce32);
    buffer_vbff773ce32 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbff773ce32 = 0x%lx\n", buffer_vbff773ce32);
    uint8_t *v4c15514db4 = (uint8_t *)malloc(0x100);
    fill(v4c15514db4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbff773ce32 + 0x0, 0x100, (uint8_t *)v4c15514db4);
    free(v4c15514db4);
    uint8_t *ve6e4ac85f1 = (uint8_t *)malloc(0x2);
    fill(ve6e4ac85f1, 0x2, (buffer_vbff773ce32 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x1a, 0x2, (uint8_t *)ve6e4ac85f1);
    free(ve6e4ac85f1);
    stateful_free(buffer_v628308690f);
    buffer_v628308690f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v628308690f = 0x%lx\n", buffer_v628308690f);
    uint8_t *v44933c8649 = (uint8_t *)malloc(0x100);
    fill(v44933c8649, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v628308690f + 0x0, 0x100, (uint8_t *)v44933c8649);
    free(v44933c8649);
    uint8_t *vc7361a75c6 = (uint8_t *)malloc(0x2);
    fill(vc7361a75c6, 0x2, (buffer_v628308690f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x1c, 0x2, (uint8_t *)vc7361a75c6);
    free(vc7361a75c6);
    stateful_free(buffer_v4a31b24384);
    buffer_v4a31b24384 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4a31b24384 = 0x%lx\n", buffer_v4a31b24384);
    uint8_t *v3504e26c5f = (uint8_t *)malloc(0x100);
    fill(v3504e26c5f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4a31b24384 + 0x0, 0x100, (uint8_t *)v3504e26c5f);
    free(v3504e26c5f);
    uint8_t *v1598734a86 = (uint8_t *)malloc(0x2);
    fill(v1598734a86, 0x2, (buffer_v4a31b24384 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_ve89dc8158f + 0x1e, 0x2, (uint8_t *)v1598734a86);
    free(v1598734a86);
    uint8_t *v70525bb650 = (uint8_t *)malloc(0x4);
    fill(v70525bb650, 0x4, (OHCI_ISO_TD_ve89dc8158f & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4d7bd30712 + 0x8, 0x4, (uint8_t *)v70525bb650);
    free(v70525bb650);
    goto v5419eefcd5_out;
v5419eefcd5_out:;
    uint8_t *v120a202fe1 = (uint8_t *)malloc(0x4);
    fill(v120a202fe1, 0x4, OHCI_ED_v4d7bd30712, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4d7bd30712 + 0xc, 0x4, (uint8_t *)v120a202fe1);
    free(v120a202fe1);
    uint8_t *v8d17e6327e = (uint8_t *)malloc(0x4);
    fill(v8d17e6327e, 0x4, OHCI_ED_v4d7bd30712, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x10, 0x4, (uint8_t *)v8d17e6327e);
    free(v8d17e6327e);
    goto v4ed135530c_out;
v4ed135530c_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v6c4c393537_0; break;
    }
v6c4c393537_0:;
    stateful_free(OHCI_ED_v2aa50f4ec6);
    OHCI_ED_v2aa50f4ec6 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v2aa50f4ec6 = 0x%lx\n", OHCI_ED_v2aa50f4ec6);
    uint8_t *v808ea422c6 = (uint8_t *)malloc(0x4);
    fill(v808ea422c6, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2aa50f4ec6 + 0x0, 0x4, (uint8_t *)v808ea422c6);
    free(v808ea422c6);
    uint8_t *v5db13edffa = (uint8_t *)malloc(0x4);
    fill(v5db13edffa, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2aa50f4ec6 + 0x4, 0x4, (uint8_t *)v5db13edffa);
    free(v5db13edffa);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v5bc7fdeb31_0; break;
        case 1: goto v5bc7fdeb31_1; break;
    }
v5bc7fdeb31_0:;
    stateful_free(OHCI_TD_vb3b68b57da);
    OHCI_TD_vb3b68b57da = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vb3b68b57da = 0x%lx\n", OHCI_TD_vb3b68b57da);
    uint8_t *v8bb62aff3e = (uint8_t *)malloc(0x4);
    fill(v8bb62aff3e, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3b68b57da + 0x0, 0x4, (uint8_t *)v8bb62aff3e);
    free(v8bb62aff3e);
    uint8_t *v81ffbbc184 = (uint8_t *)malloc(0x4);
    fill(v81ffbbc184, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3b68b57da + 0x4, 0x4, (uint8_t *)v81ffbbc184);
    free(v81ffbbc184);
    uint8_t *v2e0885fc5d = (uint8_t *)malloc(0x4);
    fill(v2e0885fc5d, 0x4, (OHCI_TD_vb3b68b57da & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3b68b57da + 0x8, 0x4, (uint8_t *)v2e0885fc5d);
    free(v2e0885fc5d);
    uint8_t *v7c6d74a844 = (uint8_t *)malloc(0x4);
    fill(v7c6d74a844, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3b68b57da + 0xc, 0x4, (uint8_t *)v7c6d74a844);
    free(v7c6d74a844);
    uint8_t *v6b496a3bf2 = (uint8_t *)malloc(0x4);
    fill(v6b496a3bf2, 0x4, (OHCI_TD_vb3b68b57da & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2aa50f4ec6 + 0x8, 0x4, (uint8_t *)v6b496a3bf2);
    free(v6b496a3bf2);
    goto v5bc7fdeb31_out;
v5bc7fdeb31_1:;
    stateful_free(OHCI_ISO_TD_v869bdbd2e7);
    OHCI_ISO_TD_v869bdbd2e7 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v869bdbd2e7 = 0x%lx\n", OHCI_ISO_TD_v869bdbd2e7);
    uint8_t *ve9e4f06c36 = (uint8_t *)malloc(0x4);
    fill(ve9e4f06c36, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x0, 0x4, (uint8_t *)ve9e4f06c36);
    free(ve9e4f06c36);
    uint8_t *vabbebd4ff9 = (uint8_t *)malloc(0x4);
    fill(vabbebd4ff9, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x4, 0x4, (uint8_t *)vabbebd4ff9);
    free(vabbebd4ff9);
    uint8_t *v7111f1d19c = (uint8_t *)malloc(0x4);
    fill(v7111f1d19c, 0x4, (OHCI_ISO_TD_v869bdbd2e7 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x8, 0x4, (uint8_t *)v7111f1d19c);
    free(v7111f1d19c);
    uint8_t *v832cb6a724 = (uint8_t *)malloc(0x4);
    fill(v832cb6a724, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0xc, 0x4, (uint8_t *)v832cb6a724);
    free(v832cb6a724);
    stateful_free(buffer_vad4ab155c0);
    buffer_vad4ab155c0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vad4ab155c0 = 0x%lx\n", buffer_vad4ab155c0);
    uint8_t *v4b9368d961 = (uint8_t *)malloc(0x100);
    fill(v4b9368d961, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vad4ab155c0 + 0x0, 0x100, (uint8_t *)v4b9368d961);
    free(v4b9368d961);
    uint8_t *vf13a90495f = (uint8_t *)malloc(0x2);
    fill(vf13a90495f, 0x2, (buffer_vad4ab155c0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x10, 0x2, (uint8_t *)vf13a90495f);
    free(vf13a90495f);
    stateful_free(buffer_v7f411fed1e);
    buffer_v7f411fed1e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v7f411fed1e = 0x%lx\n", buffer_v7f411fed1e);
    uint8_t *va21574899f = (uint8_t *)malloc(0x100);
    fill(va21574899f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v7f411fed1e + 0x0, 0x100, (uint8_t *)va21574899f);
    free(va21574899f);
    uint8_t *v3e5aed8352 = (uint8_t *)malloc(0x2);
    fill(v3e5aed8352, 0x2, (buffer_v7f411fed1e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x12, 0x2, (uint8_t *)v3e5aed8352);
    free(v3e5aed8352);
    stateful_free(buffer_v1ac902ee25);
    buffer_v1ac902ee25 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1ac902ee25 = 0x%lx\n", buffer_v1ac902ee25);
    uint8_t *v7ad5af8172 = (uint8_t *)malloc(0x100);
    fill(v7ad5af8172, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1ac902ee25 + 0x0, 0x100, (uint8_t *)v7ad5af8172);
    free(v7ad5af8172);
    uint8_t *v9af08b9a5b = (uint8_t *)malloc(0x2);
    fill(v9af08b9a5b, 0x2, (buffer_v1ac902ee25 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x14, 0x2, (uint8_t *)v9af08b9a5b);
    free(v9af08b9a5b);
    stateful_free(buffer_v60c6b3ed75);
    buffer_v60c6b3ed75 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v60c6b3ed75 = 0x%lx\n", buffer_v60c6b3ed75);
    uint8_t *v4b32bc8635 = (uint8_t *)malloc(0x100);
    fill(v4b32bc8635, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v60c6b3ed75 + 0x0, 0x100, (uint8_t *)v4b32bc8635);
    free(v4b32bc8635);
    uint8_t *v8301c5b945 = (uint8_t *)malloc(0x2);
    fill(v8301c5b945, 0x2, (buffer_v60c6b3ed75 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x16, 0x2, (uint8_t *)v8301c5b945);
    free(v8301c5b945);
    stateful_free(buffer_vd3b564b08b);
    buffer_vd3b564b08b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vd3b564b08b = 0x%lx\n", buffer_vd3b564b08b);
    uint8_t *vbb1a48e250 = (uint8_t *)malloc(0x100);
    fill(vbb1a48e250, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vd3b564b08b + 0x0, 0x100, (uint8_t *)vbb1a48e250);
    free(vbb1a48e250);
    uint8_t *v14b8317e75 = (uint8_t *)malloc(0x2);
    fill(v14b8317e75, 0x2, (buffer_vd3b564b08b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x18, 0x2, (uint8_t *)v14b8317e75);
    free(v14b8317e75);
    stateful_free(buffer_v7ce71b48fb);
    buffer_v7ce71b48fb = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v7ce71b48fb = 0x%lx\n", buffer_v7ce71b48fb);
    uint8_t *ve47e3d101d = (uint8_t *)malloc(0x100);
    fill(ve47e3d101d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v7ce71b48fb + 0x0, 0x100, (uint8_t *)ve47e3d101d);
    free(ve47e3d101d);
    uint8_t *vfbb2242955 = (uint8_t *)malloc(0x2);
    fill(vfbb2242955, 0x2, (buffer_v7ce71b48fb | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x1a, 0x2, (uint8_t *)vfbb2242955);
    free(vfbb2242955);
    stateful_free(buffer_ve345ac72ea);
    buffer_ve345ac72ea = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve345ac72ea = 0x%lx\n", buffer_ve345ac72ea);
    uint8_t *v5ffe6c117b = (uint8_t *)malloc(0x100);
    fill(v5ffe6c117b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve345ac72ea + 0x0, 0x100, (uint8_t *)v5ffe6c117b);
    free(v5ffe6c117b);
    uint8_t *vad283c0df2 = (uint8_t *)malloc(0x2);
    fill(vad283c0df2, 0x2, (buffer_ve345ac72ea | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x1c, 0x2, (uint8_t *)vad283c0df2);
    free(vad283c0df2);
    stateful_free(buffer_vee6a8e2f9c);
    buffer_vee6a8e2f9c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vee6a8e2f9c = 0x%lx\n", buffer_vee6a8e2f9c);
    uint8_t *vfe9f9ff698 = (uint8_t *)malloc(0x100);
    fill(vfe9f9ff698, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vee6a8e2f9c + 0x0, 0x100, (uint8_t *)vfe9f9ff698);
    free(vfe9f9ff698);
    uint8_t *v90425d14e6 = (uint8_t *)malloc(0x2);
    fill(v90425d14e6, 0x2, (buffer_vee6a8e2f9c | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v869bdbd2e7 + 0x1e, 0x2, (uint8_t *)v90425d14e6);
    free(v90425d14e6);
    uint8_t *v4fe5143bba = (uint8_t *)malloc(0x4);
    fill(v4fe5143bba, 0x4, (OHCI_ISO_TD_v869bdbd2e7 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2aa50f4ec6 + 0x8, 0x4, (uint8_t *)v4fe5143bba);
    free(v4fe5143bba);
    goto v5bc7fdeb31_out;
v5bc7fdeb31_out:;
    uint8_t *v4ba4d5e247 = (uint8_t *)malloc(0x4);
    fill(v4ba4d5e247, 0x4, OHCI_ED_v2aa50f4ec6, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2aa50f4ec6 + 0xc, 0x4, (uint8_t *)v4ba4d5e247);
    free(v4ba4d5e247);
    uint8_t *v39dc2c06f3 = (uint8_t *)malloc(0x4);
    fill(v39dc2c06f3, 0x4, OHCI_ED_v2aa50f4ec6, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x14, 0x4, (uint8_t *)v39dc2c06f3);
    free(v39dc2c06f3);
    goto v6c4c393537_out;
v6c4c393537_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vd17034ce51_0; break;
    }
vd17034ce51_0:;
    stateful_free(OHCI_ED_v866d700209);
    OHCI_ED_v866d700209 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v866d700209 = 0x%lx\n", OHCI_ED_v866d700209);
    uint8_t *vbc8a803899 = (uint8_t *)malloc(0x4);
    fill(vbc8a803899, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v866d700209 + 0x0, 0x4, (uint8_t *)vbc8a803899);
    free(vbc8a803899);
    uint8_t *ve4ed458b01 = (uint8_t *)malloc(0x4);
    fill(ve4ed458b01, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v866d700209 + 0x4, 0x4, (uint8_t *)ve4ed458b01);
    free(ve4ed458b01);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v953c178e61_0; break;
        case 1: goto v953c178e61_1; break;
    }
v953c178e61_0:;
    stateful_free(OHCI_TD_va1727f7ea5);
    OHCI_TD_va1727f7ea5 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_va1727f7ea5 = 0x%lx\n", OHCI_TD_va1727f7ea5);
    uint8_t *vab78a4ee38 = (uint8_t *)malloc(0x4);
    fill(vab78a4ee38, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va1727f7ea5 + 0x0, 0x4, (uint8_t *)vab78a4ee38);
    free(vab78a4ee38);
    uint8_t *v714d85bde1 = (uint8_t *)malloc(0x4);
    fill(v714d85bde1, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va1727f7ea5 + 0x4, 0x4, (uint8_t *)v714d85bde1);
    free(v714d85bde1);
    uint8_t *v30519f6ab5 = (uint8_t *)malloc(0x4);
    fill(v30519f6ab5, 0x4, (OHCI_TD_va1727f7ea5 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va1727f7ea5 + 0x8, 0x4, (uint8_t *)v30519f6ab5);
    free(v30519f6ab5);
    uint8_t *v7d7a0bfa59 = (uint8_t *)malloc(0x4);
    fill(v7d7a0bfa59, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va1727f7ea5 + 0xc, 0x4, (uint8_t *)v7d7a0bfa59);
    free(v7d7a0bfa59);
    uint8_t *v486095c2f8 = (uint8_t *)malloc(0x4);
    fill(v486095c2f8, 0x4, (OHCI_TD_va1727f7ea5 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v866d700209 + 0x8, 0x4, (uint8_t *)v486095c2f8);
    free(v486095c2f8);
    goto v953c178e61_out;
v953c178e61_1:;
    stateful_free(OHCI_ISO_TD_v2168108139);
    OHCI_ISO_TD_v2168108139 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v2168108139 = 0x%lx\n", OHCI_ISO_TD_v2168108139);
    uint8_t *vda3f22d184 = (uint8_t *)malloc(0x4);
    fill(vda3f22d184, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x0, 0x4, (uint8_t *)vda3f22d184);
    free(vda3f22d184);
    uint8_t *v75f80092ea = (uint8_t *)malloc(0x4);
    fill(v75f80092ea, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x4, 0x4, (uint8_t *)v75f80092ea);
    free(v75f80092ea);
    uint8_t *v89419b16bb = (uint8_t *)malloc(0x4);
    fill(v89419b16bb, 0x4, (OHCI_ISO_TD_v2168108139 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x8, 0x4, (uint8_t *)v89419b16bb);
    free(v89419b16bb);
    uint8_t *vca92720ac2 = (uint8_t *)malloc(0x4);
    fill(vca92720ac2, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0xc, 0x4, (uint8_t *)vca92720ac2);
    free(vca92720ac2);
    stateful_free(buffer_v72d6bc20d8);
    buffer_v72d6bc20d8 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v72d6bc20d8 = 0x%lx\n", buffer_v72d6bc20d8);
    uint8_t *vf967522170 = (uint8_t *)malloc(0x100);
    fill(vf967522170, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v72d6bc20d8 + 0x0, 0x100, (uint8_t *)vf967522170);
    free(vf967522170);
    uint8_t *v830a239360 = (uint8_t *)malloc(0x2);
    fill(v830a239360, 0x2, (buffer_v72d6bc20d8 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x10, 0x2, (uint8_t *)v830a239360);
    free(v830a239360);
    stateful_free(buffer_vf7f60e7f75);
    buffer_vf7f60e7f75 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf7f60e7f75 = 0x%lx\n", buffer_vf7f60e7f75);
    uint8_t *v91b92f8b8a = (uint8_t *)malloc(0x100);
    fill(v91b92f8b8a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf7f60e7f75 + 0x0, 0x100, (uint8_t *)v91b92f8b8a);
    free(v91b92f8b8a);
    uint8_t *v8e7a744a7f = (uint8_t *)malloc(0x2);
    fill(v8e7a744a7f, 0x2, (buffer_vf7f60e7f75 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x12, 0x2, (uint8_t *)v8e7a744a7f);
    free(v8e7a744a7f);
    stateful_free(buffer_v809f292387);
    buffer_v809f292387 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v809f292387 = 0x%lx\n", buffer_v809f292387);
    uint8_t *v2afd65c3a7 = (uint8_t *)malloc(0x100);
    fill(v2afd65c3a7, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v809f292387 + 0x0, 0x100, (uint8_t *)v2afd65c3a7);
    free(v2afd65c3a7);
    uint8_t *v3ba6857733 = (uint8_t *)malloc(0x2);
    fill(v3ba6857733, 0x2, (buffer_v809f292387 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x14, 0x2, (uint8_t *)v3ba6857733);
    free(v3ba6857733);
    stateful_free(buffer_vbf391fbb13);
    buffer_vbf391fbb13 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbf391fbb13 = 0x%lx\n", buffer_vbf391fbb13);
    uint8_t *v8c479390d4 = (uint8_t *)malloc(0x100);
    fill(v8c479390d4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbf391fbb13 + 0x0, 0x100, (uint8_t *)v8c479390d4);
    free(v8c479390d4);
    uint8_t *v32dec6d586 = (uint8_t *)malloc(0x2);
    fill(v32dec6d586, 0x2, (buffer_vbf391fbb13 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x16, 0x2, (uint8_t *)v32dec6d586);
    free(v32dec6d586);
    stateful_free(buffer_vc12ea9b8e7);
    buffer_vc12ea9b8e7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc12ea9b8e7 = 0x%lx\n", buffer_vc12ea9b8e7);
    uint8_t *vdbf9a793ec = (uint8_t *)malloc(0x100);
    fill(vdbf9a793ec, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc12ea9b8e7 + 0x0, 0x100, (uint8_t *)vdbf9a793ec);
    free(vdbf9a793ec);
    uint8_t *v99cb37c76e = (uint8_t *)malloc(0x2);
    fill(v99cb37c76e, 0x2, (buffer_vc12ea9b8e7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x18, 0x2, (uint8_t *)v99cb37c76e);
    free(v99cb37c76e);
    stateful_free(buffer_vf8e45086ca);
    buffer_vf8e45086ca = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf8e45086ca = 0x%lx\n", buffer_vf8e45086ca);
    uint8_t *vc9d4e1bbc4 = (uint8_t *)malloc(0x100);
    fill(vc9d4e1bbc4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf8e45086ca + 0x0, 0x100, (uint8_t *)vc9d4e1bbc4);
    free(vc9d4e1bbc4);
    uint8_t *va4fd9204b3 = (uint8_t *)malloc(0x2);
    fill(va4fd9204b3, 0x2, (buffer_vf8e45086ca | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x1a, 0x2, (uint8_t *)va4fd9204b3);
    free(va4fd9204b3);
    stateful_free(buffer_v961d8dcf9b);
    buffer_v961d8dcf9b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v961d8dcf9b = 0x%lx\n", buffer_v961d8dcf9b);
    uint8_t *vd35f581e36 = (uint8_t *)malloc(0x100);
    fill(vd35f581e36, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v961d8dcf9b + 0x0, 0x100, (uint8_t *)vd35f581e36);
    free(vd35f581e36);
    uint8_t *v3c91e45824 = (uint8_t *)malloc(0x2);
    fill(v3c91e45824, 0x2, (buffer_v961d8dcf9b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x1c, 0x2, (uint8_t *)v3c91e45824);
    free(v3c91e45824);
    stateful_free(buffer_vbda17da200);
    buffer_vbda17da200 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbda17da200 = 0x%lx\n", buffer_vbda17da200);
    uint8_t *v9d41a10b16 = (uint8_t *)malloc(0x100);
    fill(v9d41a10b16, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbda17da200 + 0x0, 0x100, (uint8_t *)v9d41a10b16);
    free(v9d41a10b16);
    uint8_t *v7f104dcfd3 = (uint8_t *)malloc(0x2);
    fill(v7f104dcfd3, 0x2, (buffer_vbda17da200 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2168108139 + 0x1e, 0x2, (uint8_t *)v7f104dcfd3);
    free(v7f104dcfd3);
    uint8_t *v7c23bbfc04 = (uint8_t *)malloc(0x4);
    fill(v7c23bbfc04, 0x4, (OHCI_ISO_TD_v2168108139 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v866d700209 + 0x8, 0x4, (uint8_t *)v7c23bbfc04);
    free(v7c23bbfc04);
    goto v953c178e61_out;
v953c178e61_out:;
    uint8_t *vb984dbe3ae = (uint8_t *)malloc(0x4);
    fill(vb984dbe3ae, 0x4, OHCI_ED_v866d700209, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v866d700209 + 0xc, 0x4, (uint8_t *)vb984dbe3ae);
    free(vb984dbe3ae);
    uint8_t *v310dfbf4d7 = (uint8_t *)malloc(0x4);
    fill(v310dfbf4d7, 0x4, OHCI_ED_v866d700209, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x18, 0x4, (uint8_t *)v310dfbf4d7);
    free(v310dfbf4d7);
    goto vd17034ce51_out;
vd17034ce51_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v552ae5ca41_0; break;
    }
v552ae5ca41_0:;
    stateful_free(OHCI_ED_vdc2151e17e);
    OHCI_ED_vdc2151e17e = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vdc2151e17e = 0x%lx\n", OHCI_ED_vdc2151e17e);
    uint8_t *v95dd24bd27 = (uint8_t *)malloc(0x4);
    fill(v95dd24bd27, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vdc2151e17e + 0x0, 0x4, (uint8_t *)v95dd24bd27);
    free(v95dd24bd27);
    uint8_t *v92976e6ce0 = (uint8_t *)malloc(0x4);
    fill(v92976e6ce0, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vdc2151e17e + 0x4, 0x4, (uint8_t *)v92976e6ce0);
    free(v92976e6ce0);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto vd334886ff1_0; break;
        case 1: goto vd334886ff1_1; break;
    }
vd334886ff1_0:;
    stateful_free(OHCI_TD_v68777babc5);
    OHCI_TD_v68777babc5 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v68777babc5 = 0x%lx\n", OHCI_TD_v68777babc5);
    uint8_t *v92a9717778 = (uint8_t *)malloc(0x4);
    fill(v92a9717778, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v68777babc5 + 0x0, 0x4, (uint8_t *)v92a9717778);
    free(v92a9717778);
    uint8_t *v1938d096ed = (uint8_t *)malloc(0x4);
    fill(v1938d096ed, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v68777babc5 + 0x4, 0x4, (uint8_t *)v1938d096ed);
    free(v1938d096ed);
    uint8_t *v1615975596 = (uint8_t *)malloc(0x4);
    fill(v1615975596, 0x4, (OHCI_TD_v68777babc5 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v68777babc5 + 0x8, 0x4, (uint8_t *)v1615975596);
    free(v1615975596);
    uint8_t *vcb0206728f = (uint8_t *)malloc(0x4);
    fill(vcb0206728f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v68777babc5 + 0xc, 0x4, (uint8_t *)vcb0206728f);
    free(vcb0206728f);
    uint8_t *v848d77e3c7 = (uint8_t *)malloc(0x4);
    fill(v848d77e3c7, 0x4, (OHCI_TD_v68777babc5 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vdc2151e17e + 0x8, 0x4, (uint8_t *)v848d77e3c7);
    free(v848d77e3c7);
    goto vd334886ff1_out;
vd334886ff1_1:;
    stateful_free(OHCI_ISO_TD_v6238d0a0cf);
    OHCI_ISO_TD_v6238d0a0cf = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v6238d0a0cf = 0x%lx\n", OHCI_ISO_TD_v6238d0a0cf);
    uint8_t *v2d64584a9e = (uint8_t *)malloc(0x4);
    fill(v2d64584a9e, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x0, 0x4, (uint8_t *)v2d64584a9e);
    free(v2d64584a9e);
    uint8_t *v478947081b = (uint8_t *)malloc(0x4);
    fill(v478947081b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x4, 0x4, (uint8_t *)v478947081b);
    free(v478947081b);
    uint8_t *v9f7a46b845 = (uint8_t *)malloc(0x4);
    fill(v9f7a46b845, 0x4, (OHCI_ISO_TD_v6238d0a0cf & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x8, 0x4, (uint8_t *)v9f7a46b845);
    free(v9f7a46b845);
    uint8_t *vc7b2595e93 = (uint8_t *)malloc(0x4);
    fill(vc7b2595e93, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0xc, 0x4, (uint8_t *)vc7b2595e93);
    free(vc7b2595e93);
    stateful_free(buffer_v3d2bf04220);
    buffer_v3d2bf04220 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v3d2bf04220 = 0x%lx\n", buffer_v3d2bf04220);
    uint8_t *vf013f4e739 = (uint8_t *)malloc(0x100);
    fill(vf013f4e739, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v3d2bf04220 + 0x0, 0x100, (uint8_t *)vf013f4e739);
    free(vf013f4e739);
    uint8_t *vfbdc223305 = (uint8_t *)malloc(0x2);
    fill(vfbdc223305, 0x2, (buffer_v3d2bf04220 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x10, 0x2, (uint8_t *)vfbdc223305);
    free(vfbdc223305);
    stateful_free(buffer_vd476fe38ba);
    buffer_vd476fe38ba = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vd476fe38ba = 0x%lx\n", buffer_vd476fe38ba);
    uint8_t *v24dcea5ab8 = (uint8_t *)malloc(0x100);
    fill(v24dcea5ab8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vd476fe38ba + 0x0, 0x100, (uint8_t *)v24dcea5ab8);
    free(v24dcea5ab8);
    uint8_t *v85dc1819df = (uint8_t *)malloc(0x2);
    fill(v85dc1819df, 0x2, (buffer_vd476fe38ba | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x12, 0x2, (uint8_t *)v85dc1819df);
    free(v85dc1819df);
    stateful_free(buffer_vf11ddff70e);
    buffer_vf11ddff70e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf11ddff70e = 0x%lx\n", buffer_vf11ddff70e);
    uint8_t *vfcfd324688 = (uint8_t *)malloc(0x100);
    fill(vfcfd324688, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf11ddff70e + 0x0, 0x100, (uint8_t *)vfcfd324688);
    free(vfcfd324688);
    uint8_t *v334f97a4ec = (uint8_t *)malloc(0x2);
    fill(v334f97a4ec, 0x2, (buffer_vf11ddff70e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x14, 0x2, (uint8_t *)v334f97a4ec);
    free(v334f97a4ec);
    stateful_free(buffer_v6af944e07b);
    buffer_v6af944e07b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v6af944e07b = 0x%lx\n", buffer_v6af944e07b);
    uint8_t *va5b466b4cd = (uint8_t *)malloc(0x100);
    fill(va5b466b4cd, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v6af944e07b + 0x0, 0x100, (uint8_t *)va5b466b4cd);
    free(va5b466b4cd);
    uint8_t *vc66456bfe7 = (uint8_t *)malloc(0x2);
    fill(vc66456bfe7, 0x2, (buffer_v6af944e07b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x16, 0x2, (uint8_t *)vc66456bfe7);
    free(vc66456bfe7);
    stateful_free(buffer_vb799ae8e9a);
    buffer_vb799ae8e9a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb799ae8e9a = 0x%lx\n", buffer_vb799ae8e9a);
    uint8_t *v6b9370b732 = (uint8_t *)malloc(0x100);
    fill(v6b9370b732, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb799ae8e9a + 0x0, 0x100, (uint8_t *)v6b9370b732);
    free(v6b9370b732);
    uint8_t *va4b0c73bf7 = (uint8_t *)malloc(0x2);
    fill(va4b0c73bf7, 0x2, (buffer_vb799ae8e9a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x18, 0x2, (uint8_t *)va4b0c73bf7);
    free(va4b0c73bf7);
    stateful_free(buffer_vb2ddc481ac);
    buffer_vb2ddc481ac = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb2ddc481ac = 0x%lx\n", buffer_vb2ddc481ac);
    uint8_t *v444c3c0601 = (uint8_t *)malloc(0x100);
    fill(v444c3c0601, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb2ddc481ac + 0x0, 0x100, (uint8_t *)v444c3c0601);
    free(v444c3c0601);
    uint8_t *v32a59e3741 = (uint8_t *)malloc(0x2);
    fill(v32a59e3741, 0x2, (buffer_vb2ddc481ac | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x1a, 0x2, (uint8_t *)v32a59e3741);
    free(v32a59e3741);
    stateful_free(buffer_vfc98c279cf);
    buffer_vfc98c279cf = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfc98c279cf = 0x%lx\n", buffer_vfc98c279cf);
    uint8_t *v6776eb3783 = (uint8_t *)malloc(0x100);
    fill(v6776eb3783, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfc98c279cf + 0x0, 0x100, (uint8_t *)v6776eb3783);
    free(v6776eb3783);
    uint8_t *v7f562e989b = (uint8_t *)malloc(0x2);
    fill(v7f562e989b, 0x2, (buffer_vfc98c279cf | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x1c, 0x2, (uint8_t *)v7f562e989b);
    free(v7f562e989b);
    stateful_free(buffer_v62fda85477);
    buffer_v62fda85477 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v62fda85477 = 0x%lx\n", buffer_v62fda85477);
    uint8_t *v3faa677b1a = (uint8_t *)malloc(0x100);
    fill(v3faa677b1a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v62fda85477 + 0x0, 0x100, (uint8_t *)v3faa677b1a);
    free(v3faa677b1a);
    uint8_t *va85536f31b = (uint8_t *)malloc(0x2);
    fill(va85536f31b, 0x2, (buffer_v62fda85477 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v6238d0a0cf + 0x1e, 0x2, (uint8_t *)va85536f31b);
    free(va85536f31b);
    uint8_t *v4f651f216f = (uint8_t *)malloc(0x4);
    fill(v4f651f216f, 0x4, (OHCI_ISO_TD_v6238d0a0cf & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vdc2151e17e + 0x8, 0x4, (uint8_t *)v4f651f216f);
    free(v4f651f216f);
    goto vd334886ff1_out;
vd334886ff1_out:;
    uint8_t *va416c71df6 = (uint8_t *)malloc(0x4);
    fill(va416c71df6, 0x4, OHCI_ED_vdc2151e17e, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vdc2151e17e + 0xc, 0x4, (uint8_t *)va416c71df6);
    free(va416c71df6);
    uint8_t *ve98114a4b8 = (uint8_t *)malloc(0x4);
    fill(ve98114a4b8, 0x4, OHCI_ED_vdc2151e17e, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x1c, 0x4, (uint8_t *)ve98114a4b8);
    free(ve98114a4b8);
    goto v552ae5ca41_out;
v552ae5ca41_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v19faa06e0c_0; break;
    }
v19faa06e0c_0:;
    stateful_free(OHCI_ED_v26c00984c7);
    OHCI_ED_v26c00984c7 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v26c00984c7 = 0x%lx\n", OHCI_ED_v26c00984c7);
    uint8_t *vb887d3e9a3 = (uint8_t *)malloc(0x4);
    fill(vb887d3e9a3, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v26c00984c7 + 0x0, 0x4, (uint8_t *)vb887d3e9a3);
    free(vb887d3e9a3);
    uint8_t *v4d26c0c52b = (uint8_t *)malloc(0x4);
    fill(v4d26c0c52b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v26c00984c7 + 0x4, 0x4, (uint8_t *)v4d26c0c52b);
    free(v4d26c0c52b);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto va145789921_0; break;
        case 1: goto va145789921_1; break;
    }
va145789921_0:;
    stateful_free(OHCI_TD_v58bf3b9ea6);
    OHCI_TD_v58bf3b9ea6 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v58bf3b9ea6 = 0x%lx\n", OHCI_TD_v58bf3b9ea6);
    uint8_t *v5675f2fcc0 = (uint8_t *)malloc(0x4);
    fill(v5675f2fcc0, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v58bf3b9ea6 + 0x0, 0x4, (uint8_t *)v5675f2fcc0);
    free(v5675f2fcc0);
    uint8_t *v32ca1ebed8 = (uint8_t *)malloc(0x4);
    fill(v32ca1ebed8, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v58bf3b9ea6 + 0x4, 0x4, (uint8_t *)v32ca1ebed8);
    free(v32ca1ebed8);
    uint8_t *v7612c7e892 = (uint8_t *)malloc(0x4);
    fill(v7612c7e892, 0x4, (OHCI_TD_v58bf3b9ea6 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v58bf3b9ea6 + 0x8, 0x4, (uint8_t *)v7612c7e892);
    free(v7612c7e892);
    uint8_t *v667b94c973 = (uint8_t *)malloc(0x4);
    fill(v667b94c973, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v58bf3b9ea6 + 0xc, 0x4, (uint8_t *)v667b94c973);
    free(v667b94c973);
    uint8_t *v1364fc51a6 = (uint8_t *)malloc(0x4);
    fill(v1364fc51a6, 0x4, (OHCI_TD_v58bf3b9ea6 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v26c00984c7 + 0x8, 0x4, (uint8_t *)v1364fc51a6);
    free(v1364fc51a6);
    goto va145789921_out;
va145789921_1:;
    stateful_free(OHCI_ISO_TD_v7d859725c7);
    OHCI_ISO_TD_v7d859725c7 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v7d859725c7 = 0x%lx\n", OHCI_ISO_TD_v7d859725c7);
    uint8_t *v17afa026e3 = (uint8_t *)malloc(0x4);
    fill(v17afa026e3, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x0, 0x4, (uint8_t *)v17afa026e3);
    free(v17afa026e3);
    uint8_t *v9dd3d9c38b = (uint8_t *)malloc(0x4);
    fill(v9dd3d9c38b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x4, 0x4, (uint8_t *)v9dd3d9c38b);
    free(v9dd3d9c38b);
    uint8_t *vf98d8a5bd9 = (uint8_t *)malloc(0x4);
    fill(vf98d8a5bd9, 0x4, (OHCI_ISO_TD_v7d859725c7 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x8, 0x4, (uint8_t *)vf98d8a5bd9);
    free(vf98d8a5bd9);
    uint8_t *vd62fee8ceb = (uint8_t *)malloc(0x4);
    fill(vd62fee8ceb, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0xc, 0x4, (uint8_t *)vd62fee8ceb);
    free(vd62fee8ceb);
    stateful_free(buffer_vef151673a1);
    buffer_vef151673a1 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vef151673a1 = 0x%lx\n", buffer_vef151673a1);
    uint8_t *v2a6c56cb2a = (uint8_t *)malloc(0x100);
    fill(v2a6c56cb2a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vef151673a1 + 0x0, 0x100, (uint8_t *)v2a6c56cb2a);
    free(v2a6c56cb2a);
    uint8_t *v2af57422b1 = (uint8_t *)malloc(0x2);
    fill(v2af57422b1, 0x2, (buffer_vef151673a1 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x10, 0x2, (uint8_t *)v2af57422b1);
    free(v2af57422b1);
    stateful_free(buffer_vcca1a03463);
    buffer_vcca1a03463 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcca1a03463 = 0x%lx\n", buffer_vcca1a03463);
    uint8_t *vf5f5b0d204 = (uint8_t *)malloc(0x100);
    fill(vf5f5b0d204, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcca1a03463 + 0x0, 0x100, (uint8_t *)vf5f5b0d204);
    free(vf5f5b0d204);
    uint8_t *v4f4f5a2619 = (uint8_t *)malloc(0x2);
    fill(v4f4f5a2619, 0x2, (buffer_vcca1a03463 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x12, 0x2, (uint8_t *)v4f4f5a2619);
    free(v4f4f5a2619);
    stateful_free(buffer_v71cff81464);
    buffer_v71cff81464 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v71cff81464 = 0x%lx\n", buffer_v71cff81464);
    uint8_t *v3ac2496e62 = (uint8_t *)malloc(0x100);
    fill(v3ac2496e62, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v71cff81464 + 0x0, 0x100, (uint8_t *)v3ac2496e62);
    free(v3ac2496e62);
    uint8_t *vd641ba418f = (uint8_t *)malloc(0x2);
    fill(vd641ba418f, 0x2, (buffer_v71cff81464 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x14, 0x2, (uint8_t *)vd641ba418f);
    free(vd641ba418f);
    stateful_free(buffer_v30c32323c1);
    buffer_v30c32323c1 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v30c32323c1 = 0x%lx\n", buffer_v30c32323c1);
    uint8_t *v835b8afb58 = (uint8_t *)malloc(0x100);
    fill(v835b8afb58, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v30c32323c1 + 0x0, 0x100, (uint8_t *)v835b8afb58);
    free(v835b8afb58);
    uint8_t *vbcccc53ac3 = (uint8_t *)malloc(0x2);
    fill(vbcccc53ac3, 0x2, (buffer_v30c32323c1 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x16, 0x2, (uint8_t *)vbcccc53ac3);
    free(vbcccc53ac3);
    stateful_free(buffer_vf4dd05d513);
    buffer_vf4dd05d513 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf4dd05d513 = 0x%lx\n", buffer_vf4dd05d513);
    uint8_t *vc680b96f45 = (uint8_t *)malloc(0x100);
    fill(vc680b96f45, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf4dd05d513 + 0x0, 0x100, (uint8_t *)vc680b96f45);
    free(vc680b96f45);
    uint8_t *ve108e5d92f = (uint8_t *)malloc(0x2);
    fill(ve108e5d92f, 0x2, (buffer_vf4dd05d513 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x18, 0x2, (uint8_t *)ve108e5d92f);
    free(ve108e5d92f);
    stateful_free(buffer_vef2d9a38e6);
    buffer_vef2d9a38e6 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vef2d9a38e6 = 0x%lx\n", buffer_vef2d9a38e6);
    uint8_t *v5f1fc0aa48 = (uint8_t *)malloc(0x100);
    fill(v5f1fc0aa48, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vef2d9a38e6 + 0x0, 0x100, (uint8_t *)v5f1fc0aa48);
    free(v5f1fc0aa48);
    uint8_t *vb3f4f5acf1 = (uint8_t *)malloc(0x2);
    fill(vb3f4f5acf1, 0x2, (buffer_vef2d9a38e6 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x1a, 0x2, (uint8_t *)vb3f4f5acf1);
    free(vb3f4f5acf1);
    stateful_free(buffer_v374a6cc9e0);
    buffer_v374a6cc9e0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v374a6cc9e0 = 0x%lx\n", buffer_v374a6cc9e0);
    uint8_t *v1a172460fb = (uint8_t *)malloc(0x100);
    fill(v1a172460fb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v374a6cc9e0 + 0x0, 0x100, (uint8_t *)v1a172460fb);
    free(v1a172460fb);
    uint8_t *v2ea5cef8e6 = (uint8_t *)malloc(0x2);
    fill(v2ea5cef8e6, 0x2, (buffer_v374a6cc9e0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x1c, 0x2, (uint8_t *)v2ea5cef8e6);
    free(v2ea5cef8e6);
    stateful_free(buffer_vf20b575d4e);
    buffer_vf20b575d4e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf20b575d4e = 0x%lx\n", buffer_vf20b575d4e);
    uint8_t *v22057b918d = (uint8_t *)malloc(0x100);
    fill(v22057b918d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf20b575d4e + 0x0, 0x100, (uint8_t *)v22057b918d);
    free(v22057b918d);
    uint8_t *v70dc4769e0 = (uint8_t *)malloc(0x2);
    fill(v70dc4769e0, 0x2, (buffer_vf20b575d4e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v7d859725c7 + 0x1e, 0x2, (uint8_t *)v70dc4769e0);
    free(v70dc4769e0);
    uint8_t *v11705ee334 = (uint8_t *)malloc(0x4);
    fill(v11705ee334, 0x4, (OHCI_ISO_TD_v7d859725c7 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v26c00984c7 + 0x8, 0x4, (uint8_t *)v11705ee334);
    free(v11705ee334);
    goto va145789921_out;
va145789921_out:;
    uint8_t *v1608f0df09 = (uint8_t *)malloc(0x4);
    fill(v1608f0df09, 0x4, OHCI_ED_v26c00984c7, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v26c00984c7 + 0xc, 0x4, (uint8_t *)v1608f0df09);
    free(v1608f0df09);
    uint8_t *va4b2f62c61 = (uint8_t *)malloc(0x4);
    fill(va4b2f62c61, 0x4, OHCI_ED_v26c00984c7, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x20, 0x4, (uint8_t *)va4b2f62c61);
    free(va4b2f62c61);
    goto v19faa06e0c_out;
v19faa06e0c_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vef8d9ff015_0; break;
    }
vef8d9ff015_0:;
    stateful_free(OHCI_ED_v101bb5fa6a);
    OHCI_ED_v101bb5fa6a = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v101bb5fa6a = 0x%lx\n", OHCI_ED_v101bb5fa6a);
    uint8_t *vc5bc8847a5 = (uint8_t *)malloc(0x4);
    fill(vc5bc8847a5, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v101bb5fa6a + 0x0, 0x4, (uint8_t *)vc5bc8847a5);
    free(vc5bc8847a5);
    uint8_t *v989e9e258b = (uint8_t *)malloc(0x4);
    fill(v989e9e258b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v101bb5fa6a + 0x4, 0x4, (uint8_t *)v989e9e258b);
    free(v989e9e258b);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto vc618fc1e6a_0; break;
        case 1: goto vc618fc1e6a_1; break;
    }
vc618fc1e6a_0:;
    stateful_free(OHCI_TD_vf45da406bb);
    OHCI_TD_vf45da406bb = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vf45da406bb = 0x%lx\n", OHCI_TD_vf45da406bb);
    uint8_t *v56bf5e579f = (uint8_t *)malloc(0x4);
    fill(v56bf5e579f, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vf45da406bb + 0x0, 0x4, (uint8_t *)v56bf5e579f);
    free(v56bf5e579f);
    uint8_t *ve0934e387f = (uint8_t *)malloc(0x4);
    fill(ve0934e387f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vf45da406bb + 0x4, 0x4, (uint8_t *)ve0934e387f);
    free(ve0934e387f);
    uint8_t *v197e85a0c6 = (uint8_t *)malloc(0x4);
    fill(v197e85a0c6, 0x4, (OHCI_TD_vf45da406bb & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vf45da406bb + 0x8, 0x4, (uint8_t *)v197e85a0c6);
    free(v197e85a0c6);
    uint8_t *v9a9c1d73f1 = (uint8_t *)malloc(0x4);
    fill(v9a9c1d73f1, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vf45da406bb + 0xc, 0x4, (uint8_t *)v9a9c1d73f1);
    free(v9a9c1d73f1);
    uint8_t *vadd7ae79eb = (uint8_t *)malloc(0x4);
    fill(vadd7ae79eb, 0x4, (OHCI_TD_vf45da406bb & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v101bb5fa6a + 0x8, 0x4, (uint8_t *)vadd7ae79eb);
    free(vadd7ae79eb);
    goto vc618fc1e6a_out;
vc618fc1e6a_1:;
    stateful_free(OHCI_ISO_TD_v725c2675ca);
    OHCI_ISO_TD_v725c2675ca = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v725c2675ca = 0x%lx\n", OHCI_ISO_TD_v725c2675ca);
    uint8_t *va934abd11b = (uint8_t *)malloc(0x4);
    fill(va934abd11b, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x0, 0x4, (uint8_t *)va934abd11b);
    free(va934abd11b);
    uint8_t *v4d433c1f4e = (uint8_t *)malloc(0x4);
    fill(v4d433c1f4e, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x4, 0x4, (uint8_t *)v4d433c1f4e);
    free(v4d433c1f4e);
    uint8_t *v115c3e9276 = (uint8_t *)malloc(0x4);
    fill(v115c3e9276, 0x4, (OHCI_ISO_TD_v725c2675ca & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x8, 0x4, (uint8_t *)v115c3e9276);
    free(v115c3e9276);
    uint8_t *v4b3099ecd4 = (uint8_t *)malloc(0x4);
    fill(v4b3099ecd4, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0xc, 0x4, (uint8_t *)v4b3099ecd4);
    free(v4b3099ecd4);
    stateful_free(buffer_v6ac1ca75af);
    buffer_v6ac1ca75af = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v6ac1ca75af = 0x%lx\n", buffer_v6ac1ca75af);
    uint8_t *v34b2a7daed = (uint8_t *)malloc(0x100);
    fill(v34b2a7daed, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v6ac1ca75af + 0x0, 0x100, (uint8_t *)v34b2a7daed);
    free(v34b2a7daed);
    uint8_t *v116b47e2e0 = (uint8_t *)malloc(0x2);
    fill(v116b47e2e0, 0x2, (buffer_v6ac1ca75af | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x10, 0x2, (uint8_t *)v116b47e2e0);
    free(v116b47e2e0);
    stateful_free(buffer_v141b1a1b40);
    buffer_v141b1a1b40 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v141b1a1b40 = 0x%lx\n", buffer_v141b1a1b40);
    uint8_t *v4b6a3fea01 = (uint8_t *)malloc(0x100);
    fill(v4b6a3fea01, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v141b1a1b40 + 0x0, 0x100, (uint8_t *)v4b6a3fea01);
    free(v4b6a3fea01);
    uint8_t *v4cdaf00ed9 = (uint8_t *)malloc(0x2);
    fill(v4cdaf00ed9, 0x2, (buffer_v141b1a1b40 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x12, 0x2, (uint8_t *)v4cdaf00ed9);
    free(v4cdaf00ed9);
    stateful_free(buffer_v1f12a0e912);
    buffer_v1f12a0e912 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1f12a0e912 = 0x%lx\n", buffer_v1f12a0e912);
    uint8_t *v95e3f32914 = (uint8_t *)malloc(0x100);
    fill(v95e3f32914, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1f12a0e912 + 0x0, 0x100, (uint8_t *)v95e3f32914);
    free(v95e3f32914);
    uint8_t *v1da5a563a9 = (uint8_t *)malloc(0x2);
    fill(v1da5a563a9, 0x2, (buffer_v1f12a0e912 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x14, 0x2, (uint8_t *)v1da5a563a9);
    free(v1da5a563a9);
    stateful_free(buffer_v78548d7b11);
    buffer_v78548d7b11 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v78548d7b11 = 0x%lx\n", buffer_v78548d7b11);
    uint8_t *v8a34065b2b = (uint8_t *)malloc(0x100);
    fill(v8a34065b2b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v78548d7b11 + 0x0, 0x100, (uint8_t *)v8a34065b2b);
    free(v8a34065b2b);
    uint8_t *vdae3c72023 = (uint8_t *)malloc(0x2);
    fill(vdae3c72023, 0x2, (buffer_v78548d7b11 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x16, 0x2, (uint8_t *)vdae3c72023);
    free(vdae3c72023);
    stateful_free(buffer_v2d8b5b4159);
    buffer_v2d8b5b4159 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2d8b5b4159 = 0x%lx\n", buffer_v2d8b5b4159);
    uint8_t *v2147c6f582 = (uint8_t *)malloc(0x100);
    fill(v2147c6f582, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2d8b5b4159 + 0x0, 0x100, (uint8_t *)v2147c6f582);
    free(v2147c6f582);
    uint8_t *v3f84747c8d = (uint8_t *)malloc(0x2);
    fill(v3f84747c8d, 0x2, (buffer_v2d8b5b4159 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x18, 0x2, (uint8_t *)v3f84747c8d);
    free(v3f84747c8d);
    stateful_free(buffer_vf96d4403d4);
    buffer_vf96d4403d4 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf96d4403d4 = 0x%lx\n", buffer_vf96d4403d4);
    uint8_t *vea37651587 = (uint8_t *)malloc(0x100);
    fill(vea37651587, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf96d4403d4 + 0x0, 0x100, (uint8_t *)vea37651587);
    free(vea37651587);
    uint8_t *v176f9018b1 = (uint8_t *)malloc(0x2);
    fill(v176f9018b1, 0x2, (buffer_vf96d4403d4 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x1a, 0x2, (uint8_t *)v176f9018b1);
    free(v176f9018b1);
    stateful_free(buffer_v5da53b38d1);
    buffer_v5da53b38d1 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5da53b38d1 = 0x%lx\n", buffer_v5da53b38d1);
    uint8_t *v816241bd5a = (uint8_t *)malloc(0x100);
    fill(v816241bd5a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5da53b38d1 + 0x0, 0x100, (uint8_t *)v816241bd5a);
    free(v816241bd5a);
    uint8_t *v20aca12055 = (uint8_t *)malloc(0x2);
    fill(v20aca12055, 0x2, (buffer_v5da53b38d1 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x1c, 0x2, (uint8_t *)v20aca12055);
    free(v20aca12055);
    stateful_free(buffer_ve4b8298798);
    buffer_ve4b8298798 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve4b8298798 = 0x%lx\n", buffer_ve4b8298798);
    uint8_t *ve739e5d5a7 = (uint8_t *)malloc(0x100);
    fill(ve739e5d5a7, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve4b8298798 + 0x0, 0x100, (uint8_t *)ve739e5d5a7);
    free(ve739e5d5a7);
    uint8_t *vbc1255417d = (uint8_t *)malloc(0x2);
    fill(vbc1255417d, 0x2, (buffer_ve4b8298798 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v725c2675ca + 0x1e, 0x2, (uint8_t *)vbc1255417d);
    free(vbc1255417d);
    uint8_t *v2034663baa = (uint8_t *)malloc(0x4);
    fill(v2034663baa, 0x4, (OHCI_ISO_TD_v725c2675ca & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v101bb5fa6a + 0x8, 0x4, (uint8_t *)v2034663baa);
    free(v2034663baa);
    goto vc618fc1e6a_out;
vc618fc1e6a_out:;
    uint8_t *v4056125ca1 = (uint8_t *)malloc(0x4);
    fill(v4056125ca1, 0x4, OHCI_ED_v101bb5fa6a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v101bb5fa6a + 0xc, 0x4, (uint8_t *)v4056125ca1);
    free(v4056125ca1);
    uint8_t *va281becd30 = (uint8_t *)malloc(0x4);
    fill(va281becd30, 0x4, OHCI_ED_v101bb5fa6a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x24, 0x4, (uint8_t *)va281becd30);
    free(va281becd30);
    goto vef8d9ff015_out;
vef8d9ff015_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vd3d1af353e_0; break;
    }
vd3d1af353e_0:;
    stateful_free(OHCI_ED_ve6a1a40bf0);
    OHCI_ED_ve6a1a40bf0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_ve6a1a40bf0 = 0x%lx\n", OHCI_ED_ve6a1a40bf0);
    uint8_t *vb9019c5944 = (uint8_t *)malloc(0x4);
    fill(vb9019c5944, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve6a1a40bf0 + 0x0, 0x4, (uint8_t *)vb9019c5944);
    free(vb9019c5944);
    uint8_t *v44444f7dad = (uint8_t *)malloc(0x4);
    fill(v44444f7dad, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve6a1a40bf0 + 0x4, 0x4, (uint8_t *)v44444f7dad);
    free(v44444f7dad);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v1d6d903bf7_0; break;
        case 1: goto v1d6d903bf7_1; break;
    }
v1d6d903bf7_0:;
    stateful_free(OHCI_TD_vb080e0035e);
    OHCI_TD_vb080e0035e = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vb080e0035e = 0x%lx\n", OHCI_TD_vb080e0035e);
    uint8_t *v420fedb80a = (uint8_t *)malloc(0x4);
    fill(v420fedb80a, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb080e0035e + 0x0, 0x4, (uint8_t *)v420fedb80a);
    free(v420fedb80a);
    uint8_t *v54536cba28 = (uint8_t *)malloc(0x4);
    fill(v54536cba28, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb080e0035e + 0x4, 0x4, (uint8_t *)v54536cba28);
    free(v54536cba28);
    uint8_t *v678fc81fe3 = (uint8_t *)malloc(0x4);
    fill(v678fc81fe3, 0x4, (OHCI_TD_vb080e0035e & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb080e0035e + 0x8, 0x4, (uint8_t *)v678fc81fe3);
    free(v678fc81fe3);
    uint8_t *va881692c8b = (uint8_t *)malloc(0x4);
    fill(va881692c8b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb080e0035e + 0xc, 0x4, (uint8_t *)va881692c8b);
    free(va881692c8b);
    uint8_t *v5d7ee6e358 = (uint8_t *)malloc(0x4);
    fill(v5d7ee6e358, 0x4, (OHCI_TD_vb080e0035e & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve6a1a40bf0 + 0x8, 0x4, (uint8_t *)v5d7ee6e358);
    free(v5d7ee6e358);
    goto v1d6d903bf7_out;
v1d6d903bf7_1:;
    stateful_free(OHCI_ISO_TD_v9ad7558fee);
    OHCI_ISO_TD_v9ad7558fee = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v9ad7558fee = 0x%lx\n", OHCI_ISO_TD_v9ad7558fee);
    uint8_t *v99919b34c3 = (uint8_t *)malloc(0x4);
    fill(v99919b34c3, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x0, 0x4, (uint8_t *)v99919b34c3);
    free(v99919b34c3);
    uint8_t *v29685a0e64 = (uint8_t *)malloc(0x4);
    fill(v29685a0e64, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x4, 0x4, (uint8_t *)v29685a0e64);
    free(v29685a0e64);
    uint8_t *v6dca0f0aad = (uint8_t *)malloc(0x4);
    fill(v6dca0f0aad, 0x4, (OHCI_ISO_TD_v9ad7558fee & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x8, 0x4, (uint8_t *)v6dca0f0aad);
    free(v6dca0f0aad);
    uint8_t *vbfb84cdfa4 = (uint8_t *)malloc(0x4);
    fill(vbfb84cdfa4, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0xc, 0x4, (uint8_t *)vbfb84cdfa4);
    free(vbfb84cdfa4);
    stateful_free(buffer_v2452bc39db);
    buffer_v2452bc39db = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2452bc39db = 0x%lx\n", buffer_v2452bc39db);
    uint8_t *v40131e3327 = (uint8_t *)malloc(0x100);
    fill(v40131e3327, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2452bc39db + 0x0, 0x100, (uint8_t *)v40131e3327);
    free(v40131e3327);
    uint8_t *va5160d17e7 = (uint8_t *)malloc(0x2);
    fill(va5160d17e7, 0x2, (buffer_v2452bc39db | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x10, 0x2, (uint8_t *)va5160d17e7);
    free(va5160d17e7);
    stateful_free(buffer_v1cc5a8a074);
    buffer_v1cc5a8a074 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1cc5a8a074 = 0x%lx\n", buffer_v1cc5a8a074);
    uint8_t *v41cb57da50 = (uint8_t *)malloc(0x100);
    fill(v41cb57da50, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1cc5a8a074 + 0x0, 0x100, (uint8_t *)v41cb57da50);
    free(v41cb57da50);
    uint8_t *v48ef09a4b8 = (uint8_t *)malloc(0x2);
    fill(v48ef09a4b8, 0x2, (buffer_v1cc5a8a074 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x12, 0x2, (uint8_t *)v48ef09a4b8);
    free(v48ef09a4b8);
    stateful_free(buffer_v215203c742);
    buffer_v215203c742 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v215203c742 = 0x%lx\n", buffer_v215203c742);
    uint8_t *v6c002fe033 = (uint8_t *)malloc(0x100);
    fill(v6c002fe033, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v215203c742 + 0x0, 0x100, (uint8_t *)v6c002fe033);
    free(v6c002fe033);
    uint8_t *vb8ed3aa468 = (uint8_t *)malloc(0x2);
    fill(vb8ed3aa468, 0x2, (buffer_v215203c742 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x14, 0x2, (uint8_t *)vb8ed3aa468);
    free(vb8ed3aa468);
    stateful_free(buffer_v35475c5ef7);
    buffer_v35475c5ef7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v35475c5ef7 = 0x%lx\n", buffer_v35475c5ef7);
    uint8_t *v683e8e1cfb = (uint8_t *)malloc(0x100);
    fill(v683e8e1cfb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v35475c5ef7 + 0x0, 0x100, (uint8_t *)v683e8e1cfb);
    free(v683e8e1cfb);
    uint8_t *v8c9ebc8a59 = (uint8_t *)malloc(0x2);
    fill(v8c9ebc8a59, 0x2, (buffer_v35475c5ef7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x16, 0x2, (uint8_t *)v8c9ebc8a59);
    free(v8c9ebc8a59);
    stateful_free(buffer_v53b53b92a2);
    buffer_v53b53b92a2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v53b53b92a2 = 0x%lx\n", buffer_v53b53b92a2);
    uint8_t *v111244066e = (uint8_t *)malloc(0x100);
    fill(v111244066e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v53b53b92a2 + 0x0, 0x100, (uint8_t *)v111244066e);
    free(v111244066e);
    uint8_t *v278f58a0fb = (uint8_t *)malloc(0x2);
    fill(v278f58a0fb, 0x2, (buffer_v53b53b92a2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x18, 0x2, (uint8_t *)v278f58a0fb);
    free(v278f58a0fb);
    stateful_free(buffer_vfe3216bd97);
    buffer_vfe3216bd97 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfe3216bd97 = 0x%lx\n", buffer_vfe3216bd97);
    uint8_t *vfdeb26efcc = (uint8_t *)malloc(0x100);
    fill(vfdeb26efcc, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfe3216bd97 + 0x0, 0x100, (uint8_t *)vfdeb26efcc);
    free(vfdeb26efcc);
    uint8_t *vb7ffedec67 = (uint8_t *)malloc(0x2);
    fill(vb7ffedec67, 0x2, (buffer_vfe3216bd97 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x1a, 0x2, (uint8_t *)vb7ffedec67);
    free(vb7ffedec67);
    stateful_free(buffer_v280a07ee4e);
    buffer_v280a07ee4e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v280a07ee4e = 0x%lx\n", buffer_v280a07ee4e);
    uint8_t *v81001b5e21 = (uint8_t *)malloc(0x100);
    fill(v81001b5e21, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v280a07ee4e + 0x0, 0x100, (uint8_t *)v81001b5e21);
    free(v81001b5e21);
    uint8_t *v31cef54457 = (uint8_t *)malloc(0x2);
    fill(v31cef54457, 0x2, (buffer_v280a07ee4e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x1c, 0x2, (uint8_t *)v31cef54457);
    free(v31cef54457);
    stateful_free(buffer_vcdec85da20);
    buffer_vcdec85da20 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcdec85da20 = 0x%lx\n", buffer_vcdec85da20);
    uint8_t *v9028ad8677 = (uint8_t *)malloc(0x100);
    fill(v9028ad8677, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcdec85da20 + 0x0, 0x100, (uint8_t *)v9028ad8677);
    free(v9028ad8677);
    uint8_t *v421f482890 = (uint8_t *)malloc(0x2);
    fill(v421f482890, 0x2, (buffer_vcdec85da20 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v9ad7558fee + 0x1e, 0x2, (uint8_t *)v421f482890);
    free(v421f482890);
    uint8_t *ve1b9f50e21 = (uint8_t *)malloc(0x4);
    fill(ve1b9f50e21, 0x4, (OHCI_ISO_TD_v9ad7558fee & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve6a1a40bf0 + 0x8, 0x4, (uint8_t *)ve1b9f50e21);
    free(ve1b9f50e21);
    goto v1d6d903bf7_out;
v1d6d903bf7_out:;
    uint8_t *v36c55e3ba2 = (uint8_t *)malloc(0x4);
    fill(v36c55e3ba2, 0x4, OHCI_ED_ve6a1a40bf0, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve6a1a40bf0 + 0xc, 0x4, (uint8_t *)v36c55e3ba2);
    free(v36c55e3ba2);
    uint8_t *vdad389fe6a = (uint8_t *)malloc(0x4);
    fill(vdad389fe6a, 0x4, OHCI_ED_ve6a1a40bf0, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x28, 0x4, (uint8_t *)vdad389fe6a);
    free(vdad389fe6a);
    goto vd3d1af353e_out;
vd3d1af353e_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v8222134550_0; break;
    }
v8222134550_0:;
    stateful_free(OHCI_ED_vc13e66af3c);
    OHCI_ED_vc13e66af3c = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vc13e66af3c = 0x%lx\n", OHCI_ED_vc13e66af3c);
    uint8_t *vcf762ef8cc = (uint8_t *)malloc(0x4);
    fill(vcf762ef8cc, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc13e66af3c + 0x0, 0x4, (uint8_t *)vcf762ef8cc);
    free(vcf762ef8cc);
    uint8_t *v3efc91f057 = (uint8_t *)malloc(0x4);
    fill(v3efc91f057, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc13e66af3c + 0x4, 0x4, (uint8_t *)v3efc91f057);
    free(v3efc91f057);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v5f59aa2c4a_0; break;
        case 1: goto v5f59aa2c4a_1; break;
    }
v5f59aa2c4a_0:;
    stateful_free(OHCI_TD_v99e8c82821);
    OHCI_TD_v99e8c82821 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v99e8c82821 = 0x%lx\n", OHCI_TD_v99e8c82821);
    uint8_t *v50ecb7bfa9 = (uint8_t *)malloc(0x4);
    fill(v50ecb7bfa9, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v99e8c82821 + 0x0, 0x4, (uint8_t *)v50ecb7bfa9);
    free(v50ecb7bfa9);
    uint8_t *vef619b1345 = (uint8_t *)malloc(0x4);
    fill(vef619b1345, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v99e8c82821 + 0x4, 0x4, (uint8_t *)vef619b1345);
    free(vef619b1345);
    uint8_t *v1cc99fcc1d = (uint8_t *)malloc(0x4);
    fill(v1cc99fcc1d, 0x4, (OHCI_TD_v99e8c82821 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v99e8c82821 + 0x8, 0x4, (uint8_t *)v1cc99fcc1d);
    free(v1cc99fcc1d);
    uint8_t *vc245078852 = (uint8_t *)malloc(0x4);
    fill(vc245078852, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v99e8c82821 + 0xc, 0x4, (uint8_t *)vc245078852);
    free(vc245078852);
    uint8_t *vdd330a90c3 = (uint8_t *)malloc(0x4);
    fill(vdd330a90c3, 0x4, (OHCI_TD_v99e8c82821 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc13e66af3c + 0x8, 0x4, (uint8_t *)vdd330a90c3);
    free(vdd330a90c3);
    goto v5f59aa2c4a_out;
v5f59aa2c4a_1:;
    stateful_free(OHCI_ISO_TD_v21cc14b312);
    OHCI_ISO_TD_v21cc14b312 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v21cc14b312 = 0x%lx\n", OHCI_ISO_TD_v21cc14b312);
    uint8_t *v641d257116 = (uint8_t *)malloc(0x4);
    fill(v641d257116, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x0, 0x4, (uint8_t *)v641d257116);
    free(v641d257116);
    uint8_t *va9c633e27c = (uint8_t *)malloc(0x4);
    fill(va9c633e27c, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x4, 0x4, (uint8_t *)va9c633e27c);
    free(va9c633e27c);
    uint8_t *v24020912b4 = (uint8_t *)malloc(0x4);
    fill(v24020912b4, 0x4, (OHCI_ISO_TD_v21cc14b312 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x8, 0x4, (uint8_t *)v24020912b4);
    free(v24020912b4);
    uint8_t *v1cf0589deb = (uint8_t *)malloc(0x4);
    fill(v1cf0589deb, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0xc, 0x4, (uint8_t *)v1cf0589deb);
    free(v1cf0589deb);
    stateful_free(buffer_v8cffbbb14c);
    buffer_v8cffbbb14c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8cffbbb14c = 0x%lx\n", buffer_v8cffbbb14c);
    uint8_t *v94a2e84d93 = (uint8_t *)malloc(0x100);
    fill(v94a2e84d93, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8cffbbb14c + 0x0, 0x100, (uint8_t *)v94a2e84d93);
    free(v94a2e84d93);
    uint8_t *v87f3aa2b2c = (uint8_t *)malloc(0x2);
    fill(v87f3aa2b2c, 0x2, (buffer_v8cffbbb14c | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x10, 0x2, (uint8_t *)v87f3aa2b2c);
    free(v87f3aa2b2c);
    stateful_free(buffer_ved28508dbd);
    buffer_ved28508dbd = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ved28508dbd = 0x%lx\n", buffer_ved28508dbd);
    uint8_t *vcefad840a5 = (uint8_t *)malloc(0x100);
    fill(vcefad840a5, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ved28508dbd + 0x0, 0x100, (uint8_t *)vcefad840a5);
    free(vcefad840a5);
    uint8_t *vea853efa2d = (uint8_t *)malloc(0x2);
    fill(vea853efa2d, 0x2, (buffer_ved28508dbd | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x12, 0x2, (uint8_t *)vea853efa2d);
    free(vea853efa2d);
    stateful_free(buffer_v6c148fc697);
    buffer_v6c148fc697 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v6c148fc697 = 0x%lx\n", buffer_v6c148fc697);
    uint8_t *vd5b2fd55a8 = (uint8_t *)malloc(0x100);
    fill(vd5b2fd55a8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v6c148fc697 + 0x0, 0x100, (uint8_t *)vd5b2fd55a8);
    free(vd5b2fd55a8);
    uint8_t *v842f9c6554 = (uint8_t *)malloc(0x2);
    fill(v842f9c6554, 0x2, (buffer_v6c148fc697 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x14, 0x2, (uint8_t *)v842f9c6554);
    free(v842f9c6554);
    stateful_free(buffer_v5ac4b6c7a3);
    buffer_v5ac4b6c7a3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5ac4b6c7a3 = 0x%lx\n", buffer_v5ac4b6c7a3);
    uint8_t *v7fdf22292c = (uint8_t *)malloc(0x100);
    fill(v7fdf22292c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5ac4b6c7a3 + 0x0, 0x100, (uint8_t *)v7fdf22292c);
    free(v7fdf22292c);
    uint8_t *v3b2d1fc9ed = (uint8_t *)malloc(0x2);
    fill(v3b2d1fc9ed, 0x2, (buffer_v5ac4b6c7a3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x16, 0x2, (uint8_t *)v3b2d1fc9ed);
    free(v3b2d1fc9ed);
    stateful_free(buffer_vecfb95b877);
    buffer_vecfb95b877 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vecfb95b877 = 0x%lx\n", buffer_vecfb95b877);
    uint8_t *vc069f48d5c = (uint8_t *)malloc(0x100);
    fill(vc069f48d5c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vecfb95b877 + 0x0, 0x100, (uint8_t *)vc069f48d5c);
    free(vc069f48d5c);
    uint8_t *v5286369e1e = (uint8_t *)malloc(0x2);
    fill(v5286369e1e, 0x2, (buffer_vecfb95b877 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x18, 0x2, (uint8_t *)v5286369e1e);
    free(v5286369e1e);
    stateful_free(buffer_v2284fd9689);
    buffer_v2284fd9689 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2284fd9689 = 0x%lx\n", buffer_v2284fd9689);
    uint8_t *v4586ce142e = (uint8_t *)malloc(0x100);
    fill(v4586ce142e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2284fd9689 + 0x0, 0x100, (uint8_t *)v4586ce142e);
    free(v4586ce142e);
    uint8_t *v1c32a1ded5 = (uint8_t *)malloc(0x2);
    fill(v1c32a1ded5, 0x2, (buffer_v2284fd9689 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x1a, 0x2, (uint8_t *)v1c32a1ded5);
    free(v1c32a1ded5);
    stateful_free(buffer_v70f8dd9952);
    buffer_v70f8dd9952 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v70f8dd9952 = 0x%lx\n", buffer_v70f8dd9952);
    uint8_t *va8b12ccabc = (uint8_t *)malloc(0x100);
    fill(va8b12ccabc, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v70f8dd9952 + 0x0, 0x100, (uint8_t *)va8b12ccabc);
    free(va8b12ccabc);
    uint8_t *v6b7a00d8de = (uint8_t *)malloc(0x2);
    fill(v6b7a00d8de, 0x2, (buffer_v70f8dd9952 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x1c, 0x2, (uint8_t *)v6b7a00d8de);
    free(v6b7a00d8de);
    stateful_free(buffer_vcbe88a3f2f);
    buffer_vcbe88a3f2f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcbe88a3f2f = 0x%lx\n", buffer_vcbe88a3f2f);
    uint8_t *vff9e16ef3a = (uint8_t *)malloc(0x100);
    fill(vff9e16ef3a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcbe88a3f2f + 0x0, 0x100, (uint8_t *)vff9e16ef3a);
    free(vff9e16ef3a);
    uint8_t *v7e8fed3dfd = (uint8_t *)malloc(0x2);
    fill(v7e8fed3dfd, 0x2, (buffer_vcbe88a3f2f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v21cc14b312 + 0x1e, 0x2, (uint8_t *)v7e8fed3dfd);
    free(v7e8fed3dfd);
    uint8_t *v5ba4e123ca = (uint8_t *)malloc(0x4);
    fill(v5ba4e123ca, 0x4, (OHCI_ISO_TD_v21cc14b312 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc13e66af3c + 0x8, 0x4, (uint8_t *)v5ba4e123ca);
    free(v5ba4e123ca);
    goto v5f59aa2c4a_out;
v5f59aa2c4a_out:;
    uint8_t *ve84b60ec52 = (uint8_t *)malloc(0x4);
    fill(ve84b60ec52, 0x4, OHCI_ED_vc13e66af3c, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc13e66af3c + 0xc, 0x4, (uint8_t *)ve84b60ec52);
    free(ve84b60ec52);
    uint8_t *vacdb9ccc10 = (uint8_t *)malloc(0x4);
    fill(vacdb9ccc10, 0x4, OHCI_ED_vc13e66af3c, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x2c, 0x4, (uint8_t *)vacdb9ccc10);
    free(vacdb9ccc10);
    goto v8222134550_out;
v8222134550_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vb02de52c9b_0; break;
    }
vb02de52c9b_0:;
    stateful_free(OHCI_ED_vb3dd77e1cb);
    OHCI_ED_vb3dd77e1cb = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vb3dd77e1cb = 0x%lx\n", OHCI_ED_vb3dd77e1cb);
    uint8_t *vc9aadaa6e4 = (uint8_t *)malloc(0x4);
    fill(vc9aadaa6e4, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb3dd77e1cb + 0x0, 0x4, (uint8_t *)vc9aadaa6e4);
    free(vc9aadaa6e4);
    uint8_t *v7dbcc5f769 = (uint8_t *)malloc(0x4);
    fill(v7dbcc5f769, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb3dd77e1cb + 0x4, 0x4, (uint8_t *)v7dbcc5f769);
    free(v7dbcc5f769);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v66163e5bed_0; break;
        case 1: goto v66163e5bed_1; break;
    }
v66163e5bed_0:;
    stateful_free(OHCI_TD_v6bf4d047c4);
    OHCI_TD_v6bf4d047c4 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v6bf4d047c4 = 0x%lx\n", OHCI_TD_v6bf4d047c4);
    uint8_t *vc176eadbe5 = (uint8_t *)malloc(0x4);
    fill(vc176eadbe5, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v6bf4d047c4 + 0x0, 0x4, (uint8_t *)vc176eadbe5);
    free(vc176eadbe5);
    uint8_t *vb25cc9a3ed = (uint8_t *)malloc(0x4);
    fill(vb25cc9a3ed, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v6bf4d047c4 + 0x4, 0x4, (uint8_t *)vb25cc9a3ed);
    free(vb25cc9a3ed);
    uint8_t *v6735f3564c = (uint8_t *)malloc(0x4);
    fill(v6735f3564c, 0x4, (OHCI_TD_v6bf4d047c4 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v6bf4d047c4 + 0x8, 0x4, (uint8_t *)v6735f3564c);
    free(v6735f3564c);
    uint8_t *v2dcbb10ef7 = (uint8_t *)malloc(0x4);
    fill(v2dcbb10ef7, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v6bf4d047c4 + 0xc, 0x4, (uint8_t *)v2dcbb10ef7);
    free(v2dcbb10ef7);
    uint8_t *v31660e65ec = (uint8_t *)malloc(0x4);
    fill(v31660e65ec, 0x4, (OHCI_TD_v6bf4d047c4 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb3dd77e1cb + 0x8, 0x4, (uint8_t *)v31660e65ec);
    free(v31660e65ec);
    goto v66163e5bed_out;
v66163e5bed_1:;
    stateful_free(OHCI_ISO_TD_v247f4d9785);
    OHCI_ISO_TD_v247f4d9785 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v247f4d9785 = 0x%lx\n", OHCI_ISO_TD_v247f4d9785);
    uint8_t *va5660feb35 = (uint8_t *)malloc(0x4);
    fill(va5660feb35, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x0, 0x4, (uint8_t *)va5660feb35);
    free(va5660feb35);
    uint8_t *v199121865d = (uint8_t *)malloc(0x4);
    fill(v199121865d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x4, 0x4, (uint8_t *)v199121865d);
    free(v199121865d);
    uint8_t *v7d00aff360 = (uint8_t *)malloc(0x4);
    fill(v7d00aff360, 0x4, (OHCI_ISO_TD_v247f4d9785 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x8, 0x4, (uint8_t *)v7d00aff360);
    free(v7d00aff360);
    uint8_t *v186f4ef149 = (uint8_t *)malloc(0x4);
    fill(v186f4ef149, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0xc, 0x4, (uint8_t *)v186f4ef149);
    free(v186f4ef149);
    stateful_free(buffer_v4b7350d134);
    buffer_v4b7350d134 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4b7350d134 = 0x%lx\n", buffer_v4b7350d134);
    uint8_t *vad26ebe4ca = (uint8_t *)malloc(0x100);
    fill(vad26ebe4ca, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4b7350d134 + 0x0, 0x100, (uint8_t *)vad26ebe4ca);
    free(vad26ebe4ca);
    uint8_t *vc12c9c8d19 = (uint8_t *)malloc(0x2);
    fill(vc12c9c8d19, 0x2, (buffer_v4b7350d134 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x10, 0x2, (uint8_t *)vc12c9c8d19);
    free(vc12c9c8d19);
    stateful_free(buffer_vb2f11ef9d4);
    buffer_vb2f11ef9d4 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb2f11ef9d4 = 0x%lx\n", buffer_vb2f11ef9d4);
    uint8_t *v57ed0cd130 = (uint8_t *)malloc(0x100);
    fill(v57ed0cd130, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb2f11ef9d4 + 0x0, 0x100, (uint8_t *)v57ed0cd130);
    free(v57ed0cd130);
    uint8_t *ved1a474854 = (uint8_t *)malloc(0x2);
    fill(ved1a474854, 0x2, (buffer_vb2f11ef9d4 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x12, 0x2, (uint8_t *)ved1a474854);
    free(ved1a474854);
    stateful_free(buffer_v764657ca9e);
    buffer_v764657ca9e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v764657ca9e = 0x%lx\n", buffer_v764657ca9e);
    uint8_t *v4c041d5a7e = (uint8_t *)malloc(0x100);
    fill(v4c041d5a7e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v764657ca9e + 0x0, 0x100, (uint8_t *)v4c041d5a7e);
    free(v4c041d5a7e);
    uint8_t *v584957f20f = (uint8_t *)malloc(0x2);
    fill(v584957f20f, 0x2, (buffer_v764657ca9e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x14, 0x2, (uint8_t *)v584957f20f);
    free(v584957f20f);
    stateful_free(buffer_v4c6e6fbb37);
    buffer_v4c6e6fbb37 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4c6e6fbb37 = 0x%lx\n", buffer_v4c6e6fbb37);
    uint8_t *vdb3d663628 = (uint8_t *)malloc(0x100);
    fill(vdb3d663628, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4c6e6fbb37 + 0x0, 0x100, (uint8_t *)vdb3d663628);
    free(vdb3d663628);
    uint8_t *vb17b08aede = (uint8_t *)malloc(0x2);
    fill(vb17b08aede, 0x2, (buffer_v4c6e6fbb37 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x16, 0x2, (uint8_t *)vb17b08aede);
    free(vb17b08aede);
    stateful_free(buffer_v78aff58ec0);
    buffer_v78aff58ec0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v78aff58ec0 = 0x%lx\n", buffer_v78aff58ec0);
    uint8_t *v775d63a488 = (uint8_t *)malloc(0x100);
    fill(v775d63a488, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v78aff58ec0 + 0x0, 0x100, (uint8_t *)v775d63a488);
    free(v775d63a488);
    uint8_t *v4cf2d732d1 = (uint8_t *)malloc(0x2);
    fill(v4cf2d732d1, 0x2, (buffer_v78aff58ec0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x18, 0x2, (uint8_t *)v4cf2d732d1);
    free(v4cf2d732d1);
    stateful_free(buffer_v67c21355c3);
    buffer_v67c21355c3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v67c21355c3 = 0x%lx\n", buffer_v67c21355c3);
    uint8_t *vcceeba877d = (uint8_t *)malloc(0x100);
    fill(vcceeba877d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v67c21355c3 + 0x0, 0x100, (uint8_t *)vcceeba877d);
    free(vcceeba877d);
    uint8_t *v9be82d6c01 = (uint8_t *)malloc(0x2);
    fill(v9be82d6c01, 0x2, (buffer_v67c21355c3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x1a, 0x2, (uint8_t *)v9be82d6c01);
    free(v9be82d6c01);
    stateful_free(buffer_vfbe86a8ea1);
    buffer_vfbe86a8ea1 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfbe86a8ea1 = 0x%lx\n", buffer_vfbe86a8ea1);
    uint8_t *v6d341c5ceb = (uint8_t *)malloc(0x100);
    fill(v6d341c5ceb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfbe86a8ea1 + 0x0, 0x100, (uint8_t *)v6d341c5ceb);
    free(v6d341c5ceb);
    uint8_t *v140895d028 = (uint8_t *)malloc(0x2);
    fill(v140895d028, 0x2, (buffer_vfbe86a8ea1 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x1c, 0x2, (uint8_t *)v140895d028);
    free(v140895d028);
    stateful_free(buffer_va614be3ab2);
    buffer_va614be3ab2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va614be3ab2 = 0x%lx\n", buffer_va614be3ab2);
    uint8_t *v56eebfe7f5 = (uint8_t *)malloc(0x100);
    fill(v56eebfe7f5, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va614be3ab2 + 0x0, 0x100, (uint8_t *)v56eebfe7f5);
    free(v56eebfe7f5);
    uint8_t *vd03e6d922b = (uint8_t *)malloc(0x2);
    fill(vd03e6d922b, 0x2, (buffer_va614be3ab2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v247f4d9785 + 0x1e, 0x2, (uint8_t *)vd03e6d922b);
    free(vd03e6d922b);
    uint8_t *v3e078fa717 = (uint8_t *)malloc(0x4);
    fill(v3e078fa717, 0x4, (OHCI_ISO_TD_v247f4d9785 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb3dd77e1cb + 0x8, 0x4, (uint8_t *)v3e078fa717);
    free(v3e078fa717);
    goto v66163e5bed_out;
v66163e5bed_out:;
    uint8_t *v721e4596df = (uint8_t *)malloc(0x4);
    fill(v721e4596df, 0x4, OHCI_ED_vb3dd77e1cb, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb3dd77e1cb + 0xc, 0x4, (uint8_t *)v721e4596df);
    free(v721e4596df);
    uint8_t *vd8821713e9 = (uint8_t *)malloc(0x4);
    fill(vd8821713e9, 0x4, OHCI_ED_vb3dd77e1cb, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x30, 0x4, (uint8_t *)vd8821713e9);
    free(vd8821713e9);
    goto vb02de52c9b_out;
vb02de52c9b_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v71d04b0f65_0; break;
    }
v71d04b0f65_0:;
    stateful_free(OHCI_ED_v40aaec7abf);
    OHCI_ED_v40aaec7abf = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v40aaec7abf = 0x%lx\n", OHCI_ED_v40aaec7abf);
    uint8_t *vd2e922b3e8 = (uint8_t *)malloc(0x4);
    fill(vd2e922b3e8, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v40aaec7abf + 0x0, 0x4, (uint8_t *)vd2e922b3e8);
    free(vd2e922b3e8);
    uint8_t *v6966437363 = (uint8_t *)malloc(0x4);
    fill(v6966437363, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v40aaec7abf + 0x4, 0x4, (uint8_t *)v6966437363);
    free(v6966437363);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto ve8a56f31ac_0; break;
        case 1: goto ve8a56f31ac_1; break;
    }
ve8a56f31ac_0:;
    stateful_free(OHCI_TD_v15d38ca998);
    OHCI_TD_v15d38ca998 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v15d38ca998 = 0x%lx\n", OHCI_TD_v15d38ca998);
    uint8_t *v7e5c99ac0f = (uint8_t *)malloc(0x4);
    fill(v7e5c99ac0f, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v15d38ca998 + 0x0, 0x4, (uint8_t *)v7e5c99ac0f);
    free(v7e5c99ac0f);
    uint8_t *va617fe4904 = (uint8_t *)malloc(0x4);
    fill(va617fe4904, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v15d38ca998 + 0x4, 0x4, (uint8_t *)va617fe4904);
    free(va617fe4904);
    uint8_t *v3027bdbd98 = (uint8_t *)malloc(0x4);
    fill(v3027bdbd98, 0x4, (OHCI_TD_v15d38ca998 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v15d38ca998 + 0x8, 0x4, (uint8_t *)v3027bdbd98);
    free(v3027bdbd98);
    uint8_t *v855f27d433 = (uint8_t *)malloc(0x4);
    fill(v855f27d433, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v15d38ca998 + 0xc, 0x4, (uint8_t *)v855f27d433);
    free(v855f27d433);
    uint8_t *v166fca8f91 = (uint8_t *)malloc(0x4);
    fill(v166fca8f91, 0x4, (OHCI_TD_v15d38ca998 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v40aaec7abf + 0x8, 0x4, (uint8_t *)v166fca8f91);
    free(v166fca8f91);
    goto ve8a56f31ac_out;
ve8a56f31ac_1:;
    stateful_free(OHCI_ISO_TD_vcad0027312);
    OHCI_ISO_TD_vcad0027312 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vcad0027312 = 0x%lx\n", OHCI_ISO_TD_vcad0027312);
    uint8_t *v92ecd51d03 = (uint8_t *)malloc(0x4);
    fill(v92ecd51d03, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x0, 0x4, (uint8_t *)v92ecd51d03);
    free(v92ecd51d03);
    uint8_t *v122594275a = (uint8_t *)malloc(0x4);
    fill(v122594275a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x4, 0x4, (uint8_t *)v122594275a);
    free(v122594275a);
    uint8_t *v5a23c2f226 = (uint8_t *)malloc(0x4);
    fill(v5a23c2f226, 0x4, (OHCI_ISO_TD_vcad0027312 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x8, 0x4, (uint8_t *)v5a23c2f226);
    free(v5a23c2f226);
    uint8_t *v6685b54ed1 = (uint8_t *)malloc(0x4);
    fill(v6685b54ed1, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0xc, 0x4, (uint8_t *)v6685b54ed1);
    free(v6685b54ed1);
    stateful_free(buffer_v889c8ae24e);
    buffer_v889c8ae24e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v889c8ae24e = 0x%lx\n", buffer_v889c8ae24e);
    uint8_t *vd00fb0684b = (uint8_t *)malloc(0x100);
    fill(vd00fb0684b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v889c8ae24e + 0x0, 0x100, (uint8_t *)vd00fb0684b);
    free(vd00fb0684b);
    uint8_t *v89b58d2974 = (uint8_t *)malloc(0x2);
    fill(v89b58d2974, 0x2, (buffer_v889c8ae24e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x10, 0x2, (uint8_t *)v89b58d2974);
    free(v89b58d2974);
    stateful_free(buffer_v29deb984c3);
    buffer_v29deb984c3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v29deb984c3 = 0x%lx\n", buffer_v29deb984c3);
    uint8_t *v209ae9d117 = (uint8_t *)malloc(0x100);
    fill(v209ae9d117, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v29deb984c3 + 0x0, 0x100, (uint8_t *)v209ae9d117);
    free(v209ae9d117);
    uint8_t *v99063e5b62 = (uint8_t *)malloc(0x2);
    fill(v99063e5b62, 0x2, (buffer_v29deb984c3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x12, 0x2, (uint8_t *)v99063e5b62);
    free(v99063e5b62);
    stateful_free(buffer_vdc66a27b6a);
    buffer_vdc66a27b6a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vdc66a27b6a = 0x%lx\n", buffer_vdc66a27b6a);
    uint8_t *va77e6a1dda = (uint8_t *)malloc(0x100);
    fill(va77e6a1dda, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vdc66a27b6a + 0x0, 0x100, (uint8_t *)va77e6a1dda);
    free(va77e6a1dda);
    uint8_t *vd0fce12b67 = (uint8_t *)malloc(0x2);
    fill(vd0fce12b67, 0x2, (buffer_vdc66a27b6a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x14, 0x2, (uint8_t *)vd0fce12b67);
    free(vd0fce12b67);
    stateful_free(buffer_v8513d91e48);
    buffer_v8513d91e48 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8513d91e48 = 0x%lx\n", buffer_v8513d91e48);
    uint8_t *vaba1a4b506 = (uint8_t *)malloc(0x100);
    fill(vaba1a4b506, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8513d91e48 + 0x0, 0x100, (uint8_t *)vaba1a4b506);
    free(vaba1a4b506);
    uint8_t *vad7b787f3e = (uint8_t *)malloc(0x2);
    fill(vad7b787f3e, 0x2, (buffer_v8513d91e48 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x16, 0x2, (uint8_t *)vad7b787f3e);
    free(vad7b787f3e);
    stateful_free(buffer_v88083ebc35);
    buffer_v88083ebc35 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v88083ebc35 = 0x%lx\n", buffer_v88083ebc35);
    uint8_t *vd4055fa2d6 = (uint8_t *)malloc(0x100);
    fill(vd4055fa2d6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v88083ebc35 + 0x0, 0x100, (uint8_t *)vd4055fa2d6);
    free(vd4055fa2d6);
    uint8_t *v916263b72f = (uint8_t *)malloc(0x2);
    fill(v916263b72f, 0x2, (buffer_v88083ebc35 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x18, 0x2, (uint8_t *)v916263b72f);
    free(v916263b72f);
    stateful_free(buffer_v4ad12b4c47);
    buffer_v4ad12b4c47 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4ad12b4c47 = 0x%lx\n", buffer_v4ad12b4c47);
    uint8_t *vcb5740704e = (uint8_t *)malloc(0x100);
    fill(vcb5740704e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4ad12b4c47 + 0x0, 0x100, (uint8_t *)vcb5740704e);
    free(vcb5740704e);
    uint8_t *v4694e1286a = (uint8_t *)malloc(0x2);
    fill(v4694e1286a, 0x2, (buffer_v4ad12b4c47 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x1a, 0x2, (uint8_t *)v4694e1286a);
    free(v4694e1286a);
    stateful_free(buffer_v2835bcdb23);
    buffer_v2835bcdb23 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2835bcdb23 = 0x%lx\n", buffer_v2835bcdb23);
    uint8_t *vcad928d429 = (uint8_t *)malloc(0x100);
    fill(vcad928d429, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2835bcdb23 + 0x0, 0x100, (uint8_t *)vcad928d429);
    free(vcad928d429);
    uint8_t *v38d34dd6c9 = (uint8_t *)malloc(0x2);
    fill(v38d34dd6c9, 0x2, (buffer_v2835bcdb23 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x1c, 0x2, (uint8_t *)v38d34dd6c9);
    free(v38d34dd6c9);
    stateful_free(buffer_v1eda4209b2);
    buffer_v1eda4209b2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1eda4209b2 = 0x%lx\n", buffer_v1eda4209b2);
    uint8_t *va1bfefca8f = (uint8_t *)malloc(0x100);
    fill(va1bfefca8f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1eda4209b2 + 0x0, 0x100, (uint8_t *)va1bfefca8f);
    free(va1bfefca8f);
    uint8_t *v3a4bcaab86 = (uint8_t *)malloc(0x2);
    fill(v3a4bcaab86, 0x2, (buffer_v1eda4209b2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vcad0027312 + 0x1e, 0x2, (uint8_t *)v3a4bcaab86);
    free(v3a4bcaab86);
    uint8_t *v664aaa3983 = (uint8_t *)malloc(0x4);
    fill(v664aaa3983, 0x4, (OHCI_ISO_TD_vcad0027312 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v40aaec7abf + 0x8, 0x4, (uint8_t *)v664aaa3983);
    free(v664aaa3983);
    goto ve8a56f31ac_out;
ve8a56f31ac_out:;
    uint8_t *v73665614da = (uint8_t *)malloc(0x4);
    fill(v73665614da, 0x4, OHCI_ED_v40aaec7abf, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v40aaec7abf + 0xc, 0x4, (uint8_t *)v73665614da);
    free(v73665614da);
    uint8_t *v8be6aeb42e = (uint8_t *)malloc(0x4);
    fill(v8be6aeb42e, 0x4, OHCI_ED_v40aaec7abf, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x34, 0x4, (uint8_t *)v8be6aeb42e);
    free(v8be6aeb42e);
    goto v71d04b0f65_out;
v71d04b0f65_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v974fdedc66_0; break;
    }
v974fdedc66_0:;
    stateful_free(OHCI_ED_vbe0a5a5679);
    OHCI_ED_vbe0a5a5679 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vbe0a5a5679 = 0x%lx\n", OHCI_ED_vbe0a5a5679);
    uint8_t *v5bf2b6a11b = (uint8_t *)malloc(0x4);
    fill(v5bf2b6a11b, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vbe0a5a5679 + 0x0, 0x4, (uint8_t *)v5bf2b6a11b);
    free(v5bf2b6a11b);
    uint8_t *veaaa5a3e31 = (uint8_t *)malloc(0x4);
    fill(veaaa5a3e31, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vbe0a5a5679 + 0x4, 0x4, (uint8_t *)veaaa5a3e31);
    free(veaaa5a3e31);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v7a0a02ba37_0; break;
        case 1: goto v7a0a02ba37_1; break;
    }
v7a0a02ba37_0:;
    stateful_free(OHCI_TD_v8066b49bb1);
    OHCI_TD_v8066b49bb1 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v8066b49bb1 = 0x%lx\n", OHCI_TD_v8066b49bb1);
    uint8_t *vab46afee88 = (uint8_t *)malloc(0x4);
    fill(vab46afee88, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8066b49bb1 + 0x0, 0x4, (uint8_t *)vab46afee88);
    free(vab46afee88);
    uint8_t *vbc896faf4c = (uint8_t *)malloc(0x4);
    fill(vbc896faf4c, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8066b49bb1 + 0x4, 0x4, (uint8_t *)vbc896faf4c);
    free(vbc896faf4c);
    uint8_t *vf7dd3c21e6 = (uint8_t *)malloc(0x4);
    fill(vf7dd3c21e6, 0x4, (OHCI_TD_v8066b49bb1 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8066b49bb1 + 0x8, 0x4, (uint8_t *)vf7dd3c21e6);
    free(vf7dd3c21e6);
    uint8_t *vf9b43af780 = (uint8_t *)malloc(0x4);
    fill(vf9b43af780, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8066b49bb1 + 0xc, 0x4, (uint8_t *)vf9b43af780);
    free(vf9b43af780);
    uint8_t *v8d87b7e8ac = (uint8_t *)malloc(0x4);
    fill(v8d87b7e8ac, 0x4, (OHCI_TD_v8066b49bb1 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vbe0a5a5679 + 0x8, 0x4, (uint8_t *)v8d87b7e8ac);
    free(v8d87b7e8ac);
    goto v7a0a02ba37_out;
v7a0a02ba37_1:;
    stateful_free(OHCI_ISO_TD_v71a8c9c60f);
    OHCI_ISO_TD_v71a8c9c60f = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v71a8c9c60f = 0x%lx\n", OHCI_ISO_TD_v71a8c9c60f);
    uint8_t *v5bb955f931 = (uint8_t *)malloc(0x4);
    fill(v5bb955f931, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x0, 0x4, (uint8_t *)v5bb955f931);
    free(v5bb955f931);
    uint8_t *vee51bca044 = (uint8_t *)malloc(0x4);
    fill(vee51bca044, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x4, 0x4, (uint8_t *)vee51bca044);
    free(vee51bca044);
    uint8_t *v75fe000cc4 = (uint8_t *)malloc(0x4);
    fill(v75fe000cc4, 0x4, (OHCI_ISO_TD_v71a8c9c60f & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x8, 0x4, (uint8_t *)v75fe000cc4);
    free(v75fe000cc4);
    uint8_t *v7b6c0adbc4 = (uint8_t *)malloc(0x4);
    fill(v7b6c0adbc4, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0xc, 0x4, (uint8_t *)v7b6c0adbc4);
    free(v7b6c0adbc4);
    stateful_free(buffer_vbec60ffe24);
    buffer_vbec60ffe24 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbec60ffe24 = 0x%lx\n", buffer_vbec60ffe24);
    uint8_t *v2415f2a37b = (uint8_t *)malloc(0x100);
    fill(v2415f2a37b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbec60ffe24 + 0x0, 0x100, (uint8_t *)v2415f2a37b);
    free(v2415f2a37b);
    uint8_t *v10fb5581cc = (uint8_t *)malloc(0x2);
    fill(v10fb5581cc, 0x2, (buffer_vbec60ffe24 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x10, 0x2, (uint8_t *)v10fb5581cc);
    free(v10fb5581cc);
    stateful_free(buffer_v68a3c38373);
    buffer_v68a3c38373 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v68a3c38373 = 0x%lx\n", buffer_v68a3c38373);
    uint8_t *v3b34252964 = (uint8_t *)malloc(0x100);
    fill(v3b34252964, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v68a3c38373 + 0x0, 0x100, (uint8_t *)v3b34252964);
    free(v3b34252964);
    uint8_t *v1b742111a0 = (uint8_t *)malloc(0x2);
    fill(v1b742111a0, 0x2, (buffer_v68a3c38373 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x12, 0x2, (uint8_t *)v1b742111a0);
    free(v1b742111a0);
    stateful_free(buffer_vfa999f9b86);
    buffer_vfa999f9b86 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfa999f9b86 = 0x%lx\n", buffer_vfa999f9b86);
    uint8_t *v90e79b9407 = (uint8_t *)malloc(0x100);
    fill(v90e79b9407, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfa999f9b86 + 0x0, 0x100, (uint8_t *)v90e79b9407);
    free(v90e79b9407);
    uint8_t *v8615ad7369 = (uint8_t *)malloc(0x2);
    fill(v8615ad7369, 0x2, (buffer_vfa999f9b86 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x14, 0x2, (uint8_t *)v8615ad7369);
    free(v8615ad7369);
    stateful_free(buffer_vddfae808af);
    buffer_vddfae808af = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vddfae808af = 0x%lx\n", buffer_vddfae808af);
    uint8_t *v82c15d9f7c = (uint8_t *)malloc(0x100);
    fill(v82c15d9f7c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vddfae808af + 0x0, 0x100, (uint8_t *)v82c15d9f7c);
    free(v82c15d9f7c);
    uint8_t *vc703e71a6e = (uint8_t *)malloc(0x2);
    fill(vc703e71a6e, 0x2, (buffer_vddfae808af | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x16, 0x2, (uint8_t *)vc703e71a6e);
    free(vc703e71a6e);
    stateful_free(buffer_vab4414aeec);
    buffer_vab4414aeec = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vab4414aeec = 0x%lx\n", buffer_vab4414aeec);
    uint8_t *v265a919055 = (uint8_t *)malloc(0x100);
    fill(v265a919055, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vab4414aeec + 0x0, 0x100, (uint8_t *)v265a919055);
    free(v265a919055);
    uint8_t *v3f74df9ae4 = (uint8_t *)malloc(0x2);
    fill(v3f74df9ae4, 0x2, (buffer_vab4414aeec | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x18, 0x2, (uint8_t *)v3f74df9ae4);
    free(v3f74df9ae4);
    stateful_free(buffer_v5c7cbc6201);
    buffer_v5c7cbc6201 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5c7cbc6201 = 0x%lx\n", buffer_v5c7cbc6201);
    uint8_t *v9dc257bde1 = (uint8_t *)malloc(0x100);
    fill(v9dc257bde1, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5c7cbc6201 + 0x0, 0x100, (uint8_t *)v9dc257bde1);
    free(v9dc257bde1);
    uint8_t *v676b94a1ec = (uint8_t *)malloc(0x2);
    fill(v676b94a1ec, 0x2, (buffer_v5c7cbc6201 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x1a, 0x2, (uint8_t *)v676b94a1ec);
    free(v676b94a1ec);
    stateful_free(buffer_v9ef1c8461d);
    buffer_v9ef1c8461d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9ef1c8461d = 0x%lx\n", buffer_v9ef1c8461d);
    uint8_t *v571cf04de7 = (uint8_t *)malloc(0x100);
    fill(v571cf04de7, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9ef1c8461d + 0x0, 0x100, (uint8_t *)v571cf04de7);
    free(v571cf04de7);
    uint8_t *ve6ff73b5b3 = (uint8_t *)malloc(0x2);
    fill(ve6ff73b5b3, 0x2, (buffer_v9ef1c8461d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x1c, 0x2, (uint8_t *)ve6ff73b5b3);
    free(ve6ff73b5b3);
    stateful_free(buffer_vb31e9be8a3);
    buffer_vb31e9be8a3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb31e9be8a3 = 0x%lx\n", buffer_vb31e9be8a3);
    uint8_t *v20979829cc = (uint8_t *)malloc(0x100);
    fill(v20979829cc, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb31e9be8a3 + 0x0, 0x100, (uint8_t *)v20979829cc);
    free(v20979829cc);
    uint8_t *v18cb4e11ab = (uint8_t *)malloc(0x2);
    fill(v18cb4e11ab, 0x2, (buffer_vb31e9be8a3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v71a8c9c60f + 0x1e, 0x2, (uint8_t *)v18cb4e11ab);
    free(v18cb4e11ab);
    uint8_t *vb5743132ef = (uint8_t *)malloc(0x4);
    fill(vb5743132ef, 0x4, (OHCI_ISO_TD_v71a8c9c60f & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vbe0a5a5679 + 0x8, 0x4, (uint8_t *)vb5743132ef);
    free(vb5743132ef);
    goto v7a0a02ba37_out;
v7a0a02ba37_out:;
    uint8_t *vbb8bb9ae57 = (uint8_t *)malloc(0x4);
    fill(vbb8bb9ae57, 0x4, OHCI_ED_vbe0a5a5679, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vbe0a5a5679 + 0xc, 0x4, (uint8_t *)vbb8bb9ae57);
    free(vbb8bb9ae57);
    uint8_t *vbb10d4065a = (uint8_t *)malloc(0x4);
    fill(vbb10d4065a, 0x4, OHCI_ED_vbe0a5a5679, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x38, 0x4, (uint8_t *)vbb10d4065a);
    free(vbb10d4065a);
    goto v974fdedc66_out;
v974fdedc66_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto ve695f8baba_0; break;
    }
ve695f8baba_0:;
    stateful_free(OHCI_ED_v30f2c48549);
    OHCI_ED_v30f2c48549 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v30f2c48549 = 0x%lx\n", OHCI_ED_v30f2c48549);
    uint8_t *v24b441266f = (uint8_t *)malloc(0x4);
    fill(v24b441266f, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v30f2c48549 + 0x0, 0x4, (uint8_t *)v24b441266f);
    free(v24b441266f);
    uint8_t *v20025f82d5 = (uint8_t *)malloc(0x4);
    fill(v20025f82d5, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v30f2c48549 + 0x4, 0x4, (uint8_t *)v20025f82d5);
    free(v20025f82d5);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v62565a9554_0; break;
        case 1: goto v62565a9554_1; break;
    }
v62565a9554_0:;
    stateful_free(OHCI_TD_vaffe2554e5);
    OHCI_TD_vaffe2554e5 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vaffe2554e5 = 0x%lx\n", OHCI_TD_vaffe2554e5);
    uint8_t *v6ed4e645aa = (uint8_t *)malloc(0x4);
    fill(v6ed4e645aa, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaffe2554e5 + 0x0, 0x4, (uint8_t *)v6ed4e645aa);
    free(v6ed4e645aa);
    uint8_t *v4962073ba0 = (uint8_t *)malloc(0x4);
    fill(v4962073ba0, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaffe2554e5 + 0x4, 0x4, (uint8_t *)v4962073ba0);
    free(v4962073ba0);
    uint8_t *v75f98f4110 = (uint8_t *)malloc(0x4);
    fill(v75f98f4110, 0x4, (OHCI_TD_vaffe2554e5 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaffe2554e5 + 0x8, 0x4, (uint8_t *)v75f98f4110);
    free(v75f98f4110);
    uint8_t *vf106892ba1 = (uint8_t *)malloc(0x4);
    fill(vf106892ba1, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaffe2554e5 + 0xc, 0x4, (uint8_t *)vf106892ba1);
    free(vf106892ba1);
    uint8_t *v73f19747e9 = (uint8_t *)malloc(0x4);
    fill(v73f19747e9, 0x4, (OHCI_TD_vaffe2554e5 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v30f2c48549 + 0x8, 0x4, (uint8_t *)v73f19747e9);
    free(v73f19747e9);
    goto v62565a9554_out;
v62565a9554_1:;
    stateful_free(OHCI_ISO_TD_v2114c2d650);
    OHCI_ISO_TD_v2114c2d650 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v2114c2d650 = 0x%lx\n", OHCI_ISO_TD_v2114c2d650);
    uint8_t *v39e65a53dd = (uint8_t *)malloc(0x4);
    fill(v39e65a53dd, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x0, 0x4, (uint8_t *)v39e65a53dd);
    free(v39e65a53dd);
    uint8_t *v89506262a7 = (uint8_t *)malloc(0x4);
    fill(v89506262a7, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x4, 0x4, (uint8_t *)v89506262a7);
    free(v89506262a7);
    uint8_t *v3e6836da0c = (uint8_t *)malloc(0x4);
    fill(v3e6836da0c, 0x4, (OHCI_ISO_TD_v2114c2d650 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x8, 0x4, (uint8_t *)v3e6836da0c);
    free(v3e6836da0c);
    uint8_t *v192489473b = (uint8_t *)malloc(0x4);
    fill(v192489473b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0xc, 0x4, (uint8_t *)v192489473b);
    free(v192489473b);
    stateful_free(buffer_v2fd3b9f2e9);
    buffer_v2fd3b9f2e9 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2fd3b9f2e9 = 0x%lx\n", buffer_v2fd3b9f2e9);
    uint8_t *v732d6cfea6 = (uint8_t *)malloc(0x100);
    fill(v732d6cfea6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2fd3b9f2e9 + 0x0, 0x100, (uint8_t *)v732d6cfea6);
    free(v732d6cfea6);
    uint8_t *v8dcdfa954c = (uint8_t *)malloc(0x2);
    fill(v8dcdfa954c, 0x2, (buffer_v2fd3b9f2e9 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x10, 0x2, (uint8_t *)v8dcdfa954c);
    free(v8dcdfa954c);
    stateful_free(buffer_vcbab5b5138);
    buffer_vcbab5b5138 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcbab5b5138 = 0x%lx\n", buffer_vcbab5b5138);
    uint8_t *vecf75dbc3f = (uint8_t *)malloc(0x100);
    fill(vecf75dbc3f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcbab5b5138 + 0x0, 0x100, (uint8_t *)vecf75dbc3f);
    free(vecf75dbc3f);
    uint8_t *vbce9ff074e = (uint8_t *)malloc(0x2);
    fill(vbce9ff074e, 0x2, (buffer_vcbab5b5138 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x12, 0x2, (uint8_t *)vbce9ff074e);
    free(vbce9ff074e);
    stateful_free(buffer_vf0a61c5e70);
    buffer_vf0a61c5e70 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf0a61c5e70 = 0x%lx\n", buffer_vf0a61c5e70);
    uint8_t *v73c43ceb44 = (uint8_t *)malloc(0x100);
    fill(v73c43ceb44, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf0a61c5e70 + 0x0, 0x100, (uint8_t *)v73c43ceb44);
    free(v73c43ceb44);
    uint8_t *v4fa09d36d0 = (uint8_t *)malloc(0x2);
    fill(v4fa09d36d0, 0x2, (buffer_vf0a61c5e70 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x14, 0x2, (uint8_t *)v4fa09d36d0);
    free(v4fa09d36d0);
    stateful_free(buffer_vb5c25d4296);
    buffer_vb5c25d4296 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb5c25d4296 = 0x%lx\n", buffer_vb5c25d4296);
    uint8_t *vb7068b26fe = (uint8_t *)malloc(0x100);
    fill(vb7068b26fe, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb5c25d4296 + 0x0, 0x100, (uint8_t *)vb7068b26fe);
    free(vb7068b26fe);
    uint8_t *v96bead62d5 = (uint8_t *)malloc(0x2);
    fill(v96bead62d5, 0x2, (buffer_vb5c25d4296 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x16, 0x2, (uint8_t *)v96bead62d5);
    free(v96bead62d5);
    stateful_free(buffer_v636abf8ce7);
    buffer_v636abf8ce7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v636abf8ce7 = 0x%lx\n", buffer_v636abf8ce7);
    uint8_t *vee2f75b1ef = (uint8_t *)malloc(0x100);
    fill(vee2f75b1ef, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v636abf8ce7 + 0x0, 0x100, (uint8_t *)vee2f75b1ef);
    free(vee2f75b1ef);
    uint8_t *ve8294364aa = (uint8_t *)malloc(0x2);
    fill(ve8294364aa, 0x2, (buffer_v636abf8ce7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x18, 0x2, (uint8_t *)ve8294364aa);
    free(ve8294364aa);
    stateful_free(buffer_va217cf253b);
    buffer_va217cf253b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va217cf253b = 0x%lx\n", buffer_va217cf253b);
    uint8_t *v439c6004eb = (uint8_t *)malloc(0x100);
    fill(v439c6004eb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va217cf253b + 0x0, 0x100, (uint8_t *)v439c6004eb);
    free(v439c6004eb);
    uint8_t *vbe8809a6f1 = (uint8_t *)malloc(0x2);
    fill(vbe8809a6f1, 0x2, (buffer_va217cf253b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x1a, 0x2, (uint8_t *)vbe8809a6f1);
    free(vbe8809a6f1);
    stateful_free(buffer_v2fcf3b87de);
    buffer_v2fcf3b87de = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2fcf3b87de = 0x%lx\n", buffer_v2fcf3b87de);
    uint8_t *v1b52cc064b = (uint8_t *)malloc(0x100);
    fill(v1b52cc064b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2fcf3b87de + 0x0, 0x100, (uint8_t *)v1b52cc064b);
    free(v1b52cc064b);
    uint8_t *v1756e0d4b1 = (uint8_t *)malloc(0x2);
    fill(v1756e0d4b1, 0x2, (buffer_v2fcf3b87de | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x1c, 0x2, (uint8_t *)v1756e0d4b1);
    free(v1756e0d4b1);
    stateful_free(buffer_v2c623ac3ad);
    buffer_v2c623ac3ad = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2c623ac3ad = 0x%lx\n", buffer_v2c623ac3ad);
    uint8_t *v5942adbad0 = (uint8_t *)malloc(0x100);
    fill(v5942adbad0, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2c623ac3ad + 0x0, 0x100, (uint8_t *)v5942adbad0);
    free(v5942adbad0);
    uint8_t *vb5a9907438 = (uint8_t *)malloc(0x2);
    fill(vb5a9907438, 0x2, (buffer_v2c623ac3ad | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v2114c2d650 + 0x1e, 0x2, (uint8_t *)vb5a9907438);
    free(vb5a9907438);
    uint8_t *vf7d9dde98d = (uint8_t *)malloc(0x4);
    fill(vf7d9dde98d, 0x4, (OHCI_ISO_TD_v2114c2d650 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v30f2c48549 + 0x8, 0x4, (uint8_t *)vf7d9dde98d);
    free(vf7d9dde98d);
    goto v62565a9554_out;
v62565a9554_out:;
    uint8_t *v551a9eb6dc = (uint8_t *)malloc(0x4);
    fill(v551a9eb6dc, 0x4, OHCI_ED_v30f2c48549, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v30f2c48549 + 0xc, 0x4, (uint8_t *)v551a9eb6dc);
    free(v551a9eb6dc);
    uint8_t *ve2238f5548 = (uint8_t *)malloc(0x4);
    fill(ve2238f5548, 0x4, OHCI_ED_v30f2c48549, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x3c, 0x4, (uint8_t *)ve2238f5548);
    free(ve2238f5548);
    goto ve695f8baba_out;
ve695f8baba_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vc061c99b83_0; break;
    }
vc061c99b83_0:;
    stateful_free(OHCI_ED_v6953a1155a);
    OHCI_ED_v6953a1155a = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v6953a1155a = 0x%lx\n", OHCI_ED_v6953a1155a);
    uint8_t *v6149ef270c = (uint8_t *)malloc(0x4);
    fill(v6149ef270c, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6953a1155a + 0x0, 0x4, (uint8_t *)v6149ef270c);
    free(v6149ef270c);
    uint8_t *v530d9dac09 = (uint8_t *)malloc(0x4);
    fill(v530d9dac09, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6953a1155a + 0x4, 0x4, (uint8_t *)v530d9dac09);
    free(v530d9dac09);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v94b9cdb56e_0; break;
        case 1: goto v94b9cdb56e_1; break;
    }
v94b9cdb56e_0:;
    stateful_free(OHCI_TD_v3725bd0c79);
    OHCI_TD_v3725bd0c79 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v3725bd0c79 = 0x%lx\n", OHCI_TD_v3725bd0c79);
    uint8_t *v43ab4db80e = (uint8_t *)malloc(0x4);
    fill(v43ab4db80e, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v3725bd0c79 + 0x0, 0x4, (uint8_t *)v43ab4db80e);
    free(v43ab4db80e);
    uint8_t *vef2de43231 = (uint8_t *)malloc(0x4);
    fill(vef2de43231, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v3725bd0c79 + 0x4, 0x4, (uint8_t *)vef2de43231);
    free(vef2de43231);
    uint8_t *v5561333711 = (uint8_t *)malloc(0x4);
    fill(v5561333711, 0x4, (OHCI_TD_v3725bd0c79 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v3725bd0c79 + 0x8, 0x4, (uint8_t *)v5561333711);
    free(v5561333711);
    uint8_t *v56a62bec95 = (uint8_t *)malloc(0x4);
    fill(v56a62bec95, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v3725bd0c79 + 0xc, 0x4, (uint8_t *)v56a62bec95);
    free(v56a62bec95);
    uint8_t *v3b3ec67855 = (uint8_t *)malloc(0x4);
    fill(v3b3ec67855, 0x4, (OHCI_TD_v3725bd0c79 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6953a1155a + 0x8, 0x4, (uint8_t *)v3b3ec67855);
    free(v3b3ec67855);
    goto v94b9cdb56e_out;
v94b9cdb56e_1:;
    stateful_free(OHCI_ISO_TD_vacfeba4441);
    OHCI_ISO_TD_vacfeba4441 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vacfeba4441 = 0x%lx\n", OHCI_ISO_TD_vacfeba4441);
    uint8_t *vf8f2412389 = (uint8_t *)malloc(0x4);
    fill(vf8f2412389, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x0, 0x4, (uint8_t *)vf8f2412389);
    free(vf8f2412389);
    uint8_t *v9271c5463d = (uint8_t *)malloc(0x4);
    fill(v9271c5463d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x4, 0x4, (uint8_t *)v9271c5463d);
    free(v9271c5463d);
    uint8_t *v7e6f85818a = (uint8_t *)malloc(0x4);
    fill(v7e6f85818a, 0x4, (OHCI_ISO_TD_vacfeba4441 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x8, 0x4, (uint8_t *)v7e6f85818a);
    free(v7e6f85818a);
    uint8_t *v725b40ca2e = (uint8_t *)malloc(0x4);
    fill(v725b40ca2e, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0xc, 0x4, (uint8_t *)v725b40ca2e);
    free(v725b40ca2e);
    stateful_free(buffer_v29b108230d);
    buffer_v29b108230d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v29b108230d = 0x%lx\n", buffer_v29b108230d);
    uint8_t *vaceb5b5af4 = (uint8_t *)malloc(0x100);
    fill(vaceb5b5af4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v29b108230d + 0x0, 0x100, (uint8_t *)vaceb5b5af4);
    free(vaceb5b5af4);
    uint8_t *va05206d257 = (uint8_t *)malloc(0x2);
    fill(va05206d257, 0x2, (buffer_v29b108230d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x10, 0x2, (uint8_t *)va05206d257);
    free(va05206d257);
    stateful_free(buffer_v23f1b67e01);
    buffer_v23f1b67e01 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v23f1b67e01 = 0x%lx\n", buffer_v23f1b67e01);
    uint8_t *v993c47c3f9 = (uint8_t *)malloc(0x100);
    fill(v993c47c3f9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v23f1b67e01 + 0x0, 0x100, (uint8_t *)v993c47c3f9);
    free(v993c47c3f9);
    uint8_t *v9054a516e5 = (uint8_t *)malloc(0x2);
    fill(v9054a516e5, 0x2, (buffer_v23f1b67e01 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x12, 0x2, (uint8_t *)v9054a516e5);
    free(v9054a516e5);
    stateful_free(buffer_v7425f4e938);
    buffer_v7425f4e938 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v7425f4e938 = 0x%lx\n", buffer_v7425f4e938);
    uint8_t *v9450826ff2 = (uint8_t *)malloc(0x100);
    fill(v9450826ff2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v7425f4e938 + 0x0, 0x100, (uint8_t *)v9450826ff2);
    free(v9450826ff2);
    uint8_t *v23b982e514 = (uint8_t *)malloc(0x2);
    fill(v23b982e514, 0x2, (buffer_v7425f4e938 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x14, 0x2, (uint8_t *)v23b982e514);
    free(v23b982e514);
    stateful_free(buffer_v9bbac83856);
    buffer_v9bbac83856 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9bbac83856 = 0x%lx\n", buffer_v9bbac83856);
    uint8_t *v4cb5e62639 = (uint8_t *)malloc(0x100);
    fill(v4cb5e62639, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9bbac83856 + 0x0, 0x100, (uint8_t *)v4cb5e62639);
    free(v4cb5e62639);
    uint8_t *vc3a577a290 = (uint8_t *)malloc(0x2);
    fill(vc3a577a290, 0x2, (buffer_v9bbac83856 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x16, 0x2, (uint8_t *)vc3a577a290);
    free(vc3a577a290);
    stateful_free(buffer_ve2014a459b);
    buffer_ve2014a459b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve2014a459b = 0x%lx\n", buffer_ve2014a459b);
    uint8_t *vaf71f4aead = (uint8_t *)malloc(0x100);
    fill(vaf71f4aead, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve2014a459b + 0x0, 0x100, (uint8_t *)vaf71f4aead);
    free(vaf71f4aead);
    uint8_t *v109122085d = (uint8_t *)malloc(0x2);
    fill(v109122085d, 0x2, (buffer_ve2014a459b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x18, 0x2, (uint8_t *)v109122085d);
    free(v109122085d);
    stateful_free(buffer_v51abf5e5cb);
    buffer_v51abf5e5cb = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v51abf5e5cb = 0x%lx\n", buffer_v51abf5e5cb);
    uint8_t *v267aeae2cc = (uint8_t *)malloc(0x100);
    fill(v267aeae2cc, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v51abf5e5cb + 0x0, 0x100, (uint8_t *)v267aeae2cc);
    free(v267aeae2cc);
    uint8_t *v863d18c9d6 = (uint8_t *)malloc(0x2);
    fill(v863d18c9d6, 0x2, (buffer_v51abf5e5cb | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x1a, 0x2, (uint8_t *)v863d18c9d6);
    free(v863d18c9d6);
    stateful_free(buffer_v4168705a53);
    buffer_v4168705a53 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4168705a53 = 0x%lx\n", buffer_v4168705a53);
    uint8_t *v9ee3efdba0 = (uint8_t *)malloc(0x100);
    fill(v9ee3efdba0, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4168705a53 + 0x0, 0x100, (uint8_t *)v9ee3efdba0);
    free(v9ee3efdba0);
    uint8_t *v2a5debfa9d = (uint8_t *)malloc(0x2);
    fill(v2a5debfa9d, 0x2, (buffer_v4168705a53 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x1c, 0x2, (uint8_t *)v2a5debfa9d);
    free(v2a5debfa9d);
    stateful_free(buffer_vb5aafef85a);
    buffer_vb5aafef85a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb5aafef85a = 0x%lx\n", buffer_vb5aafef85a);
    uint8_t *v2f571c5472 = (uint8_t *)malloc(0x100);
    fill(v2f571c5472, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb5aafef85a + 0x0, 0x100, (uint8_t *)v2f571c5472);
    free(v2f571c5472);
    uint8_t *v5c4250886b = (uint8_t *)malloc(0x2);
    fill(v5c4250886b, 0x2, (buffer_vb5aafef85a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vacfeba4441 + 0x1e, 0x2, (uint8_t *)v5c4250886b);
    free(v5c4250886b);
    uint8_t *v2653b39e51 = (uint8_t *)malloc(0x4);
    fill(v2653b39e51, 0x4, (OHCI_ISO_TD_vacfeba4441 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6953a1155a + 0x8, 0x4, (uint8_t *)v2653b39e51);
    free(v2653b39e51);
    goto v94b9cdb56e_out;
v94b9cdb56e_out:;
    uint8_t *vc3ee79d13e = (uint8_t *)malloc(0x4);
    fill(vc3ee79d13e, 0x4, OHCI_ED_v6953a1155a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v6953a1155a + 0xc, 0x4, (uint8_t *)vc3ee79d13e);
    free(vc3ee79d13e);
    uint8_t *v22f062975d = (uint8_t *)malloc(0x4);
    fill(v22f062975d, 0x4, OHCI_ED_v6953a1155a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x40, 0x4, (uint8_t *)v22f062975d);
    free(v22f062975d);
    goto vc061c99b83_out;
vc061c99b83_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v14827a895e_0; break;
    }
v14827a895e_0:;
    stateful_free(OHCI_ED_v864696c1de);
    OHCI_ED_v864696c1de = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v864696c1de = 0x%lx\n", OHCI_ED_v864696c1de);
    uint8_t *vd493227edc = (uint8_t *)malloc(0x4);
    fill(vd493227edc, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v864696c1de + 0x0, 0x4, (uint8_t *)vd493227edc);
    free(vd493227edc);
    uint8_t *v63d45aa3de = (uint8_t *)malloc(0x4);
    fill(v63d45aa3de, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v864696c1de + 0x4, 0x4, (uint8_t *)v63d45aa3de);
    free(v63d45aa3de);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto vd658b1b330_0; break;
        case 1: goto vd658b1b330_1; break;
    }
vd658b1b330_0:;
    stateful_free(OHCI_TD_v4d236555bc);
    OHCI_TD_v4d236555bc = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v4d236555bc = 0x%lx\n", OHCI_TD_v4d236555bc);
    uint8_t *v5fb1a0dd34 = (uint8_t *)malloc(0x4);
    fill(v5fb1a0dd34, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4d236555bc + 0x0, 0x4, (uint8_t *)v5fb1a0dd34);
    free(v5fb1a0dd34);
    uint8_t *ve90a23643a = (uint8_t *)malloc(0x4);
    fill(ve90a23643a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4d236555bc + 0x4, 0x4, (uint8_t *)ve90a23643a);
    free(ve90a23643a);
    uint8_t *v630f00b19b = (uint8_t *)malloc(0x4);
    fill(v630f00b19b, 0x4, (OHCI_TD_v4d236555bc & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4d236555bc + 0x8, 0x4, (uint8_t *)v630f00b19b);
    free(v630f00b19b);
    uint8_t *v8dc118edcd = (uint8_t *)malloc(0x4);
    fill(v8dc118edcd, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4d236555bc + 0xc, 0x4, (uint8_t *)v8dc118edcd);
    free(v8dc118edcd);
    uint8_t *v229204c0cc = (uint8_t *)malloc(0x4);
    fill(v229204c0cc, 0x4, (OHCI_TD_v4d236555bc & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v864696c1de + 0x8, 0x4, (uint8_t *)v229204c0cc);
    free(v229204c0cc);
    goto vd658b1b330_out;
vd658b1b330_1:;
    stateful_free(OHCI_ISO_TD_vdc2897c684);
    OHCI_ISO_TD_vdc2897c684 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vdc2897c684 = 0x%lx\n", OHCI_ISO_TD_vdc2897c684);
    uint8_t *v74bc0560f1 = (uint8_t *)malloc(0x4);
    fill(v74bc0560f1, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x0, 0x4, (uint8_t *)v74bc0560f1);
    free(v74bc0560f1);
    uint8_t *v68f8a67abd = (uint8_t *)malloc(0x4);
    fill(v68f8a67abd, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x4, 0x4, (uint8_t *)v68f8a67abd);
    free(v68f8a67abd);
    uint8_t *v6ce2ecf9dd = (uint8_t *)malloc(0x4);
    fill(v6ce2ecf9dd, 0x4, (OHCI_ISO_TD_vdc2897c684 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x8, 0x4, (uint8_t *)v6ce2ecf9dd);
    free(v6ce2ecf9dd);
    uint8_t *v4531ff004f = (uint8_t *)malloc(0x4);
    fill(v4531ff004f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0xc, 0x4, (uint8_t *)v4531ff004f);
    free(v4531ff004f);
    stateful_free(buffer_v7b69e69041);
    buffer_v7b69e69041 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v7b69e69041 = 0x%lx\n", buffer_v7b69e69041);
    uint8_t *v2160af294e = (uint8_t *)malloc(0x100);
    fill(v2160af294e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v7b69e69041 + 0x0, 0x100, (uint8_t *)v2160af294e);
    free(v2160af294e);
    uint8_t *vf5b7dd928c = (uint8_t *)malloc(0x2);
    fill(vf5b7dd928c, 0x2, (buffer_v7b69e69041 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x10, 0x2, (uint8_t *)vf5b7dd928c);
    free(vf5b7dd928c);
    stateful_free(buffer_vb6651d6edf);
    buffer_vb6651d6edf = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb6651d6edf = 0x%lx\n", buffer_vb6651d6edf);
    uint8_t *v2f8b977b48 = (uint8_t *)malloc(0x100);
    fill(v2f8b977b48, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb6651d6edf + 0x0, 0x100, (uint8_t *)v2f8b977b48);
    free(v2f8b977b48);
    uint8_t *v5f000fa2d5 = (uint8_t *)malloc(0x2);
    fill(v5f000fa2d5, 0x2, (buffer_vb6651d6edf | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x12, 0x2, (uint8_t *)v5f000fa2d5);
    free(v5f000fa2d5);
    stateful_free(buffer_v1284b9d78d);
    buffer_v1284b9d78d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1284b9d78d = 0x%lx\n", buffer_v1284b9d78d);
    uint8_t *va027998086 = (uint8_t *)malloc(0x100);
    fill(va027998086, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1284b9d78d + 0x0, 0x100, (uint8_t *)va027998086);
    free(va027998086);
    uint8_t *ve7bdcaccf1 = (uint8_t *)malloc(0x2);
    fill(ve7bdcaccf1, 0x2, (buffer_v1284b9d78d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x14, 0x2, (uint8_t *)ve7bdcaccf1);
    free(ve7bdcaccf1);
    stateful_free(buffer_v75e417dd7e);
    buffer_v75e417dd7e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v75e417dd7e = 0x%lx\n", buffer_v75e417dd7e);
    uint8_t *vcd1fe22d96 = (uint8_t *)malloc(0x100);
    fill(vcd1fe22d96, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v75e417dd7e + 0x0, 0x100, (uint8_t *)vcd1fe22d96);
    free(vcd1fe22d96);
    uint8_t *v6cdd497d1e = (uint8_t *)malloc(0x2);
    fill(v6cdd497d1e, 0x2, (buffer_v75e417dd7e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x16, 0x2, (uint8_t *)v6cdd497d1e);
    free(v6cdd497d1e);
    stateful_free(buffer_v15eae9d21e);
    buffer_v15eae9d21e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v15eae9d21e = 0x%lx\n", buffer_v15eae9d21e);
    uint8_t *va53381b267 = (uint8_t *)malloc(0x100);
    fill(va53381b267, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v15eae9d21e + 0x0, 0x100, (uint8_t *)va53381b267);
    free(va53381b267);
    uint8_t *vcf8af92d5d = (uint8_t *)malloc(0x2);
    fill(vcf8af92d5d, 0x2, (buffer_v15eae9d21e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x18, 0x2, (uint8_t *)vcf8af92d5d);
    free(vcf8af92d5d);
    stateful_free(buffer_v275f275cc3);
    buffer_v275f275cc3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v275f275cc3 = 0x%lx\n", buffer_v275f275cc3);
    uint8_t *v97a6f416ce = (uint8_t *)malloc(0x100);
    fill(v97a6f416ce, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v275f275cc3 + 0x0, 0x100, (uint8_t *)v97a6f416ce);
    free(v97a6f416ce);
    uint8_t *v1c723c20b6 = (uint8_t *)malloc(0x2);
    fill(v1c723c20b6, 0x2, (buffer_v275f275cc3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x1a, 0x2, (uint8_t *)v1c723c20b6);
    free(v1c723c20b6);
    stateful_free(buffer_veb52ee01e2);
    buffer_veb52ee01e2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_veb52ee01e2 = 0x%lx\n", buffer_veb52ee01e2);
    uint8_t *v670645a88e = (uint8_t *)malloc(0x100);
    fill(v670645a88e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_veb52ee01e2 + 0x0, 0x100, (uint8_t *)v670645a88e);
    free(v670645a88e);
    uint8_t *veb63d7ef15 = (uint8_t *)malloc(0x2);
    fill(veb63d7ef15, 0x2, (buffer_veb52ee01e2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x1c, 0x2, (uint8_t *)veb63d7ef15);
    free(veb63d7ef15);
    stateful_free(buffer_v9cdd9f6c70);
    buffer_v9cdd9f6c70 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9cdd9f6c70 = 0x%lx\n", buffer_v9cdd9f6c70);
    uint8_t *va54b260fb1 = (uint8_t *)malloc(0x100);
    fill(va54b260fb1, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9cdd9f6c70 + 0x0, 0x100, (uint8_t *)va54b260fb1);
    free(va54b260fb1);
    uint8_t *v350a2abc69 = (uint8_t *)malloc(0x2);
    fill(v350a2abc69, 0x2, (buffer_v9cdd9f6c70 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdc2897c684 + 0x1e, 0x2, (uint8_t *)v350a2abc69);
    free(v350a2abc69);
    uint8_t *v45f8ba7323 = (uint8_t *)malloc(0x4);
    fill(v45f8ba7323, 0x4, (OHCI_ISO_TD_vdc2897c684 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v864696c1de + 0x8, 0x4, (uint8_t *)v45f8ba7323);
    free(v45f8ba7323);
    goto vd658b1b330_out;
vd658b1b330_out:;
    uint8_t *v47d0964d85 = (uint8_t *)malloc(0x4);
    fill(v47d0964d85, 0x4, OHCI_ED_v864696c1de, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v864696c1de + 0xc, 0x4, (uint8_t *)v47d0964d85);
    free(v47d0964d85);
    uint8_t *vc98b16e9b6 = (uint8_t *)malloc(0x4);
    fill(vc98b16e9b6, 0x4, OHCI_ED_v864696c1de, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x44, 0x4, (uint8_t *)vc98b16e9b6);
    free(vc98b16e9b6);
    goto v14827a895e_out;
v14827a895e_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v3fee2fc72e_0; break;
    }
v3fee2fc72e_0:;
    stateful_free(OHCI_ED_vc9fe60368a);
    OHCI_ED_vc9fe60368a = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vc9fe60368a = 0x%lx\n", OHCI_ED_vc9fe60368a);
    uint8_t *v109d5b9792 = (uint8_t *)malloc(0x4);
    fill(v109d5b9792, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc9fe60368a + 0x0, 0x4, (uint8_t *)v109d5b9792);
    free(v109d5b9792);
    uint8_t *v7aed04c464 = (uint8_t *)malloc(0x4);
    fill(v7aed04c464, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc9fe60368a + 0x4, 0x4, (uint8_t *)v7aed04c464);
    free(v7aed04c464);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v45c596d442_0; break;
        case 1: goto v45c596d442_1; break;
    }
v45c596d442_0:;
    stateful_free(OHCI_TD_vb63f83c6c8);
    OHCI_TD_vb63f83c6c8 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vb63f83c6c8 = 0x%lx\n", OHCI_TD_vb63f83c6c8);
    uint8_t *v8d40d5428c = (uint8_t *)malloc(0x4);
    fill(v8d40d5428c, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb63f83c6c8 + 0x0, 0x4, (uint8_t *)v8d40d5428c);
    free(v8d40d5428c);
    uint8_t *vde74ae046c = (uint8_t *)malloc(0x4);
    fill(vde74ae046c, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb63f83c6c8 + 0x4, 0x4, (uint8_t *)vde74ae046c);
    free(vde74ae046c);
    uint8_t *v551a6cad18 = (uint8_t *)malloc(0x4);
    fill(v551a6cad18, 0x4, (OHCI_TD_vb63f83c6c8 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb63f83c6c8 + 0x8, 0x4, (uint8_t *)v551a6cad18);
    free(v551a6cad18);
    uint8_t *v4b9cfdfab7 = (uint8_t *)malloc(0x4);
    fill(v4b9cfdfab7, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb63f83c6c8 + 0xc, 0x4, (uint8_t *)v4b9cfdfab7);
    free(v4b9cfdfab7);
    uint8_t *v736243ad72 = (uint8_t *)malloc(0x4);
    fill(v736243ad72, 0x4, (OHCI_TD_vb63f83c6c8 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc9fe60368a + 0x8, 0x4, (uint8_t *)v736243ad72);
    free(v736243ad72);
    goto v45c596d442_out;
v45c596d442_1:;
    stateful_free(OHCI_ISO_TD_vbb9e5a022c);
    OHCI_ISO_TD_vbb9e5a022c = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vbb9e5a022c = 0x%lx\n", OHCI_ISO_TD_vbb9e5a022c);
    uint8_t *v59cbdf8667 = (uint8_t *)malloc(0x4);
    fill(v59cbdf8667, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x0, 0x4, (uint8_t *)v59cbdf8667);
    free(v59cbdf8667);
    uint8_t *v63fdedb443 = (uint8_t *)malloc(0x4);
    fill(v63fdedb443, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x4, 0x4, (uint8_t *)v63fdedb443);
    free(v63fdedb443);
    uint8_t *v7d7cb4ba8a = (uint8_t *)malloc(0x4);
    fill(v7d7cb4ba8a, 0x4, (OHCI_ISO_TD_vbb9e5a022c & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x8, 0x4, (uint8_t *)v7d7cb4ba8a);
    free(v7d7cb4ba8a);
    uint8_t *v90da4776db = (uint8_t *)malloc(0x4);
    fill(v90da4776db, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0xc, 0x4, (uint8_t *)v90da4776db);
    free(v90da4776db);
    stateful_free(buffer_v37d316a43f);
    buffer_v37d316a43f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v37d316a43f = 0x%lx\n", buffer_v37d316a43f);
    uint8_t *v3633cb67e3 = (uint8_t *)malloc(0x100);
    fill(v3633cb67e3, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v37d316a43f + 0x0, 0x100, (uint8_t *)v3633cb67e3);
    free(v3633cb67e3);
    uint8_t *v640151e509 = (uint8_t *)malloc(0x2);
    fill(v640151e509, 0x2, (buffer_v37d316a43f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x10, 0x2, (uint8_t *)v640151e509);
    free(v640151e509);
    stateful_free(buffer_v83e9973b89);
    buffer_v83e9973b89 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v83e9973b89 = 0x%lx\n", buffer_v83e9973b89);
    uint8_t *vbfc86ca405 = (uint8_t *)malloc(0x100);
    fill(vbfc86ca405, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v83e9973b89 + 0x0, 0x100, (uint8_t *)vbfc86ca405);
    free(vbfc86ca405);
    uint8_t *v4cfec3f69f = (uint8_t *)malloc(0x2);
    fill(v4cfec3f69f, 0x2, (buffer_v83e9973b89 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x12, 0x2, (uint8_t *)v4cfec3f69f);
    free(v4cfec3f69f);
    stateful_free(buffer_vcbdc014dbe);
    buffer_vcbdc014dbe = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcbdc014dbe = 0x%lx\n", buffer_vcbdc014dbe);
    uint8_t *v8e4924b8e6 = (uint8_t *)malloc(0x100);
    fill(v8e4924b8e6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcbdc014dbe + 0x0, 0x100, (uint8_t *)v8e4924b8e6);
    free(v8e4924b8e6);
    uint8_t *v6bb639cd1b = (uint8_t *)malloc(0x2);
    fill(v6bb639cd1b, 0x2, (buffer_vcbdc014dbe | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x14, 0x2, (uint8_t *)v6bb639cd1b);
    free(v6bb639cd1b);
    stateful_free(buffer_va52ba0ce62);
    buffer_va52ba0ce62 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va52ba0ce62 = 0x%lx\n", buffer_va52ba0ce62);
    uint8_t *v56ca50c9cc = (uint8_t *)malloc(0x100);
    fill(v56ca50c9cc, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va52ba0ce62 + 0x0, 0x100, (uint8_t *)v56ca50c9cc);
    free(v56ca50c9cc);
    uint8_t *va161960086 = (uint8_t *)malloc(0x2);
    fill(va161960086, 0x2, (buffer_va52ba0ce62 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x16, 0x2, (uint8_t *)va161960086);
    free(va161960086);
    stateful_free(buffer_v5be12d0990);
    buffer_v5be12d0990 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5be12d0990 = 0x%lx\n", buffer_v5be12d0990);
    uint8_t *v94b9c44097 = (uint8_t *)malloc(0x100);
    fill(v94b9c44097, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5be12d0990 + 0x0, 0x100, (uint8_t *)v94b9c44097);
    free(v94b9c44097);
    uint8_t *v47951f79d3 = (uint8_t *)malloc(0x2);
    fill(v47951f79d3, 0x2, (buffer_v5be12d0990 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x18, 0x2, (uint8_t *)v47951f79d3);
    free(v47951f79d3);
    stateful_free(buffer_va91da2cd8b);
    buffer_va91da2cd8b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va91da2cd8b = 0x%lx\n", buffer_va91da2cd8b);
    uint8_t *v3b3a0aed3d = (uint8_t *)malloc(0x100);
    fill(v3b3a0aed3d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va91da2cd8b + 0x0, 0x100, (uint8_t *)v3b3a0aed3d);
    free(v3b3a0aed3d);
    uint8_t *v666f6fa042 = (uint8_t *)malloc(0x2);
    fill(v666f6fa042, 0x2, (buffer_va91da2cd8b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x1a, 0x2, (uint8_t *)v666f6fa042);
    free(v666f6fa042);
    stateful_free(buffer_v3d798f0be6);
    buffer_v3d798f0be6 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v3d798f0be6 = 0x%lx\n", buffer_v3d798f0be6);
    uint8_t *v3a7fb889df = (uint8_t *)malloc(0x100);
    fill(v3a7fb889df, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v3d798f0be6 + 0x0, 0x100, (uint8_t *)v3a7fb889df);
    free(v3a7fb889df);
    uint8_t *v754efc5da8 = (uint8_t *)malloc(0x2);
    fill(v754efc5da8, 0x2, (buffer_v3d798f0be6 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x1c, 0x2, (uint8_t *)v754efc5da8);
    free(v754efc5da8);
    stateful_free(buffer_v3bcd6aec53);
    buffer_v3bcd6aec53 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v3bcd6aec53 = 0x%lx\n", buffer_v3bcd6aec53);
    uint8_t *v7da9c122ac = (uint8_t *)malloc(0x100);
    fill(v7da9c122ac, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v3bcd6aec53 + 0x0, 0x100, (uint8_t *)v7da9c122ac);
    free(v7da9c122ac);
    uint8_t *v8ca5773131 = (uint8_t *)malloc(0x2);
    fill(v8ca5773131, 0x2, (buffer_v3bcd6aec53 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vbb9e5a022c + 0x1e, 0x2, (uint8_t *)v8ca5773131);
    free(v8ca5773131);
    uint8_t *v63f72b5faa = (uint8_t *)malloc(0x4);
    fill(v63f72b5faa, 0x4, (OHCI_ISO_TD_vbb9e5a022c & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc9fe60368a + 0x8, 0x4, (uint8_t *)v63f72b5faa);
    free(v63f72b5faa);
    goto v45c596d442_out;
v45c596d442_out:;
    uint8_t *v953f2ad962 = (uint8_t *)malloc(0x4);
    fill(v953f2ad962, 0x4, OHCI_ED_vc9fe60368a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc9fe60368a + 0xc, 0x4, (uint8_t *)v953f2ad962);
    free(v953f2ad962);
    uint8_t *vcd8df058be = (uint8_t *)malloc(0x4);
    fill(vcd8df058be, 0x4, OHCI_ED_vc9fe60368a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x48, 0x4, (uint8_t *)vcd8df058be);
    free(vcd8df058be);
    goto v3fee2fc72e_out;
v3fee2fc72e_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v7af2f402a0_0; break;
    }
v7af2f402a0_0:;
    stateful_free(OHCI_ED_v2bdfb72795);
    OHCI_ED_v2bdfb72795 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v2bdfb72795 = 0x%lx\n", OHCI_ED_v2bdfb72795);
    uint8_t *vd7d9cd2c35 = (uint8_t *)malloc(0x4);
    fill(vd7d9cd2c35, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2bdfb72795 + 0x0, 0x4, (uint8_t *)vd7d9cd2c35);
    free(vd7d9cd2c35);
    uint8_t *v4c9dc9a84d = (uint8_t *)malloc(0x4);
    fill(v4c9dc9a84d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2bdfb72795 + 0x4, 0x4, (uint8_t *)v4c9dc9a84d);
    free(v4c9dc9a84d);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v53f0409981_0; break;
        case 1: goto v53f0409981_1; break;
    }
v53f0409981_0:;
    stateful_free(OHCI_TD_va283453695);
    OHCI_TD_va283453695 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_va283453695 = 0x%lx\n", OHCI_TD_va283453695);
    uint8_t *v3eaa2f0ad9 = (uint8_t *)malloc(0x4);
    fill(v3eaa2f0ad9, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va283453695 + 0x0, 0x4, (uint8_t *)v3eaa2f0ad9);
    free(v3eaa2f0ad9);
    uint8_t *vf032172d85 = (uint8_t *)malloc(0x4);
    fill(vf032172d85, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va283453695 + 0x4, 0x4, (uint8_t *)vf032172d85);
    free(vf032172d85);
    uint8_t *vdcf86eb164 = (uint8_t *)malloc(0x4);
    fill(vdcf86eb164, 0x4, (OHCI_TD_va283453695 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va283453695 + 0x8, 0x4, (uint8_t *)vdcf86eb164);
    free(vdcf86eb164);
    uint8_t *vf382650595 = (uint8_t *)malloc(0x4);
    fill(vf382650595, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va283453695 + 0xc, 0x4, (uint8_t *)vf382650595);
    free(vf382650595);
    uint8_t *vadfd429f70 = (uint8_t *)malloc(0x4);
    fill(vadfd429f70, 0x4, (OHCI_TD_va283453695 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2bdfb72795 + 0x8, 0x4, (uint8_t *)vadfd429f70);
    free(vadfd429f70);
    goto v53f0409981_out;
v53f0409981_1:;
    stateful_free(OHCI_ISO_TD_vd0f0c75d21);
    OHCI_ISO_TD_vd0f0c75d21 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vd0f0c75d21 = 0x%lx\n", OHCI_ISO_TD_vd0f0c75d21);
    uint8_t *v6cf1c5266a = (uint8_t *)malloc(0x4);
    fill(v6cf1c5266a, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x0, 0x4, (uint8_t *)v6cf1c5266a);
    free(v6cf1c5266a);
    uint8_t *v613bbe30b8 = (uint8_t *)malloc(0x4);
    fill(v613bbe30b8, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x4, 0x4, (uint8_t *)v613bbe30b8);
    free(v613bbe30b8);
    uint8_t *veca9451844 = (uint8_t *)malloc(0x4);
    fill(veca9451844, 0x4, (OHCI_ISO_TD_vd0f0c75d21 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x8, 0x4, (uint8_t *)veca9451844);
    free(veca9451844);
    uint8_t *v9122343161 = (uint8_t *)malloc(0x4);
    fill(v9122343161, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0xc, 0x4, (uint8_t *)v9122343161);
    free(v9122343161);
    stateful_free(buffer_v62759469c2);
    buffer_v62759469c2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v62759469c2 = 0x%lx\n", buffer_v62759469c2);
    uint8_t *v6cdb4ae755 = (uint8_t *)malloc(0x100);
    fill(v6cdb4ae755, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v62759469c2 + 0x0, 0x100, (uint8_t *)v6cdb4ae755);
    free(v6cdb4ae755);
    uint8_t *vec35be28c0 = (uint8_t *)malloc(0x2);
    fill(vec35be28c0, 0x2, (buffer_v62759469c2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x10, 0x2, (uint8_t *)vec35be28c0);
    free(vec35be28c0);
    stateful_free(buffer_v974d9d499b);
    buffer_v974d9d499b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v974d9d499b = 0x%lx\n", buffer_v974d9d499b);
    uint8_t *v3f16226731 = (uint8_t *)malloc(0x100);
    fill(v3f16226731, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v974d9d499b + 0x0, 0x100, (uint8_t *)v3f16226731);
    free(v3f16226731);
    uint8_t *v71197d0b07 = (uint8_t *)malloc(0x2);
    fill(v71197d0b07, 0x2, (buffer_v974d9d499b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x12, 0x2, (uint8_t *)v71197d0b07);
    free(v71197d0b07);
    stateful_free(buffer_v5bce228b98);
    buffer_v5bce228b98 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5bce228b98 = 0x%lx\n", buffer_v5bce228b98);
    uint8_t *va6f33d64c5 = (uint8_t *)malloc(0x100);
    fill(va6f33d64c5, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5bce228b98 + 0x0, 0x100, (uint8_t *)va6f33d64c5);
    free(va6f33d64c5);
    uint8_t *v5ab3f45166 = (uint8_t *)malloc(0x2);
    fill(v5ab3f45166, 0x2, (buffer_v5bce228b98 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x14, 0x2, (uint8_t *)v5ab3f45166);
    free(v5ab3f45166);
    stateful_free(buffer_v4f06ea1874);
    buffer_v4f06ea1874 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4f06ea1874 = 0x%lx\n", buffer_v4f06ea1874);
    uint8_t *v3b6ef9a882 = (uint8_t *)malloc(0x100);
    fill(v3b6ef9a882, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4f06ea1874 + 0x0, 0x100, (uint8_t *)v3b6ef9a882);
    free(v3b6ef9a882);
    uint8_t *v6084c9fcfc = (uint8_t *)malloc(0x2);
    fill(v6084c9fcfc, 0x2, (buffer_v4f06ea1874 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x16, 0x2, (uint8_t *)v6084c9fcfc);
    free(v6084c9fcfc);
    stateful_free(buffer_vbcc4616df4);
    buffer_vbcc4616df4 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbcc4616df4 = 0x%lx\n", buffer_vbcc4616df4);
    uint8_t *v7d085b15f5 = (uint8_t *)malloc(0x100);
    fill(v7d085b15f5, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbcc4616df4 + 0x0, 0x100, (uint8_t *)v7d085b15f5);
    free(v7d085b15f5);
    uint8_t *v525bf55166 = (uint8_t *)malloc(0x2);
    fill(v525bf55166, 0x2, (buffer_vbcc4616df4 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x18, 0x2, (uint8_t *)v525bf55166);
    free(v525bf55166);
    stateful_free(buffer_v142a6c95d9);
    buffer_v142a6c95d9 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v142a6c95d9 = 0x%lx\n", buffer_v142a6c95d9);
    uint8_t *v2f7bfb94cd = (uint8_t *)malloc(0x100);
    fill(v2f7bfb94cd, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v142a6c95d9 + 0x0, 0x100, (uint8_t *)v2f7bfb94cd);
    free(v2f7bfb94cd);
    uint8_t *vc6d8de0175 = (uint8_t *)malloc(0x2);
    fill(vc6d8de0175, 0x2, (buffer_v142a6c95d9 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x1a, 0x2, (uint8_t *)vc6d8de0175);
    free(vc6d8de0175);
    stateful_free(buffer_v9ab3cc2723);
    buffer_v9ab3cc2723 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9ab3cc2723 = 0x%lx\n", buffer_v9ab3cc2723);
    uint8_t *ve777592e6f = (uint8_t *)malloc(0x100);
    fill(ve777592e6f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9ab3cc2723 + 0x0, 0x100, (uint8_t *)ve777592e6f);
    free(ve777592e6f);
    uint8_t *vda09fb602d = (uint8_t *)malloc(0x2);
    fill(vda09fb602d, 0x2, (buffer_v9ab3cc2723 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x1c, 0x2, (uint8_t *)vda09fb602d);
    free(vda09fb602d);
    stateful_free(buffer_vc90ded2951);
    buffer_vc90ded2951 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc90ded2951 = 0x%lx\n", buffer_vc90ded2951);
    uint8_t *vcfeeb9b05e = (uint8_t *)malloc(0x100);
    fill(vcfeeb9b05e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc90ded2951 + 0x0, 0x100, (uint8_t *)vcfeeb9b05e);
    free(vcfeeb9b05e);
    uint8_t *v9c834a7cb9 = (uint8_t *)malloc(0x2);
    fill(v9c834a7cb9, 0x2, (buffer_vc90ded2951 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vd0f0c75d21 + 0x1e, 0x2, (uint8_t *)v9c834a7cb9);
    free(v9c834a7cb9);
    uint8_t *v864bdc2a47 = (uint8_t *)malloc(0x4);
    fill(v864bdc2a47, 0x4, (OHCI_ISO_TD_vd0f0c75d21 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2bdfb72795 + 0x8, 0x4, (uint8_t *)v864bdc2a47);
    free(v864bdc2a47);
    goto v53f0409981_out;
v53f0409981_out:;
    uint8_t *v274e7c9afc = (uint8_t *)malloc(0x4);
    fill(v274e7c9afc, 0x4, OHCI_ED_v2bdfb72795, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v2bdfb72795 + 0xc, 0x4, (uint8_t *)v274e7c9afc);
    free(v274e7c9afc);
    uint8_t *v6a33596c56 = (uint8_t *)malloc(0x4);
    fill(v6a33596c56, 0x4, OHCI_ED_v2bdfb72795, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x4c, 0x4, (uint8_t *)v6a33596c56);
    free(v6a33596c56);
    goto v7af2f402a0_out;
v7af2f402a0_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vf19b43da62_0; break;
    }
vf19b43da62_0:;
    stateful_free(OHCI_ED_v9cd3bdf356);
    OHCI_ED_v9cd3bdf356 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v9cd3bdf356 = 0x%lx\n", OHCI_ED_v9cd3bdf356);
    uint8_t *v241fec2648 = (uint8_t *)malloc(0x4);
    fill(v241fec2648, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v9cd3bdf356 + 0x0, 0x4, (uint8_t *)v241fec2648);
    free(v241fec2648);
    uint8_t *vef93a4f7a8 = (uint8_t *)malloc(0x4);
    fill(vef93a4f7a8, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v9cd3bdf356 + 0x4, 0x4, (uint8_t *)vef93a4f7a8);
    free(vef93a4f7a8);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto va867a0f0a8_0; break;
        case 1: goto va867a0f0a8_1; break;
    }
va867a0f0a8_0:;
    stateful_free(OHCI_TD_v4e0e15d329);
    OHCI_TD_v4e0e15d329 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v4e0e15d329 = 0x%lx\n", OHCI_TD_v4e0e15d329);
    uint8_t *v8e4a580648 = (uint8_t *)malloc(0x4);
    fill(v8e4a580648, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4e0e15d329 + 0x0, 0x4, (uint8_t *)v8e4a580648);
    free(v8e4a580648);
    uint8_t *v625300a248 = (uint8_t *)malloc(0x4);
    fill(v625300a248, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4e0e15d329 + 0x4, 0x4, (uint8_t *)v625300a248);
    free(v625300a248);
    uint8_t *vd52583c84c = (uint8_t *)malloc(0x4);
    fill(vd52583c84c, 0x4, (OHCI_TD_v4e0e15d329 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4e0e15d329 + 0x8, 0x4, (uint8_t *)vd52583c84c);
    free(vd52583c84c);
    uint8_t *v4b5c31ed72 = (uint8_t *)malloc(0x4);
    fill(v4b5c31ed72, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v4e0e15d329 + 0xc, 0x4, (uint8_t *)v4b5c31ed72);
    free(v4b5c31ed72);
    uint8_t *v6d9ed7ae0a = (uint8_t *)malloc(0x4);
    fill(v6d9ed7ae0a, 0x4, (OHCI_TD_v4e0e15d329 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v9cd3bdf356 + 0x8, 0x4, (uint8_t *)v6d9ed7ae0a);
    free(v6d9ed7ae0a);
    goto va867a0f0a8_out;
va867a0f0a8_1:;
    stateful_free(OHCI_ISO_TD_v5a79b46a26);
    OHCI_ISO_TD_v5a79b46a26 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v5a79b46a26 = 0x%lx\n", OHCI_ISO_TD_v5a79b46a26);
    uint8_t *v53dbee9717 = (uint8_t *)malloc(0x4);
    fill(v53dbee9717, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x0, 0x4, (uint8_t *)v53dbee9717);
    free(v53dbee9717);
    uint8_t *v474957ad60 = (uint8_t *)malloc(0x4);
    fill(v474957ad60, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x4, 0x4, (uint8_t *)v474957ad60);
    free(v474957ad60);
    uint8_t *vc1a1d053b7 = (uint8_t *)malloc(0x4);
    fill(vc1a1d053b7, 0x4, (OHCI_ISO_TD_v5a79b46a26 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x8, 0x4, (uint8_t *)vc1a1d053b7);
    free(vc1a1d053b7);
    uint8_t *vc8160df509 = (uint8_t *)malloc(0x4);
    fill(vc8160df509, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0xc, 0x4, (uint8_t *)vc8160df509);
    free(vc8160df509);
    stateful_free(buffer_va0b976c27d);
    buffer_va0b976c27d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va0b976c27d = 0x%lx\n", buffer_va0b976c27d);
    uint8_t *v7380527c2f = (uint8_t *)malloc(0x100);
    fill(v7380527c2f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va0b976c27d + 0x0, 0x100, (uint8_t *)v7380527c2f);
    free(v7380527c2f);
    uint8_t *v6559f2d53b = (uint8_t *)malloc(0x2);
    fill(v6559f2d53b, 0x2, (buffer_va0b976c27d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x10, 0x2, (uint8_t *)v6559f2d53b);
    free(v6559f2d53b);
    stateful_free(buffer_v3dd0c86606);
    buffer_v3dd0c86606 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v3dd0c86606 = 0x%lx\n", buffer_v3dd0c86606);
    uint8_t *v7c7718ce4c = (uint8_t *)malloc(0x100);
    fill(v7c7718ce4c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v3dd0c86606 + 0x0, 0x100, (uint8_t *)v7c7718ce4c);
    free(v7c7718ce4c);
    uint8_t *vb07fa381cd = (uint8_t *)malloc(0x2);
    fill(vb07fa381cd, 0x2, (buffer_v3dd0c86606 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x12, 0x2, (uint8_t *)vb07fa381cd);
    free(vb07fa381cd);
    stateful_free(buffer_v53a081a6a7);
    buffer_v53a081a6a7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v53a081a6a7 = 0x%lx\n", buffer_v53a081a6a7);
    uint8_t *vdb80761876 = (uint8_t *)malloc(0x100);
    fill(vdb80761876, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v53a081a6a7 + 0x0, 0x100, (uint8_t *)vdb80761876);
    free(vdb80761876);
    uint8_t *vc5a428c619 = (uint8_t *)malloc(0x2);
    fill(vc5a428c619, 0x2, (buffer_v53a081a6a7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x14, 0x2, (uint8_t *)vc5a428c619);
    free(vc5a428c619);
    stateful_free(buffer_vff9d318d22);
    buffer_vff9d318d22 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vff9d318d22 = 0x%lx\n", buffer_vff9d318d22);
    uint8_t *vba8a82eaad = (uint8_t *)malloc(0x100);
    fill(vba8a82eaad, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vff9d318d22 + 0x0, 0x100, (uint8_t *)vba8a82eaad);
    free(vba8a82eaad);
    uint8_t *v865d203001 = (uint8_t *)malloc(0x2);
    fill(v865d203001, 0x2, (buffer_vff9d318d22 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x16, 0x2, (uint8_t *)v865d203001);
    free(v865d203001);
    stateful_free(buffer_va9fa4ea6f8);
    buffer_va9fa4ea6f8 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va9fa4ea6f8 = 0x%lx\n", buffer_va9fa4ea6f8);
    uint8_t *vb6930ed431 = (uint8_t *)malloc(0x100);
    fill(vb6930ed431, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va9fa4ea6f8 + 0x0, 0x100, (uint8_t *)vb6930ed431);
    free(vb6930ed431);
    uint8_t *vcba1527dad = (uint8_t *)malloc(0x2);
    fill(vcba1527dad, 0x2, (buffer_va9fa4ea6f8 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x18, 0x2, (uint8_t *)vcba1527dad);
    free(vcba1527dad);
    stateful_free(buffer_v72ef7dce37);
    buffer_v72ef7dce37 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v72ef7dce37 = 0x%lx\n", buffer_v72ef7dce37);
    uint8_t *v7e39fd94f8 = (uint8_t *)malloc(0x100);
    fill(v7e39fd94f8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v72ef7dce37 + 0x0, 0x100, (uint8_t *)v7e39fd94f8);
    free(v7e39fd94f8);
    uint8_t *vefac72285d = (uint8_t *)malloc(0x2);
    fill(vefac72285d, 0x2, (buffer_v72ef7dce37 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x1a, 0x2, (uint8_t *)vefac72285d);
    free(vefac72285d);
    stateful_free(buffer_v5ba830dc24);
    buffer_v5ba830dc24 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5ba830dc24 = 0x%lx\n", buffer_v5ba830dc24);
    uint8_t *v5a0b37e876 = (uint8_t *)malloc(0x100);
    fill(v5a0b37e876, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5ba830dc24 + 0x0, 0x100, (uint8_t *)v5a0b37e876);
    free(v5a0b37e876);
    uint8_t *v107a34af5c = (uint8_t *)malloc(0x2);
    fill(v107a34af5c, 0x2, (buffer_v5ba830dc24 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x1c, 0x2, (uint8_t *)v107a34af5c);
    free(v107a34af5c);
    stateful_free(buffer_va629d3322d);
    buffer_va629d3322d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va629d3322d = 0x%lx\n", buffer_va629d3322d);
    uint8_t *v868a9123aa = (uint8_t *)malloc(0x100);
    fill(v868a9123aa, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va629d3322d + 0x0, 0x100, (uint8_t *)v868a9123aa);
    free(v868a9123aa);
    uint8_t *v14c226f3a7 = (uint8_t *)malloc(0x2);
    fill(v14c226f3a7, 0x2, (buffer_va629d3322d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a79b46a26 + 0x1e, 0x2, (uint8_t *)v14c226f3a7);
    free(v14c226f3a7);
    uint8_t *v472005457b = (uint8_t *)malloc(0x4);
    fill(v472005457b, 0x4, (OHCI_ISO_TD_v5a79b46a26 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v9cd3bdf356 + 0x8, 0x4, (uint8_t *)v472005457b);
    free(v472005457b);
    goto va867a0f0a8_out;
va867a0f0a8_out:;
    uint8_t *vbded216086 = (uint8_t *)malloc(0x4);
    fill(vbded216086, 0x4, OHCI_ED_v9cd3bdf356, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v9cd3bdf356 + 0xc, 0x4, (uint8_t *)vbded216086);
    free(vbded216086);
    uint8_t *v17737931a6 = (uint8_t *)malloc(0x4);
    fill(v17737931a6, 0x4, OHCI_ED_v9cd3bdf356, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x50, 0x4, (uint8_t *)v17737931a6);
    free(v17737931a6);
    goto vf19b43da62_out;
vf19b43da62_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v689c0559bf_0; break;
    }
v689c0559bf_0:;
    stateful_free(OHCI_ED_vb476998daf);
    OHCI_ED_vb476998daf = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vb476998daf = 0x%lx\n", OHCI_ED_vb476998daf);
    uint8_t *v378ff0c0d0 = (uint8_t *)malloc(0x4);
    fill(v378ff0c0d0, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb476998daf + 0x0, 0x4, (uint8_t *)v378ff0c0d0);
    free(v378ff0c0d0);
    uint8_t *va87cbe708a = (uint8_t *)malloc(0x4);
    fill(va87cbe708a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb476998daf + 0x4, 0x4, (uint8_t *)va87cbe708a);
    free(va87cbe708a);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v1f626a97eb_0; break;
        case 1: goto v1f626a97eb_1; break;
    }
v1f626a97eb_0:;
    stateful_free(OHCI_TD_v63eaa07ff4);
    OHCI_TD_v63eaa07ff4 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v63eaa07ff4 = 0x%lx\n", OHCI_TD_v63eaa07ff4);
    uint8_t *ve5a61f880c = (uint8_t *)malloc(0x4);
    fill(ve5a61f880c, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v63eaa07ff4 + 0x0, 0x4, (uint8_t *)ve5a61f880c);
    free(ve5a61f880c);
    uint8_t *v7e8efd0d02 = (uint8_t *)malloc(0x4);
    fill(v7e8efd0d02, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v63eaa07ff4 + 0x4, 0x4, (uint8_t *)v7e8efd0d02);
    free(v7e8efd0d02);
    uint8_t *veee2a362cc = (uint8_t *)malloc(0x4);
    fill(veee2a362cc, 0x4, (OHCI_TD_v63eaa07ff4 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v63eaa07ff4 + 0x8, 0x4, (uint8_t *)veee2a362cc);
    free(veee2a362cc);
    uint8_t *v265cad5a8e = (uint8_t *)malloc(0x4);
    fill(v265cad5a8e, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v63eaa07ff4 + 0xc, 0x4, (uint8_t *)v265cad5a8e);
    free(v265cad5a8e);
    uint8_t *vb99e1a815e = (uint8_t *)malloc(0x4);
    fill(vb99e1a815e, 0x4, (OHCI_TD_v63eaa07ff4 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb476998daf + 0x8, 0x4, (uint8_t *)vb99e1a815e);
    free(vb99e1a815e);
    goto v1f626a97eb_out;
v1f626a97eb_1:;
    stateful_free(OHCI_ISO_TD_v8024532000);
    OHCI_ISO_TD_v8024532000 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v8024532000 = 0x%lx\n", OHCI_ISO_TD_v8024532000);
    uint8_t *v2f70b36528 = (uint8_t *)malloc(0x4);
    fill(v2f70b36528, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x0, 0x4, (uint8_t *)v2f70b36528);
    free(v2f70b36528);
    uint8_t *v19e8065b11 = (uint8_t *)malloc(0x4);
    fill(v19e8065b11, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x4, 0x4, (uint8_t *)v19e8065b11);
    free(v19e8065b11);
    uint8_t *ve06ecd8a6a = (uint8_t *)malloc(0x4);
    fill(ve06ecd8a6a, 0x4, (OHCI_ISO_TD_v8024532000 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x8, 0x4, (uint8_t *)ve06ecd8a6a);
    free(ve06ecd8a6a);
    uint8_t *v1c6258f027 = (uint8_t *)malloc(0x4);
    fill(v1c6258f027, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0xc, 0x4, (uint8_t *)v1c6258f027);
    free(v1c6258f027);
    stateful_free(buffer_v25ee54abb3);
    buffer_v25ee54abb3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v25ee54abb3 = 0x%lx\n", buffer_v25ee54abb3);
    uint8_t *vd0b2ce172f = (uint8_t *)malloc(0x100);
    fill(vd0b2ce172f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v25ee54abb3 + 0x0, 0x100, (uint8_t *)vd0b2ce172f);
    free(vd0b2ce172f);
    uint8_t *v90c31d6007 = (uint8_t *)malloc(0x2);
    fill(v90c31d6007, 0x2, (buffer_v25ee54abb3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x10, 0x2, (uint8_t *)v90c31d6007);
    free(v90c31d6007);
    stateful_free(buffer_vd216ad53d4);
    buffer_vd216ad53d4 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vd216ad53d4 = 0x%lx\n", buffer_vd216ad53d4);
    uint8_t *v4551cbec09 = (uint8_t *)malloc(0x100);
    fill(v4551cbec09, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vd216ad53d4 + 0x0, 0x100, (uint8_t *)v4551cbec09);
    free(v4551cbec09);
    uint8_t *v87bc43feff = (uint8_t *)malloc(0x2);
    fill(v87bc43feff, 0x2, (buffer_vd216ad53d4 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x12, 0x2, (uint8_t *)v87bc43feff);
    free(v87bc43feff);
    stateful_free(buffer_vf22a4fc63f);
    buffer_vf22a4fc63f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf22a4fc63f = 0x%lx\n", buffer_vf22a4fc63f);
    uint8_t *v1b4c3736c3 = (uint8_t *)malloc(0x100);
    fill(v1b4c3736c3, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf22a4fc63f + 0x0, 0x100, (uint8_t *)v1b4c3736c3);
    free(v1b4c3736c3);
    uint8_t *v43cc31cf3b = (uint8_t *)malloc(0x2);
    fill(v43cc31cf3b, 0x2, (buffer_vf22a4fc63f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x14, 0x2, (uint8_t *)v43cc31cf3b);
    free(v43cc31cf3b);
    stateful_free(buffer_vb7c144fb2b);
    buffer_vb7c144fb2b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb7c144fb2b = 0x%lx\n", buffer_vb7c144fb2b);
    uint8_t *v5ecc28381e = (uint8_t *)malloc(0x100);
    fill(v5ecc28381e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb7c144fb2b + 0x0, 0x100, (uint8_t *)v5ecc28381e);
    free(v5ecc28381e);
    uint8_t *vc9d3cdb9eb = (uint8_t *)malloc(0x2);
    fill(vc9d3cdb9eb, 0x2, (buffer_vb7c144fb2b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x16, 0x2, (uint8_t *)vc9d3cdb9eb);
    free(vc9d3cdb9eb);
    stateful_free(buffer_v40a210150a);
    buffer_v40a210150a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v40a210150a = 0x%lx\n", buffer_v40a210150a);
    uint8_t *v689f2d2310 = (uint8_t *)malloc(0x100);
    fill(v689f2d2310, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v40a210150a + 0x0, 0x100, (uint8_t *)v689f2d2310);
    free(v689f2d2310);
    uint8_t *v1d04d0fe5b = (uint8_t *)malloc(0x2);
    fill(v1d04d0fe5b, 0x2, (buffer_v40a210150a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x18, 0x2, (uint8_t *)v1d04d0fe5b);
    free(v1d04d0fe5b);
    stateful_free(buffer_ve3b4df81ee);
    buffer_ve3b4df81ee = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve3b4df81ee = 0x%lx\n", buffer_ve3b4df81ee);
    uint8_t *v1362604034 = (uint8_t *)malloc(0x100);
    fill(v1362604034, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve3b4df81ee + 0x0, 0x100, (uint8_t *)v1362604034);
    free(v1362604034);
    uint8_t *v2969633b12 = (uint8_t *)malloc(0x2);
    fill(v2969633b12, 0x2, (buffer_ve3b4df81ee | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x1a, 0x2, (uint8_t *)v2969633b12);
    free(v2969633b12);
    stateful_free(buffer_v16f14aad7f);
    buffer_v16f14aad7f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v16f14aad7f = 0x%lx\n", buffer_v16f14aad7f);
    uint8_t *v8da28b08d7 = (uint8_t *)malloc(0x100);
    fill(v8da28b08d7, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v16f14aad7f + 0x0, 0x100, (uint8_t *)v8da28b08d7);
    free(v8da28b08d7);
    uint8_t *v3719509c5b = (uint8_t *)malloc(0x2);
    fill(v3719509c5b, 0x2, (buffer_v16f14aad7f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x1c, 0x2, (uint8_t *)v3719509c5b);
    free(v3719509c5b);
    stateful_free(buffer_vabf0f4bd4a);
    buffer_vabf0f4bd4a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vabf0f4bd4a = 0x%lx\n", buffer_vabf0f4bd4a);
    uint8_t *ve9e1a3d11a = (uint8_t *)malloc(0x100);
    fill(ve9e1a3d11a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vabf0f4bd4a + 0x0, 0x100, (uint8_t *)ve9e1a3d11a);
    free(ve9e1a3d11a);
    uint8_t *v9b99a16ade = (uint8_t *)malloc(0x2);
    fill(v9b99a16ade, 0x2, (buffer_vabf0f4bd4a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v8024532000 + 0x1e, 0x2, (uint8_t *)v9b99a16ade);
    free(v9b99a16ade);
    uint8_t *v50cb78ae1b = (uint8_t *)malloc(0x4);
    fill(v50cb78ae1b, 0x4, (OHCI_ISO_TD_v8024532000 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb476998daf + 0x8, 0x4, (uint8_t *)v50cb78ae1b);
    free(v50cb78ae1b);
    goto v1f626a97eb_out;
v1f626a97eb_out:;
    uint8_t *ve2b1c6c98f = (uint8_t *)malloc(0x4);
    fill(ve2b1c6c98f, 0x4, OHCI_ED_vb476998daf, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vb476998daf + 0xc, 0x4, (uint8_t *)ve2b1c6c98f);
    free(ve2b1c6c98f);
    uint8_t *vd6ab5c6860 = (uint8_t *)malloc(0x4);
    fill(vd6ab5c6860, 0x4, OHCI_ED_vb476998daf, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x54, 0x4, (uint8_t *)vd6ab5c6860);
    free(vd6ab5c6860);
    goto v689c0559bf_out;
v689c0559bf_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v679b29e8c0_0; break;
    }
v679b29e8c0_0:;
    stateful_free(OHCI_ED_vcda6a32645);
    OHCI_ED_vcda6a32645 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vcda6a32645 = 0x%lx\n", OHCI_ED_vcda6a32645);
    uint8_t *v23bae9a976 = (uint8_t *)malloc(0x4);
    fill(v23bae9a976, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vcda6a32645 + 0x0, 0x4, (uint8_t *)v23bae9a976);
    free(v23bae9a976);
    uint8_t *v5132a7635a = (uint8_t *)malloc(0x4);
    fill(v5132a7635a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vcda6a32645 + 0x4, 0x4, (uint8_t *)v5132a7635a);
    free(v5132a7635a);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v6480fdc0f1_0; break;
        case 1: goto v6480fdc0f1_1; break;
    }
v6480fdc0f1_0:;
    stateful_free(OHCI_TD_v8cea309b49);
    OHCI_TD_v8cea309b49 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v8cea309b49 = 0x%lx\n", OHCI_TD_v8cea309b49);
    uint8_t *v10ca65f479 = (uint8_t *)malloc(0x4);
    fill(v10ca65f479, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8cea309b49 + 0x0, 0x4, (uint8_t *)v10ca65f479);
    free(v10ca65f479);
    uint8_t *v346bdeda13 = (uint8_t *)malloc(0x4);
    fill(v346bdeda13, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8cea309b49 + 0x4, 0x4, (uint8_t *)v346bdeda13);
    free(v346bdeda13);
    uint8_t *v5b289a8432 = (uint8_t *)malloc(0x4);
    fill(v5b289a8432, 0x4, (OHCI_TD_v8cea309b49 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8cea309b49 + 0x8, 0x4, (uint8_t *)v5b289a8432);
    free(v5b289a8432);
    uint8_t *v5834aeaf0f = (uint8_t *)malloc(0x4);
    fill(v5834aeaf0f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v8cea309b49 + 0xc, 0x4, (uint8_t *)v5834aeaf0f);
    free(v5834aeaf0f);
    uint8_t *va8f7ce9125 = (uint8_t *)malloc(0x4);
    fill(va8f7ce9125, 0x4, (OHCI_TD_v8cea309b49 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vcda6a32645 + 0x8, 0x4, (uint8_t *)va8f7ce9125);
    free(va8f7ce9125);
    goto v6480fdc0f1_out;
v6480fdc0f1_1:;
    stateful_free(OHCI_ISO_TD_v74b7061c09);
    OHCI_ISO_TD_v74b7061c09 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v74b7061c09 = 0x%lx\n", OHCI_ISO_TD_v74b7061c09);
    uint8_t *v86c2ae063f = (uint8_t *)malloc(0x4);
    fill(v86c2ae063f, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x0, 0x4, (uint8_t *)v86c2ae063f);
    free(v86c2ae063f);
    uint8_t *v1978be2860 = (uint8_t *)malloc(0x4);
    fill(v1978be2860, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x4, 0x4, (uint8_t *)v1978be2860);
    free(v1978be2860);
    uint8_t *vd997e4bf20 = (uint8_t *)malloc(0x4);
    fill(vd997e4bf20, 0x4, (OHCI_ISO_TD_v74b7061c09 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x8, 0x4, (uint8_t *)vd997e4bf20);
    free(vd997e4bf20);
    uint8_t *v92931f544d = (uint8_t *)malloc(0x4);
    fill(v92931f544d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0xc, 0x4, (uint8_t *)v92931f544d);
    free(v92931f544d);
    stateful_free(buffer_v1eb95739b8);
    buffer_v1eb95739b8 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1eb95739b8 = 0x%lx\n", buffer_v1eb95739b8);
    uint8_t *v2d6d9fa998 = (uint8_t *)malloc(0x100);
    fill(v2d6d9fa998, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1eb95739b8 + 0x0, 0x100, (uint8_t *)v2d6d9fa998);
    free(v2d6d9fa998);
    uint8_t *v2da0ca27fb = (uint8_t *)malloc(0x2);
    fill(v2da0ca27fb, 0x2, (buffer_v1eb95739b8 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x10, 0x2, (uint8_t *)v2da0ca27fb);
    free(v2da0ca27fb);
    stateful_free(buffer_v7efa2faf58);
    buffer_v7efa2faf58 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v7efa2faf58 = 0x%lx\n", buffer_v7efa2faf58);
    uint8_t *vd04227b3e9 = (uint8_t *)malloc(0x100);
    fill(vd04227b3e9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v7efa2faf58 + 0x0, 0x100, (uint8_t *)vd04227b3e9);
    free(vd04227b3e9);
    uint8_t *vc29e1c4f19 = (uint8_t *)malloc(0x2);
    fill(vc29e1c4f19, 0x2, (buffer_v7efa2faf58 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x12, 0x2, (uint8_t *)vc29e1c4f19);
    free(vc29e1c4f19);
    stateful_free(buffer_v8c626a9fee);
    buffer_v8c626a9fee = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8c626a9fee = 0x%lx\n", buffer_v8c626a9fee);
    uint8_t *v446fae5b7a = (uint8_t *)malloc(0x100);
    fill(v446fae5b7a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8c626a9fee + 0x0, 0x100, (uint8_t *)v446fae5b7a);
    free(v446fae5b7a);
    uint8_t *vbf3d445f87 = (uint8_t *)malloc(0x2);
    fill(vbf3d445f87, 0x2, (buffer_v8c626a9fee | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x14, 0x2, (uint8_t *)vbf3d445f87);
    free(vbf3d445f87);
    stateful_free(buffer_v8429aeae87);
    buffer_v8429aeae87 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8429aeae87 = 0x%lx\n", buffer_v8429aeae87);
    uint8_t *vf2d62fe0a0 = (uint8_t *)malloc(0x100);
    fill(vf2d62fe0a0, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8429aeae87 + 0x0, 0x100, (uint8_t *)vf2d62fe0a0);
    free(vf2d62fe0a0);
    uint8_t *ve0c260f655 = (uint8_t *)malloc(0x2);
    fill(ve0c260f655, 0x2, (buffer_v8429aeae87 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x16, 0x2, (uint8_t *)ve0c260f655);
    free(ve0c260f655);
    stateful_free(buffer_v402988fdf8);
    buffer_v402988fdf8 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v402988fdf8 = 0x%lx\n", buffer_v402988fdf8);
    uint8_t *v419a661eb3 = (uint8_t *)malloc(0x100);
    fill(v419a661eb3, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v402988fdf8 + 0x0, 0x100, (uint8_t *)v419a661eb3);
    free(v419a661eb3);
    uint8_t *v43a1a51e1a = (uint8_t *)malloc(0x2);
    fill(v43a1a51e1a, 0x2, (buffer_v402988fdf8 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x18, 0x2, (uint8_t *)v43a1a51e1a);
    free(v43a1a51e1a);
    stateful_free(buffer_vecadbb86f1);
    buffer_vecadbb86f1 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vecadbb86f1 = 0x%lx\n", buffer_vecadbb86f1);
    uint8_t *vabeca21d69 = (uint8_t *)malloc(0x100);
    fill(vabeca21d69, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vecadbb86f1 + 0x0, 0x100, (uint8_t *)vabeca21d69);
    free(vabeca21d69);
    uint8_t *v5df0ff7b75 = (uint8_t *)malloc(0x2);
    fill(v5df0ff7b75, 0x2, (buffer_vecadbb86f1 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x1a, 0x2, (uint8_t *)v5df0ff7b75);
    free(v5df0ff7b75);
    stateful_free(buffer_ve642965cde);
    buffer_ve642965cde = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve642965cde = 0x%lx\n", buffer_ve642965cde);
    uint8_t *vfc14b7ea6c = (uint8_t *)malloc(0x100);
    fill(vfc14b7ea6c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve642965cde + 0x0, 0x100, (uint8_t *)vfc14b7ea6c);
    free(vfc14b7ea6c);
    uint8_t *vaab8ef95a4 = (uint8_t *)malloc(0x2);
    fill(vaab8ef95a4, 0x2, (buffer_ve642965cde | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x1c, 0x2, (uint8_t *)vaab8ef95a4);
    free(vaab8ef95a4);
    stateful_free(buffer_vf3ca5f6427);
    buffer_vf3ca5f6427 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf3ca5f6427 = 0x%lx\n", buffer_vf3ca5f6427);
    uint8_t *va290f0f535 = (uint8_t *)malloc(0x100);
    fill(va290f0f535, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf3ca5f6427 + 0x0, 0x100, (uint8_t *)va290f0f535);
    free(va290f0f535);
    uint8_t *v36cc85db13 = (uint8_t *)malloc(0x2);
    fill(v36cc85db13, 0x2, (buffer_vf3ca5f6427 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v74b7061c09 + 0x1e, 0x2, (uint8_t *)v36cc85db13);
    free(v36cc85db13);
    uint8_t *v15ea9628ee = (uint8_t *)malloc(0x4);
    fill(v15ea9628ee, 0x4, (OHCI_ISO_TD_v74b7061c09 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vcda6a32645 + 0x8, 0x4, (uint8_t *)v15ea9628ee);
    free(v15ea9628ee);
    goto v6480fdc0f1_out;
v6480fdc0f1_out:;
    uint8_t *v85505347a6 = (uint8_t *)malloc(0x4);
    fill(v85505347a6, 0x4, OHCI_ED_vcda6a32645, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vcda6a32645 + 0xc, 0x4, (uint8_t *)v85505347a6);
    free(v85505347a6);
    uint8_t *vc07f6b5e01 = (uint8_t *)malloc(0x4);
    fill(vc07f6b5e01, 0x4, OHCI_ED_vcda6a32645, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x58, 0x4, (uint8_t *)vc07f6b5e01);
    free(vc07f6b5e01);
    goto v679b29e8c0_out;
v679b29e8c0_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v52b049944b_0; break;
    }
v52b049944b_0:;
    stateful_free(OHCI_ED_vfccae6b86e);
    OHCI_ED_vfccae6b86e = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vfccae6b86e = 0x%lx\n", OHCI_ED_vfccae6b86e);
    uint8_t *v983af1862d = (uint8_t *)malloc(0x4);
    fill(v983af1862d, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vfccae6b86e + 0x0, 0x4, (uint8_t *)v983af1862d);
    free(v983af1862d);
    uint8_t *v6ff41d25d0 = (uint8_t *)malloc(0x4);
    fill(v6ff41d25d0, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vfccae6b86e + 0x4, 0x4, (uint8_t *)v6ff41d25d0);
    free(v6ff41d25d0);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto vc9d0a7f400_0; break;
        case 1: goto vc9d0a7f400_1; break;
    }
vc9d0a7f400_0:;
    stateful_free(OHCI_TD_vb2975c6918);
    OHCI_TD_vb2975c6918 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vb2975c6918 = 0x%lx\n", OHCI_TD_vb2975c6918);
    uint8_t *va1e1ca35a4 = (uint8_t *)malloc(0x4);
    fill(va1e1ca35a4, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb2975c6918 + 0x0, 0x4, (uint8_t *)va1e1ca35a4);
    free(va1e1ca35a4);
    uint8_t *v88e985bddb = (uint8_t *)malloc(0x4);
    fill(v88e985bddb, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb2975c6918 + 0x4, 0x4, (uint8_t *)v88e985bddb);
    free(v88e985bddb);
    uint8_t *ve107e332a6 = (uint8_t *)malloc(0x4);
    fill(ve107e332a6, 0x4, (OHCI_TD_vb2975c6918 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb2975c6918 + 0x8, 0x4, (uint8_t *)ve107e332a6);
    free(ve107e332a6);
    uint8_t *v8be0b17669 = (uint8_t *)malloc(0x4);
    fill(v8be0b17669, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb2975c6918 + 0xc, 0x4, (uint8_t *)v8be0b17669);
    free(v8be0b17669);
    uint8_t *v8aab78d665 = (uint8_t *)malloc(0x4);
    fill(v8aab78d665, 0x4, (OHCI_TD_vb2975c6918 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vfccae6b86e + 0x8, 0x4, (uint8_t *)v8aab78d665);
    free(v8aab78d665);
    goto vc9d0a7f400_out;
vc9d0a7f400_1:;
    stateful_free(OHCI_ISO_TD_v300a21879c);
    OHCI_ISO_TD_v300a21879c = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v300a21879c = 0x%lx\n", OHCI_ISO_TD_v300a21879c);
    uint8_t *ve02204a089 = (uint8_t *)malloc(0x4);
    fill(ve02204a089, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x0, 0x4, (uint8_t *)ve02204a089);
    free(ve02204a089);
    uint8_t *v4329e4990d = (uint8_t *)malloc(0x4);
    fill(v4329e4990d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x4, 0x4, (uint8_t *)v4329e4990d);
    free(v4329e4990d);
    uint8_t *vd10f74b56f = (uint8_t *)malloc(0x4);
    fill(vd10f74b56f, 0x4, (OHCI_ISO_TD_v300a21879c & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x8, 0x4, (uint8_t *)vd10f74b56f);
    free(vd10f74b56f);
    uint8_t *v6810ae359c = (uint8_t *)malloc(0x4);
    fill(v6810ae359c, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0xc, 0x4, (uint8_t *)v6810ae359c);
    free(v6810ae359c);
    stateful_free(buffer_vefa2ce128c);
    buffer_vefa2ce128c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vefa2ce128c = 0x%lx\n", buffer_vefa2ce128c);
    uint8_t *vbd48b2587d = (uint8_t *)malloc(0x100);
    fill(vbd48b2587d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vefa2ce128c + 0x0, 0x100, (uint8_t *)vbd48b2587d);
    free(vbd48b2587d);
    uint8_t *vb77fd03992 = (uint8_t *)malloc(0x2);
    fill(vb77fd03992, 0x2, (buffer_vefa2ce128c | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x10, 0x2, (uint8_t *)vb77fd03992);
    free(vb77fd03992);
    stateful_free(buffer_v878f40ed2c);
    buffer_v878f40ed2c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v878f40ed2c = 0x%lx\n", buffer_v878f40ed2c);
    uint8_t *vb083d5727c = (uint8_t *)malloc(0x100);
    fill(vb083d5727c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v878f40ed2c + 0x0, 0x100, (uint8_t *)vb083d5727c);
    free(vb083d5727c);
    uint8_t *vb6cfa3f8fc = (uint8_t *)malloc(0x2);
    fill(vb6cfa3f8fc, 0x2, (buffer_v878f40ed2c | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x12, 0x2, (uint8_t *)vb6cfa3f8fc);
    free(vb6cfa3f8fc);
    stateful_free(buffer_v94665d4528);
    buffer_v94665d4528 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v94665d4528 = 0x%lx\n", buffer_v94665d4528);
    uint8_t *v4a4d209173 = (uint8_t *)malloc(0x100);
    fill(v4a4d209173, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v94665d4528 + 0x0, 0x100, (uint8_t *)v4a4d209173);
    free(v4a4d209173);
    uint8_t *v607211ba7e = (uint8_t *)malloc(0x2);
    fill(v607211ba7e, 0x2, (buffer_v94665d4528 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x14, 0x2, (uint8_t *)v607211ba7e);
    free(v607211ba7e);
    stateful_free(buffer_vc1378e7562);
    buffer_vc1378e7562 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc1378e7562 = 0x%lx\n", buffer_vc1378e7562);
    uint8_t *ve15605ee96 = (uint8_t *)malloc(0x100);
    fill(ve15605ee96, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc1378e7562 + 0x0, 0x100, (uint8_t *)ve15605ee96);
    free(ve15605ee96);
    uint8_t *v88ace67d44 = (uint8_t *)malloc(0x2);
    fill(v88ace67d44, 0x2, (buffer_vc1378e7562 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x16, 0x2, (uint8_t *)v88ace67d44);
    free(v88ace67d44);
    stateful_free(buffer_v4fb7c3bb44);
    buffer_v4fb7c3bb44 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4fb7c3bb44 = 0x%lx\n", buffer_v4fb7c3bb44);
    uint8_t *v41e9b9ce17 = (uint8_t *)malloc(0x100);
    fill(v41e9b9ce17, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4fb7c3bb44 + 0x0, 0x100, (uint8_t *)v41e9b9ce17);
    free(v41e9b9ce17);
    uint8_t *v8f22c54863 = (uint8_t *)malloc(0x2);
    fill(v8f22c54863, 0x2, (buffer_v4fb7c3bb44 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x18, 0x2, (uint8_t *)v8f22c54863);
    free(v8f22c54863);
    stateful_free(buffer_vf23db30647);
    buffer_vf23db30647 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf23db30647 = 0x%lx\n", buffer_vf23db30647);
    uint8_t *vc634740006 = (uint8_t *)malloc(0x100);
    fill(vc634740006, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf23db30647 + 0x0, 0x100, (uint8_t *)vc634740006);
    free(vc634740006);
    uint8_t *vcdd48f958b = (uint8_t *)malloc(0x2);
    fill(vcdd48f958b, 0x2, (buffer_vf23db30647 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x1a, 0x2, (uint8_t *)vcdd48f958b);
    free(vcdd48f958b);
    stateful_free(buffer_vfd768f6351);
    buffer_vfd768f6351 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfd768f6351 = 0x%lx\n", buffer_vfd768f6351);
    uint8_t *v56451859fd = (uint8_t *)malloc(0x100);
    fill(v56451859fd, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfd768f6351 + 0x0, 0x100, (uint8_t *)v56451859fd);
    free(v56451859fd);
    uint8_t *v7e4ab70a36 = (uint8_t *)malloc(0x2);
    fill(v7e4ab70a36, 0x2, (buffer_vfd768f6351 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x1c, 0x2, (uint8_t *)v7e4ab70a36);
    free(v7e4ab70a36);
    stateful_free(buffer_vcaa0a6796e);
    buffer_vcaa0a6796e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcaa0a6796e = 0x%lx\n", buffer_vcaa0a6796e);
    uint8_t *v7596c63258 = (uint8_t *)malloc(0x100);
    fill(v7596c63258, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcaa0a6796e + 0x0, 0x100, (uint8_t *)v7596c63258);
    free(v7596c63258);
    uint8_t *v461aac8488 = (uint8_t *)malloc(0x2);
    fill(v461aac8488, 0x2, (buffer_vcaa0a6796e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v300a21879c + 0x1e, 0x2, (uint8_t *)v461aac8488);
    free(v461aac8488);
    uint8_t *vf48a7aeb10 = (uint8_t *)malloc(0x4);
    fill(vf48a7aeb10, 0x4, (OHCI_ISO_TD_v300a21879c & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vfccae6b86e + 0x8, 0x4, (uint8_t *)vf48a7aeb10);
    free(vf48a7aeb10);
    goto vc9d0a7f400_out;
vc9d0a7f400_out:;
    uint8_t *v9ba73f075d = (uint8_t *)malloc(0x4);
    fill(v9ba73f075d, 0x4, OHCI_ED_vfccae6b86e, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vfccae6b86e + 0xc, 0x4, (uint8_t *)v9ba73f075d);
    free(v9ba73f075d);
    uint8_t *v845c0808ce = (uint8_t *)malloc(0x4);
    fill(v845c0808ce, 0x4, OHCI_ED_vfccae6b86e, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x5c, 0x4, (uint8_t *)v845c0808ce);
    free(v845c0808ce);
    goto v52b049944b_out;
v52b049944b_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v903374bfc8_0; break;
    }
v903374bfc8_0:;
    stateful_free(OHCI_ED_ve65a3ae43a);
    OHCI_ED_ve65a3ae43a = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_ve65a3ae43a = 0x%lx\n", OHCI_ED_ve65a3ae43a);
    uint8_t *v395ad1897a = (uint8_t *)malloc(0x4);
    fill(v395ad1897a, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve65a3ae43a + 0x0, 0x4, (uint8_t *)v395ad1897a);
    free(v395ad1897a);
    uint8_t *vd1ebfdb889 = (uint8_t *)malloc(0x4);
    fill(vd1ebfdb889, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve65a3ae43a + 0x4, 0x4, (uint8_t *)vd1ebfdb889);
    free(vd1ebfdb889);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto va1832fdb31_0; break;
        case 1: goto va1832fdb31_1; break;
    }
va1832fdb31_0:;
    stateful_free(OHCI_TD_vb3390a6ea0);
    OHCI_TD_vb3390a6ea0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vb3390a6ea0 = 0x%lx\n", OHCI_TD_vb3390a6ea0);
    uint8_t *v50fb1ee493 = (uint8_t *)malloc(0x4);
    fill(v50fb1ee493, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3390a6ea0 + 0x0, 0x4, (uint8_t *)v50fb1ee493);
    free(v50fb1ee493);
    uint8_t *v7a5d92dc6d = (uint8_t *)malloc(0x4);
    fill(v7a5d92dc6d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3390a6ea0 + 0x4, 0x4, (uint8_t *)v7a5d92dc6d);
    free(v7a5d92dc6d);
    uint8_t *v7aefa28728 = (uint8_t *)malloc(0x4);
    fill(v7aefa28728, 0x4, (OHCI_TD_vb3390a6ea0 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3390a6ea0 + 0x8, 0x4, (uint8_t *)v7aefa28728);
    free(v7aefa28728);
    uint8_t *v31245fcbc6 = (uint8_t *)malloc(0x4);
    fill(v31245fcbc6, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vb3390a6ea0 + 0xc, 0x4, (uint8_t *)v31245fcbc6);
    free(v31245fcbc6);
    uint8_t *vd8f9a9cc7e = (uint8_t *)malloc(0x4);
    fill(vd8f9a9cc7e, 0x4, (OHCI_TD_vb3390a6ea0 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve65a3ae43a + 0x8, 0x4, (uint8_t *)vd8f9a9cc7e);
    free(vd8f9a9cc7e);
    goto va1832fdb31_out;
va1832fdb31_1:;
    stateful_free(OHCI_ISO_TD_v4643d7053d);
    OHCI_ISO_TD_v4643d7053d = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v4643d7053d = 0x%lx\n", OHCI_ISO_TD_v4643d7053d);
    uint8_t *v1e7c625229 = (uint8_t *)malloc(0x4);
    fill(v1e7c625229, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x0, 0x4, (uint8_t *)v1e7c625229);
    free(v1e7c625229);
    uint8_t *vf4564fe750 = (uint8_t *)malloc(0x4);
    fill(vf4564fe750, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x4, 0x4, (uint8_t *)vf4564fe750);
    free(vf4564fe750);
    uint8_t *v9e66466c15 = (uint8_t *)malloc(0x4);
    fill(v9e66466c15, 0x4, (OHCI_ISO_TD_v4643d7053d & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x8, 0x4, (uint8_t *)v9e66466c15);
    free(v9e66466c15);
    uint8_t *vfa35444be9 = (uint8_t *)malloc(0x4);
    fill(vfa35444be9, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0xc, 0x4, (uint8_t *)vfa35444be9);
    free(vfa35444be9);
    stateful_free(buffer_vb47a5dcecf);
    buffer_vb47a5dcecf = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb47a5dcecf = 0x%lx\n", buffer_vb47a5dcecf);
    uint8_t *v7ecf1da5a3 = (uint8_t *)malloc(0x100);
    fill(v7ecf1da5a3, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb47a5dcecf + 0x0, 0x100, (uint8_t *)v7ecf1da5a3);
    free(v7ecf1da5a3);
    uint8_t *v332177e4aa = (uint8_t *)malloc(0x2);
    fill(v332177e4aa, 0x2, (buffer_vb47a5dcecf | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x10, 0x2, (uint8_t *)v332177e4aa);
    free(v332177e4aa);
    stateful_free(buffer_v30331476f5);
    buffer_v30331476f5 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v30331476f5 = 0x%lx\n", buffer_v30331476f5);
    uint8_t *v4813704b04 = (uint8_t *)malloc(0x100);
    fill(v4813704b04, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v30331476f5 + 0x0, 0x100, (uint8_t *)v4813704b04);
    free(v4813704b04);
    uint8_t *vc2ed22dd2a = (uint8_t *)malloc(0x2);
    fill(vc2ed22dd2a, 0x2, (buffer_v30331476f5 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x12, 0x2, (uint8_t *)vc2ed22dd2a);
    free(vc2ed22dd2a);
    stateful_free(buffer_vec6e61bd70);
    buffer_vec6e61bd70 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vec6e61bd70 = 0x%lx\n", buffer_vec6e61bd70);
    uint8_t *ve90db4fbe9 = (uint8_t *)malloc(0x100);
    fill(ve90db4fbe9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vec6e61bd70 + 0x0, 0x100, (uint8_t *)ve90db4fbe9);
    free(ve90db4fbe9);
    uint8_t *vaa6a9e7c13 = (uint8_t *)malloc(0x2);
    fill(vaa6a9e7c13, 0x2, (buffer_vec6e61bd70 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x14, 0x2, (uint8_t *)vaa6a9e7c13);
    free(vaa6a9e7c13);
    stateful_free(buffer_vf0bd740565);
    buffer_vf0bd740565 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf0bd740565 = 0x%lx\n", buffer_vf0bd740565);
    uint8_t *v3500002679 = (uint8_t *)malloc(0x100);
    fill(v3500002679, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf0bd740565 + 0x0, 0x100, (uint8_t *)v3500002679);
    free(v3500002679);
    uint8_t *vac29c1bfb0 = (uint8_t *)malloc(0x2);
    fill(vac29c1bfb0, 0x2, (buffer_vf0bd740565 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x16, 0x2, (uint8_t *)vac29c1bfb0);
    free(vac29c1bfb0);
    stateful_free(buffer_vc602bd20c1);
    buffer_vc602bd20c1 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc602bd20c1 = 0x%lx\n", buffer_vc602bd20c1);
    uint8_t *vd9249e4508 = (uint8_t *)malloc(0x100);
    fill(vd9249e4508, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc602bd20c1 + 0x0, 0x100, (uint8_t *)vd9249e4508);
    free(vd9249e4508);
    uint8_t *v99fff4ba97 = (uint8_t *)malloc(0x2);
    fill(v99fff4ba97, 0x2, (buffer_vc602bd20c1 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x18, 0x2, (uint8_t *)v99fff4ba97);
    free(v99fff4ba97);
    stateful_free(buffer_v53e836639c);
    buffer_v53e836639c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v53e836639c = 0x%lx\n", buffer_v53e836639c);
    uint8_t *vee95755b0a = (uint8_t *)malloc(0x100);
    fill(vee95755b0a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v53e836639c + 0x0, 0x100, (uint8_t *)vee95755b0a);
    free(vee95755b0a);
    uint8_t *v81a486b6b8 = (uint8_t *)malloc(0x2);
    fill(v81a486b6b8, 0x2, (buffer_v53e836639c | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x1a, 0x2, (uint8_t *)v81a486b6b8);
    free(v81a486b6b8);
    stateful_free(buffer_v7b6e28f4e9);
    buffer_v7b6e28f4e9 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v7b6e28f4e9 = 0x%lx\n", buffer_v7b6e28f4e9);
    uint8_t *vc9cf3501af = (uint8_t *)malloc(0x100);
    fill(vc9cf3501af, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v7b6e28f4e9 + 0x0, 0x100, (uint8_t *)vc9cf3501af);
    free(vc9cf3501af);
    uint8_t *vcd15c2fa38 = (uint8_t *)malloc(0x2);
    fill(vcd15c2fa38, 0x2, (buffer_v7b6e28f4e9 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x1c, 0x2, (uint8_t *)vcd15c2fa38);
    free(vcd15c2fa38);
    stateful_free(buffer_vc334f55802);
    buffer_vc334f55802 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc334f55802 = 0x%lx\n", buffer_vc334f55802);
    uint8_t *v643d0eb789 = (uint8_t *)malloc(0x100);
    fill(v643d0eb789, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc334f55802 + 0x0, 0x100, (uint8_t *)v643d0eb789);
    free(v643d0eb789);
    uint8_t *v7038f3af2f = (uint8_t *)malloc(0x2);
    fill(v7038f3af2f, 0x2, (buffer_vc334f55802 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v4643d7053d + 0x1e, 0x2, (uint8_t *)v7038f3af2f);
    free(v7038f3af2f);
    uint8_t *v96831b09e8 = (uint8_t *)malloc(0x4);
    fill(v96831b09e8, 0x4, (OHCI_ISO_TD_v4643d7053d & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve65a3ae43a + 0x8, 0x4, (uint8_t *)v96831b09e8);
    free(v96831b09e8);
    goto va1832fdb31_out;
va1832fdb31_out:;
    uint8_t *vf835d15b4d = (uint8_t *)malloc(0x4);
    fill(vf835d15b4d, 0x4, OHCI_ED_ve65a3ae43a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_ve65a3ae43a + 0xc, 0x4, (uint8_t *)vf835d15b4d);
    free(vf835d15b4d);
    uint8_t *vf0f5e32e22 = (uint8_t *)malloc(0x4);
    fill(vf0f5e32e22, 0x4, OHCI_ED_ve65a3ae43a, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x60, 0x4, (uint8_t *)vf0f5e32e22);
    free(vf0f5e32e22);
    goto v903374bfc8_out;
v903374bfc8_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vc329870a33_0; break;
    }
vc329870a33_0:;
    stateful_free(OHCI_ED_v4741ee56b5);
    OHCI_ED_v4741ee56b5 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v4741ee56b5 = 0x%lx\n", OHCI_ED_v4741ee56b5);
    uint8_t *v9f995992d3 = (uint8_t *)malloc(0x4);
    fill(v9f995992d3, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4741ee56b5 + 0x0, 0x4, (uint8_t *)v9f995992d3);
    free(v9f995992d3);
    uint8_t *vdd5c4caf1a = (uint8_t *)malloc(0x4);
    fill(vdd5c4caf1a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4741ee56b5 + 0x4, 0x4, (uint8_t *)vdd5c4caf1a);
    free(vdd5c4caf1a);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v6389bd3d26_0; break;
        case 1: goto v6389bd3d26_1; break;
    }
v6389bd3d26_0:;
    stateful_free(OHCI_TD_vaa5658322a);
    OHCI_TD_vaa5658322a = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vaa5658322a = 0x%lx\n", OHCI_TD_vaa5658322a);
    uint8_t *v8a6a7ef20a = (uint8_t *)malloc(0x4);
    fill(v8a6a7ef20a, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaa5658322a + 0x0, 0x4, (uint8_t *)v8a6a7ef20a);
    free(v8a6a7ef20a);
    uint8_t *v74af7dc29c = (uint8_t *)malloc(0x4);
    fill(v74af7dc29c, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaa5658322a + 0x4, 0x4, (uint8_t *)v74af7dc29c);
    free(v74af7dc29c);
    uint8_t *vc33f5e647d = (uint8_t *)malloc(0x4);
    fill(vc33f5e647d, 0x4, (OHCI_TD_vaa5658322a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaa5658322a + 0x8, 0x4, (uint8_t *)vc33f5e647d);
    free(vc33f5e647d);
    uint8_t *v79b638c804 = (uint8_t *)malloc(0x4);
    fill(v79b638c804, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vaa5658322a + 0xc, 0x4, (uint8_t *)v79b638c804);
    free(v79b638c804);
    uint8_t *vb6608cf3b2 = (uint8_t *)malloc(0x4);
    fill(vb6608cf3b2, 0x4, (OHCI_TD_vaa5658322a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4741ee56b5 + 0x8, 0x4, (uint8_t *)vb6608cf3b2);
    free(vb6608cf3b2);
    goto v6389bd3d26_out;
v6389bd3d26_1:;
    stateful_free(OHCI_ISO_TD_vdd6d47e490);
    OHCI_ISO_TD_vdd6d47e490 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_vdd6d47e490 = 0x%lx\n", OHCI_ISO_TD_vdd6d47e490);
    uint8_t *vfff4f1fe0e = (uint8_t *)malloc(0x4);
    fill(vfff4f1fe0e, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x0, 0x4, (uint8_t *)vfff4f1fe0e);
    free(vfff4f1fe0e);
    uint8_t *vbacdd3134f = (uint8_t *)malloc(0x4);
    fill(vbacdd3134f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x4, 0x4, (uint8_t *)vbacdd3134f);
    free(vbacdd3134f);
    uint8_t *vfb3f57ab14 = (uint8_t *)malloc(0x4);
    fill(vfb3f57ab14, 0x4, (OHCI_ISO_TD_vdd6d47e490 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x8, 0x4, (uint8_t *)vfb3f57ab14);
    free(vfb3f57ab14);
    uint8_t *vf109bc67a0 = (uint8_t *)malloc(0x4);
    fill(vf109bc67a0, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0xc, 0x4, (uint8_t *)vf109bc67a0);
    free(vf109bc67a0);
    stateful_free(buffer_v12677895c6);
    buffer_v12677895c6 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v12677895c6 = 0x%lx\n", buffer_v12677895c6);
    uint8_t *v6776ede0d6 = (uint8_t *)malloc(0x100);
    fill(v6776ede0d6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v12677895c6 + 0x0, 0x100, (uint8_t *)v6776ede0d6);
    free(v6776ede0d6);
    uint8_t *v9c9f3fb2da = (uint8_t *)malloc(0x2);
    fill(v9c9f3fb2da, 0x2, (buffer_v12677895c6 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x10, 0x2, (uint8_t *)v9c9f3fb2da);
    free(v9c9f3fb2da);
    stateful_free(buffer_vb7a02afd30);
    buffer_vb7a02afd30 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb7a02afd30 = 0x%lx\n", buffer_vb7a02afd30);
    uint8_t *v5242b4a9d4 = (uint8_t *)malloc(0x100);
    fill(v5242b4a9d4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb7a02afd30 + 0x0, 0x100, (uint8_t *)v5242b4a9d4);
    free(v5242b4a9d4);
    uint8_t *v30b3ede86b = (uint8_t *)malloc(0x2);
    fill(v30b3ede86b, 0x2, (buffer_vb7a02afd30 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x12, 0x2, (uint8_t *)v30b3ede86b);
    free(v30b3ede86b);
    stateful_free(buffer_v8a663359ab);
    buffer_v8a663359ab = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8a663359ab = 0x%lx\n", buffer_v8a663359ab);
    uint8_t *vd842fc4436 = (uint8_t *)malloc(0x100);
    fill(vd842fc4436, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8a663359ab + 0x0, 0x100, (uint8_t *)vd842fc4436);
    free(vd842fc4436);
    uint8_t *vb8daa0d603 = (uint8_t *)malloc(0x2);
    fill(vb8daa0d603, 0x2, (buffer_v8a663359ab | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x14, 0x2, (uint8_t *)vb8daa0d603);
    free(vb8daa0d603);
    stateful_free(buffer_v67fece7f1f);
    buffer_v67fece7f1f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v67fece7f1f = 0x%lx\n", buffer_v67fece7f1f);
    uint8_t *v4e7d97c3f7 = (uint8_t *)malloc(0x100);
    fill(v4e7d97c3f7, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v67fece7f1f + 0x0, 0x100, (uint8_t *)v4e7d97c3f7);
    free(v4e7d97c3f7);
    uint8_t *vd56a5e5a26 = (uint8_t *)malloc(0x2);
    fill(vd56a5e5a26, 0x2, (buffer_v67fece7f1f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x16, 0x2, (uint8_t *)vd56a5e5a26);
    free(vd56a5e5a26);
    stateful_free(buffer_ve7bf9a9664);
    buffer_ve7bf9a9664 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve7bf9a9664 = 0x%lx\n", buffer_ve7bf9a9664);
    uint8_t *vc5fd4007b2 = (uint8_t *)malloc(0x100);
    fill(vc5fd4007b2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve7bf9a9664 + 0x0, 0x100, (uint8_t *)vc5fd4007b2);
    free(vc5fd4007b2);
    uint8_t *v79ffa86983 = (uint8_t *)malloc(0x2);
    fill(v79ffa86983, 0x2, (buffer_ve7bf9a9664 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x18, 0x2, (uint8_t *)v79ffa86983);
    free(v79ffa86983);
    stateful_free(buffer_v466bd06fa2);
    buffer_v466bd06fa2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v466bd06fa2 = 0x%lx\n", buffer_v466bd06fa2);
    uint8_t *v90b89776cb = (uint8_t *)malloc(0x100);
    fill(v90b89776cb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v466bd06fa2 + 0x0, 0x100, (uint8_t *)v90b89776cb);
    free(v90b89776cb);
    uint8_t *vb36ad7503b = (uint8_t *)malloc(0x2);
    fill(vb36ad7503b, 0x2, (buffer_v466bd06fa2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x1a, 0x2, (uint8_t *)vb36ad7503b);
    free(vb36ad7503b);
    stateful_free(buffer_v82f1240d4e);
    buffer_v82f1240d4e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v82f1240d4e = 0x%lx\n", buffer_v82f1240d4e);
    uint8_t *v60b9ad71e1 = (uint8_t *)malloc(0x100);
    fill(v60b9ad71e1, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v82f1240d4e + 0x0, 0x100, (uint8_t *)v60b9ad71e1);
    free(v60b9ad71e1);
    uint8_t *vb32c7f3c1c = (uint8_t *)malloc(0x2);
    fill(vb32c7f3c1c, 0x2, (buffer_v82f1240d4e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x1c, 0x2, (uint8_t *)vb32c7f3c1c);
    free(vb32c7f3c1c);
    stateful_free(buffer_ve91e70af22);
    buffer_ve91e70af22 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve91e70af22 = 0x%lx\n", buffer_ve91e70af22);
    uint8_t *va566875b71 = (uint8_t *)malloc(0x100);
    fill(va566875b71, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve91e70af22 + 0x0, 0x100, (uint8_t *)va566875b71);
    free(va566875b71);
    uint8_t *v68fe2bdbc7 = (uint8_t *)malloc(0x2);
    fill(v68fe2bdbc7, 0x2, (buffer_ve91e70af22 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_vdd6d47e490 + 0x1e, 0x2, (uint8_t *)v68fe2bdbc7);
    free(v68fe2bdbc7);
    uint8_t *v8abc0ff7c6 = (uint8_t *)malloc(0x4);
    fill(v8abc0ff7c6, 0x4, (OHCI_ISO_TD_vdd6d47e490 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4741ee56b5 + 0x8, 0x4, (uint8_t *)v8abc0ff7c6);
    free(v8abc0ff7c6);
    goto v6389bd3d26_out;
v6389bd3d26_out:;
    uint8_t *vea430e3ed5 = (uint8_t *)malloc(0x4);
    fill(vea430e3ed5, 0x4, OHCI_ED_v4741ee56b5, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v4741ee56b5 + 0xc, 0x4, (uint8_t *)vea430e3ed5);
    free(vea430e3ed5);
    uint8_t *vef0b16a908 = (uint8_t *)malloc(0x4);
    fill(vef0b16a908, 0x4, OHCI_ED_v4741ee56b5, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x64, 0x4, (uint8_t *)vef0b16a908);
    free(vef0b16a908);
    goto vc329870a33_out;
vc329870a33_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vb93c2989c3_0; break;
    }
vb93c2989c3_0:;
    stateful_free(OHCI_ED_vd020baee95);
    OHCI_ED_vd020baee95 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vd020baee95 = 0x%lx\n", OHCI_ED_vd020baee95);
    uint8_t *va2cfff86fa = (uint8_t *)malloc(0x4);
    fill(va2cfff86fa, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd020baee95 + 0x0, 0x4, (uint8_t *)va2cfff86fa);
    free(va2cfff86fa);
    uint8_t *v910f8f6673 = (uint8_t *)malloc(0x4);
    fill(v910f8f6673, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd020baee95 + 0x4, 0x4, (uint8_t *)v910f8f6673);
    free(v910f8f6673);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v8f4ed44214_0; break;
        case 1: goto v8f4ed44214_1; break;
    }
v8f4ed44214_0:;
    stateful_free(OHCI_TD_v43fd46ffd0);
    OHCI_TD_v43fd46ffd0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v43fd46ffd0 = 0x%lx\n", OHCI_TD_v43fd46ffd0);
    uint8_t *v6a2d3ae720 = (uint8_t *)malloc(0x4);
    fill(v6a2d3ae720, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v43fd46ffd0 + 0x0, 0x4, (uint8_t *)v6a2d3ae720);
    free(v6a2d3ae720);
    uint8_t *v9bb66d83b2 = (uint8_t *)malloc(0x4);
    fill(v9bb66d83b2, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v43fd46ffd0 + 0x4, 0x4, (uint8_t *)v9bb66d83b2);
    free(v9bb66d83b2);
    uint8_t *vf41e1facaf = (uint8_t *)malloc(0x4);
    fill(vf41e1facaf, 0x4, (OHCI_TD_v43fd46ffd0 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v43fd46ffd0 + 0x8, 0x4, (uint8_t *)vf41e1facaf);
    free(vf41e1facaf);
    uint8_t *v98f7bc1042 = (uint8_t *)malloc(0x4);
    fill(v98f7bc1042, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v43fd46ffd0 + 0xc, 0x4, (uint8_t *)v98f7bc1042);
    free(v98f7bc1042);
    uint8_t *vb4d3669cbb = (uint8_t *)malloc(0x4);
    fill(vb4d3669cbb, 0x4, (OHCI_TD_v43fd46ffd0 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd020baee95 + 0x8, 0x4, (uint8_t *)vb4d3669cbb);
    free(vb4d3669cbb);
    goto v8f4ed44214_out;
v8f4ed44214_1:;
    stateful_free(OHCI_ISO_TD_v42ce91c0cc);
    OHCI_ISO_TD_v42ce91c0cc = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v42ce91c0cc = 0x%lx\n", OHCI_ISO_TD_v42ce91c0cc);
    uint8_t *vbf5b52b17c = (uint8_t *)malloc(0x4);
    fill(vbf5b52b17c, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x0, 0x4, (uint8_t *)vbf5b52b17c);
    free(vbf5b52b17c);
    uint8_t *v2e21e8f7de = (uint8_t *)malloc(0x4);
    fill(v2e21e8f7de, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x4, 0x4, (uint8_t *)v2e21e8f7de);
    free(v2e21e8f7de);
    uint8_t *v1aa9210880 = (uint8_t *)malloc(0x4);
    fill(v1aa9210880, 0x4, (OHCI_ISO_TD_v42ce91c0cc & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x8, 0x4, (uint8_t *)v1aa9210880);
    free(v1aa9210880);
    uint8_t *v388beaf334 = (uint8_t *)malloc(0x4);
    fill(v388beaf334, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0xc, 0x4, (uint8_t *)v388beaf334);
    free(v388beaf334);
    stateful_free(buffer_vb56b9357b3);
    buffer_vb56b9357b3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb56b9357b3 = 0x%lx\n", buffer_vb56b9357b3);
    uint8_t *vac8f466a0e = (uint8_t *)malloc(0x100);
    fill(vac8f466a0e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb56b9357b3 + 0x0, 0x100, (uint8_t *)vac8f466a0e);
    free(vac8f466a0e);
    uint8_t *v4a14be4a41 = (uint8_t *)malloc(0x2);
    fill(v4a14be4a41, 0x2, (buffer_vb56b9357b3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x10, 0x2, (uint8_t *)v4a14be4a41);
    free(v4a14be4a41);
    stateful_free(buffer_v1257363cf2);
    buffer_v1257363cf2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1257363cf2 = 0x%lx\n", buffer_v1257363cf2);
    uint8_t *v8f7575fbe3 = (uint8_t *)malloc(0x100);
    fill(v8f7575fbe3, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1257363cf2 + 0x0, 0x100, (uint8_t *)v8f7575fbe3);
    free(v8f7575fbe3);
    uint8_t *vb9237f7e8a = (uint8_t *)malloc(0x2);
    fill(vb9237f7e8a, 0x2, (buffer_v1257363cf2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x12, 0x2, (uint8_t *)vb9237f7e8a);
    free(vb9237f7e8a);
    stateful_free(buffer_vca8033a7a5);
    buffer_vca8033a7a5 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vca8033a7a5 = 0x%lx\n", buffer_vca8033a7a5);
    uint8_t *v5b893524ae = (uint8_t *)malloc(0x100);
    fill(v5b893524ae, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vca8033a7a5 + 0x0, 0x100, (uint8_t *)v5b893524ae);
    free(v5b893524ae);
    uint8_t *v274a80a438 = (uint8_t *)malloc(0x2);
    fill(v274a80a438, 0x2, (buffer_vca8033a7a5 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x14, 0x2, (uint8_t *)v274a80a438);
    free(v274a80a438);
    stateful_free(buffer_v85b303d375);
    buffer_v85b303d375 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v85b303d375 = 0x%lx\n", buffer_v85b303d375);
    uint8_t *v7267eccc4e = (uint8_t *)malloc(0x100);
    fill(v7267eccc4e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v85b303d375 + 0x0, 0x100, (uint8_t *)v7267eccc4e);
    free(v7267eccc4e);
    uint8_t *v57db0c8b31 = (uint8_t *)malloc(0x2);
    fill(v57db0c8b31, 0x2, (buffer_v85b303d375 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x16, 0x2, (uint8_t *)v57db0c8b31);
    free(v57db0c8b31);
    stateful_free(buffer_v2287401ba7);
    buffer_v2287401ba7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2287401ba7 = 0x%lx\n", buffer_v2287401ba7);
    uint8_t *ve368fc63c9 = (uint8_t *)malloc(0x100);
    fill(ve368fc63c9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2287401ba7 + 0x0, 0x100, (uint8_t *)ve368fc63c9);
    free(ve368fc63c9);
    uint8_t *v63a081a26e = (uint8_t *)malloc(0x2);
    fill(v63a081a26e, 0x2, (buffer_v2287401ba7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x18, 0x2, (uint8_t *)v63a081a26e);
    free(v63a081a26e);
    stateful_free(buffer_v8e50c79ac5);
    buffer_v8e50c79ac5 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v8e50c79ac5 = 0x%lx\n", buffer_v8e50c79ac5);
    uint8_t *v4e94228ca6 = (uint8_t *)malloc(0x100);
    fill(v4e94228ca6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v8e50c79ac5 + 0x0, 0x100, (uint8_t *)v4e94228ca6);
    free(v4e94228ca6);
    uint8_t *v607544b56e = (uint8_t *)malloc(0x2);
    fill(v607544b56e, 0x2, (buffer_v8e50c79ac5 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x1a, 0x2, (uint8_t *)v607544b56e);
    free(v607544b56e);
    stateful_free(buffer_v57e7ef7b84);
    buffer_v57e7ef7b84 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v57e7ef7b84 = 0x%lx\n", buffer_v57e7ef7b84);
    uint8_t *v9d769420e4 = (uint8_t *)malloc(0x100);
    fill(v9d769420e4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v57e7ef7b84 + 0x0, 0x100, (uint8_t *)v9d769420e4);
    free(v9d769420e4);
    uint8_t *vefba87f598 = (uint8_t *)malloc(0x2);
    fill(vefba87f598, 0x2, (buffer_v57e7ef7b84 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x1c, 0x2, (uint8_t *)vefba87f598);
    free(vefba87f598);
    stateful_free(buffer_vc65d8e4ed0);
    buffer_vc65d8e4ed0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc65d8e4ed0 = 0x%lx\n", buffer_vc65d8e4ed0);
    uint8_t *vd171a79811 = (uint8_t *)malloc(0x100);
    fill(vd171a79811, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc65d8e4ed0 + 0x0, 0x100, (uint8_t *)vd171a79811);
    free(vd171a79811);
    uint8_t *vb55dc17a05 = (uint8_t *)malloc(0x2);
    fill(vb55dc17a05, 0x2, (buffer_vc65d8e4ed0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v42ce91c0cc + 0x1e, 0x2, (uint8_t *)vb55dc17a05);
    free(vb55dc17a05);
    uint8_t *v64426c12d8 = (uint8_t *)malloc(0x4);
    fill(v64426c12d8, 0x4, (OHCI_ISO_TD_v42ce91c0cc & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd020baee95 + 0x8, 0x4, (uint8_t *)v64426c12d8);
    free(v64426c12d8);
    goto v8f4ed44214_out;
v8f4ed44214_out:;
    uint8_t *v9a4472e2de = (uint8_t *)malloc(0x4);
    fill(v9a4472e2de, 0x4, OHCI_ED_vd020baee95, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd020baee95 + 0xc, 0x4, (uint8_t *)v9a4472e2de);
    free(v9a4472e2de);
    uint8_t *ve188bdf5d2 = (uint8_t *)malloc(0x4);
    fill(ve188bdf5d2, 0x4, OHCI_ED_vd020baee95, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x68, 0x4, (uint8_t *)ve188bdf5d2);
    free(ve188bdf5d2);
    goto vb93c2989c3_out;
vb93c2989c3_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v91fd7d4a5a_0; break;
    }
v91fd7d4a5a_0:;
    stateful_free(OHCI_ED_vd560e64c55);
    OHCI_ED_vd560e64c55 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vd560e64c55 = 0x%lx\n", OHCI_ED_vd560e64c55);
    uint8_t *vaaffef8783 = (uint8_t *)malloc(0x4);
    fill(vaaffef8783, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd560e64c55 + 0x0, 0x4, (uint8_t *)vaaffef8783);
    free(vaaffef8783);
    uint8_t *v2c92f7725f = (uint8_t *)malloc(0x4);
    fill(v2c92f7725f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd560e64c55 + 0x4, 0x4, (uint8_t *)v2c92f7725f);
    free(v2c92f7725f);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v22d801701e_0; break;
        case 1: goto v22d801701e_1; break;
    }
v22d801701e_0:;
    stateful_free(OHCI_TD_v5d156b6ece);
    OHCI_TD_v5d156b6ece = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v5d156b6ece = 0x%lx\n", OHCI_TD_v5d156b6ece);
    uint8_t *vba4fa3cf84 = (uint8_t *)malloc(0x4);
    fill(vba4fa3cf84, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v5d156b6ece + 0x0, 0x4, (uint8_t *)vba4fa3cf84);
    free(vba4fa3cf84);
    uint8_t *vbb7e21bfdb = (uint8_t *)malloc(0x4);
    fill(vbb7e21bfdb, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v5d156b6ece + 0x4, 0x4, (uint8_t *)vbb7e21bfdb);
    free(vbb7e21bfdb);
    uint8_t *v1602a43750 = (uint8_t *)malloc(0x4);
    fill(v1602a43750, 0x4, (OHCI_TD_v5d156b6ece & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v5d156b6ece + 0x8, 0x4, (uint8_t *)v1602a43750);
    free(v1602a43750);
    uint8_t *v39fd3acdd5 = (uint8_t *)malloc(0x4);
    fill(v39fd3acdd5, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v5d156b6ece + 0xc, 0x4, (uint8_t *)v39fd3acdd5);
    free(v39fd3acdd5);
    uint8_t *v2e0d14ad88 = (uint8_t *)malloc(0x4);
    fill(v2e0d14ad88, 0x4, (OHCI_TD_v5d156b6ece & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd560e64c55 + 0x8, 0x4, (uint8_t *)v2e0d14ad88);
    free(v2e0d14ad88);
    goto v22d801701e_out;
v22d801701e_1:;
    stateful_free(OHCI_ISO_TD_v20068c1cbb);
    OHCI_ISO_TD_v20068c1cbb = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v20068c1cbb = 0x%lx\n", OHCI_ISO_TD_v20068c1cbb);
    uint8_t *v52b3fb3455 = (uint8_t *)malloc(0x4);
    fill(v52b3fb3455, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x0, 0x4, (uint8_t *)v52b3fb3455);
    free(v52b3fb3455);
    uint8_t *va2af96924d = (uint8_t *)malloc(0x4);
    fill(va2af96924d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x4, 0x4, (uint8_t *)va2af96924d);
    free(va2af96924d);
    uint8_t *va3d2f88e9e = (uint8_t *)malloc(0x4);
    fill(va3d2f88e9e, 0x4, (OHCI_ISO_TD_v20068c1cbb & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x8, 0x4, (uint8_t *)va3d2f88e9e);
    free(va3d2f88e9e);
    uint8_t *v3df629a3e3 = (uint8_t *)malloc(0x4);
    fill(v3df629a3e3, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0xc, 0x4, (uint8_t *)v3df629a3e3);
    free(v3df629a3e3);
    stateful_free(buffer_vb4cba0a317);
    buffer_vb4cba0a317 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vb4cba0a317 = 0x%lx\n", buffer_vb4cba0a317);
    uint8_t *v4ea4f2ada8 = (uint8_t *)malloc(0x100);
    fill(v4ea4f2ada8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vb4cba0a317 + 0x0, 0x100, (uint8_t *)v4ea4f2ada8);
    free(v4ea4f2ada8);
    uint8_t *v7a2b15d652 = (uint8_t *)malloc(0x2);
    fill(v7a2b15d652, 0x2, (buffer_vb4cba0a317 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x10, 0x2, (uint8_t *)v7a2b15d652);
    free(v7a2b15d652);
    stateful_free(buffer_vcbf8e26a4f);
    buffer_vcbf8e26a4f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcbf8e26a4f = 0x%lx\n", buffer_vcbf8e26a4f);
    uint8_t *v5486d9d6f9 = (uint8_t *)malloc(0x100);
    fill(v5486d9d6f9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcbf8e26a4f + 0x0, 0x100, (uint8_t *)v5486d9d6f9);
    free(v5486d9d6f9);
    uint8_t *vdcb204dcc9 = (uint8_t *)malloc(0x2);
    fill(vdcb204dcc9, 0x2, (buffer_vcbf8e26a4f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x12, 0x2, (uint8_t *)vdcb204dcc9);
    free(vdcb204dcc9);
    stateful_free(buffer_ved469bf4d5);
    buffer_ved469bf4d5 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ved469bf4d5 = 0x%lx\n", buffer_ved469bf4d5);
    uint8_t *va013a86fbf = (uint8_t *)malloc(0x100);
    fill(va013a86fbf, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ved469bf4d5 + 0x0, 0x100, (uint8_t *)va013a86fbf);
    free(va013a86fbf);
    uint8_t *vbee2a97622 = (uint8_t *)malloc(0x2);
    fill(vbee2a97622, 0x2, (buffer_ved469bf4d5 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x14, 0x2, (uint8_t *)vbee2a97622);
    free(vbee2a97622);
    stateful_free(buffer_vdd35d11688);
    buffer_vdd35d11688 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vdd35d11688 = 0x%lx\n", buffer_vdd35d11688);
    uint8_t *vc6073b6297 = (uint8_t *)malloc(0x100);
    fill(vc6073b6297, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vdd35d11688 + 0x0, 0x100, (uint8_t *)vc6073b6297);
    free(vc6073b6297);
    uint8_t *vcca61e3484 = (uint8_t *)malloc(0x2);
    fill(vcca61e3484, 0x2, (buffer_vdd35d11688 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x16, 0x2, (uint8_t *)vcca61e3484);
    free(vcca61e3484);
    stateful_free(buffer_vc1a7de009e);
    buffer_vc1a7de009e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc1a7de009e = 0x%lx\n", buffer_vc1a7de009e);
    uint8_t *v34fdb434d2 = (uint8_t *)malloc(0x100);
    fill(v34fdb434d2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc1a7de009e + 0x0, 0x100, (uint8_t *)v34fdb434d2);
    free(v34fdb434d2);
    uint8_t *vb5e4a3c8d1 = (uint8_t *)malloc(0x2);
    fill(vb5e4a3c8d1, 0x2, (buffer_vc1a7de009e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x18, 0x2, (uint8_t *)vb5e4a3c8d1);
    free(vb5e4a3c8d1);
    stateful_free(buffer_vcdc39412d9);
    buffer_vcdc39412d9 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcdc39412d9 = 0x%lx\n", buffer_vcdc39412d9);
    uint8_t *v6f3742ace1 = (uint8_t *)malloc(0x100);
    fill(v6f3742ace1, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcdc39412d9 + 0x0, 0x100, (uint8_t *)v6f3742ace1);
    free(v6f3742ace1);
    uint8_t *vf654f453a5 = (uint8_t *)malloc(0x2);
    fill(vf654f453a5, 0x2, (buffer_vcdc39412d9 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x1a, 0x2, (uint8_t *)vf654f453a5);
    free(vf654f453a5);
    stateful_free(buffer_v2e40253469);
    buffer_v2e40253469 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2e40253469 = 0x%lx\n", buffer_v2e40253469);
    uint8_t *va59a476ccd = (uint8_t *)malloc(0x100);
    fill(va59a476ccd, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2e40253469 + 0x0, 0x100, (uint8_t *)va59a476ccd);
    free(va59a476ccd);
    uint8_t *v5090995125 = (uint8_t *)malloc(0x2);
    fill(v5090995125, 0x2, (buffer_v2e40253469 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x1c, 0x2, (uint8_t *)v5090995125);
    free(v5090995125);
    stateful_free(buffer_vcd6a5e0c74);
    buffer_vcd6a5e0c74 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcd6a5e0c74 = 0x%lx\n", buffer_vcd6a5e0c74);
    uint8_t *v20f4141487 = (uint8_t *)malloc(0x100);
    fill(v20f4141487, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcd6a5e0c74 + 0x0, 0x100, (uint8_t *)v20f4141487);
    free(v20f4141487);
    uint8_t *v95c1b1224f = (uint8_t *)malloc(0x2);
    fill(v95c1b1224f, 0x2, (buffer_vcd6a5e0c74 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v20068c1cbb + 0x1e, 0x2, (uint8_t *)v95c1b1224f);
    free(v95c1b1224f);
    uint8_t *v8a0a811070 = (uint8_t *)malloc(0x4);
    fill(v8a0a811070, 0x4, (OHCI_ISO_TD_v20068c1cbb & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd560e64c55 + 0x8, 0x4, (uint8_t *)v8a0a811070);
    free(v8a0a811070);
    goto v22d801701e_out;
v22d801701e_out:;
    uint8_t *vf9405ecf8c = (uint8_t *)malloc(0x4);
    fill(vf9405ecf8c, 0x4, OHCI_ED_vd560e64c55, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vd560e64c55 + 0xc, 0x4, (uint8_t *)vf9405ecf8c);
    free(vf9405ecf8c);
    uint8_t *v397e1c398e = (uint8_t *)malloc(0x4);
    fill(v397e1c398e, 0x4, OHCI_ED_vd560e64c55, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x6c, 0x4, (uint8_t *)v397e1c398e);
    free(v397e1c398e);
    goto v91fd7d4a5a_out;
v91fd7d4a5a_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vf30459cc30_0; break;
    }
vf30459cc30_0:;
    stateful_free(OHCI_ED_v5b8c494910);
    OHCI_ED_v5b8c494910 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v5b8c494910 = 0x%lx\n", OHCI_ED_v5b8c494910);
    uint8_t *va62a24d010 = (uint8_t *)malloc(0x4);
    fill(va62a24d010, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v5b8c494910 + 0x0, 0x4, (uint8_t *)va62a24d010);
    free(va62a24d010);
    uint8_t *v3f6b772a31 = (uint8_t *)malloc(0x4);
    fill(v3f6b772a31, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v5b8c494910 + 0x4, 0x4, (uint8_t *)v3f6b772a31);
    free(v3f6b772a31);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v6b42b6f1f9_0; break;
        case 1: goto v6b42b6f1f9_1; break;
    }
v6b42b6f1f9_0:;
    stateful_free(OHCI_TD_v2d5590c905);
    OHCI_TD_v2d5590c905 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v2d5590c905 = 0x%lx\n", OHCI_TD_v2d5590c905);
    uint8_t *v536ff84c82 = (uint8_t *)malloc(0x4);
    fill(v536ff84c82, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2d5590c905 + 0x0, 0x4, (uint8_t *)v536ff84c82);
    free(v536ff84c82);
    uint8_t *vfebd777813 = (uint8_t *)malloc(0x4);
    fill(vfebd777813, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2d5590c905 + 0x4, 0x4, (uint8_t *)vfebd777813);
    free(vfebd777813);
    uint8_t *v1b8c28f42b = (uint8_t *)malloc(0x4);
    fill(v1b8c28f42b, 0x4, (OHCI_TD_v2d5590c905 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2d5590c905 + 0x8, 0x4, (uint8_t *)v1b8c28f42b);
    free(v1b8c28f42b);
    uint8_t *v5a4a65b6f3 = (uint8_t *)malloc(0x4);
    fill(v5a4a65b6f3, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2d5590c905 + 0xc, 0x4, (uint8_t *)v5a4a65b6f3);
    free(v5a4a65b6f3);
    uint8_t *vc11bd09f6d = (uint8_t *)malloc(0x4);
    fill(vc11bd09f6d, 0x4, (OHCI_TD_v2d5590c905 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v5b8c494910 + 0x8, 0x4, (uint8_t *)vc11bd09f6d);
    free(vc11bd09f6d);
    goto v6b42b6f1f9_out;
v6b42b6f1f9_1:;
    stateful_free(OHCI_ISO_TD_v37e5725e5a);
    OHCI_ISO_TD_v37e5725e5a = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v37e5725e5a = 0x%lx\n", OHCI_ISO_TD_v37e5725e5a);
    uint8_t *v1803b6e7ee = (uint8_t *)malloc(0x4);
    fill(v1803b6e7ee, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x0, 0x4, (uint8_t *)v1803b6e7ee);
    free(v1803b6e7ee);
    uint8_t *v275ab60d7b = (uint8_t *)malloc(0x4);
    fill(v275ab60d7b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x4, 0x4, (uint8_t *)v275ab60d7b);
    free(v275ab60d7b);
    uint8_t *v42861cd120 = (uint8_t *)malloc(0x4);
    fill(v42861cd120, 0x4, (OHCI_ISO_TD_v37e5725e5a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x8, 0x4, (uint8_t *)v42861cd120);
    free(v42861cd120);
    uint8_t *vbb97112801 = (uint8_t *)malloc(0x4);
    fill(vbb97112801, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0xc, 0x4, (uint8_t *)vbb97112801);
    free(vbb97112801);
    stateful_free(buffer_v79fe0a1b7e);
    buffer_v79fe0a1b7e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v79fe0a1b7e = 0x%lx\n", buffer_v79fe0a1b7e);
    uint8_t *v514ae2ef9b = (uint8_t *)malloc(0x100);
    fill(v514ae2ef9b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v79fe0a1b7e + 0x0, 0x100, (uint8_t *)v514ae2ef9b);
    free(v514ae2ef9b);
    uint8_t *vdde965d20d = (uint8_t *)malloc(0x2);
    fill(vdde965d20d, 0x2, (buffer_v79fe0a1b7e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x10, 0x2, (uint8_t *)vdde965d20d);
    free(vdde965d20d);
    stateful_free(buffer_v1480f037d3);
    buffer_v1480f037d3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1480f037d3 = 0x%lx\n", buffer_v1480f037d3);
    uint8_t *va91b2a6f1f = (uint8_t *)malloc(0x100);
    fill(va91b2a6f1f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1480f037d3 + 0x0, 0x100, (uint8_t *)va91b2a6f1f);
    free(va91b2a6f1f);
    uint8_t *v400a67fc35 = (uint8_t *)malloc(0x2);
    fill(v400a67fc35, 0x2, (buffer_v1480f037d3 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x12, 0x2, (uint8_t *)v400a67fc35);
    free(v400a67fc35);
    stateful_free(buffer_vf484878d5b);
    buffer_vf484878d5b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf484878d5b = 0x%lx\n", buffer_vf484878d5b);
    uint8_t *v6b1c08c4e4 = (uint8_t *)malloc(0x100);
    fill(v6b1c08c4e4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf484878d5b + 0x0, 0x100, (uint8_t *)v6b1c08c4e4);
    free(v6b1c08c4e4);
    uint8_t *vb4a9ed2c01 = (uint8_t *)malloc(0x2);
    fill(vb4a9ed2c01, 0x2, (buffer_vf484878d5b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x14, 0x2, (uint8_t *)vb4a9ed2c01);
    free(vb4a9ed2c01);
    stateful_free(buffer_vf7d870b678);
    buffer_vf7d870b678 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf7d870b678 = 0x%lx\n", buffer_vf7d870b678);
    uint8_t *vc9722ddf4e = (uint8_t *)malloc(0x100);
    fill(vc9722ddf4e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf7d870b678 + 0x0, 0x100, (uint8_t *)vc9722ddf4e);
    free(vc9722ddf4e);
    uint8_t *v8eb2455f08 = (uint8_t *)malloc(0x2);
    fill(v8eb2455f08, 0x2, (buffer_vf7d870b678 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x16, 0x2, (uint8_t *)v8eb2455f08);
    free(v8eb2455f08);
    stateful_free(buffer_vce03a34da0);
    buffer_vce03a34da0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vce03a34da0 = 0x%lx\n", buffer_vce03a34da0);
    uint8_t *v1662cd634b = (uint8_t *)malloc(0x100);
    fill(v1662cd634b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vce03a34da0 + 0x0, 0x100, (uint8_t *)v1662cd634b);
    free(v1662cd634b);
    uint8_t *v87e8b9a711 = (uint8_t *)malloc(0x2);
    fill(v87e8b9a711, 0x2, (buffer_vce03a34da0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x18, 0x2, (uint8_t *)v87e8b9a711);
    free(v87e8b9a711);
    stateful_free(buffer_v96bfafff5b);
    buffer_v96bfafff5b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v96bfafff5b = 0x%lx\n", buffer_v96bfafff5b);
    uint8_t *v2598ed481e = (uint8_t *)malloc(0x100);
    fill(v2598ed481e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v96bfafff5b + 0x0, 0x100, (uint8_t *)v2598ed481e);
    free(v2598ed481e);
    uint8_t *v4e1939b89d = (uint8_t *)malloc(0x2);
    fill(v4e1939b89d, 0x2, (buffer_v96bfafff5b | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x1a, 0x2, (uint8_t *)v4e1939b89d);
    free(v4e1939b89d);
    stateful_free(buffer_v5672ebc760);
    buffer_v5672ebc760 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5672ebc760 = 0x%lx\n", buffer_v5672ebc760);
    uint8_t *v8ffe34c082 = (uint8_t *)malloc(0x100);
    fill(v8ffe34c082, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5672ebc760 + 0x0, 0x100, (uint8_t *)v8ffe34c082);
    free(v8ffe34c082);
    uint8_t *v3bb80f34ce = (uint8_t *)malloc(0x2);
    fill(v3bb80f34ce, 0x2, (buffer_v5672ebc760 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x1c, 0x2, (uint8_t *)v3bb80f34ce);
    free(v3bb80f34ce);
    stateful_free(buffer_v291a58af25);
    buffer_v291a58af25 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v291a58af25 = 0x%lx\n", buffer_v291a58af25);
    uint8_t *vdf0540c543 = (uint8_t *)malloc(0x100);
    fill(vdf0540c543, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v291a58af25 + 0x0, 0x100, (uint8_t *)vdf0540c543);
    free(vdf0540c543);
    uint8_t *vf5a6b6ddd6 = (uint8_t *)malloc(0x2);
    fill(vf5a6b6ddd6, 0x2, (buffer_v291a58af25 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v37e5725e5a + 0x1e, 0x2, (uint8_t *)vf5a6b6ddd6);
    free(vf5a6b6ddd6);
    uint8_t *v1af0ed2850 = (uint8_t *)malloc(0x4);
    fill(v1af0ed2850, 0x4, (OHCI_ISO_TD_v37e5725e5a & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v5b8c494910 + 0x8, 0x4, (uint8_t *)v1af0ed2850);
    free(v1af0ed2850);
    goto v6b42b6f1f9_out;
v6b42b6f1f9_out:;
    uint8_t *v8a987b79a2 = (uint8_t *)malloc(0x4);
    fill(v8a987b79a2, 0x4, OHCI_ED_v5b8c494910, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v5b8c494910 + 0xc, 0x4, (uint8_t *)v8a987b79a2);
    free(v8a987b79a2);
    uint8_t *v1e63e89a37 = (uint8_t *)malloc(0x4);
    fill(v1e63e89a37, 0x4, OHCI_ED_v5b8c494910, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x70, 0x4, (uint8_t *)v1e63e89a37);
    free(v1e63e89a37);
    goto vf30459cc30_out;
vf30459cc30_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vebbe1a41c7_0; break;
    }
vebbe1a41c7_0:;
    stateful_free(OHCI_ED_vae09ccfba3);
    OHCI_ED_vae09ccfba3 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vae09ccfba3 = 0x%lx\n", OHCI_ED_vae09ccfba3);
    uint8_t *v5b60808668 = (uint8_t *)malloc(0x4);
    fill(v5b60808668, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vae09ccfba3 + 0x0, 0x4, (uint8_t *)v5b60808668);
    free(v5b60808668);
    uint8_t *v347a5655b7 = (uint8_t *)malloc(0x4);
    fill(v347a5655b7, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vae09ccfba3 + 0x4, 0x4, (uint8_t *)v347a5655b7);
    free(v347a5655b7);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto vb4ea16d65e_0; break;
        case 1: goto vb4ea16d65e_1; break;
    }
vb4ea16d65e_0:;
    stateful_free(OHCI_TD_va2bb62833d);
    OHCI_TD_va2bb62833d = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_va2bb62833d = 0x%lx\n", OHCI_TD_va2bb62833d);
    uint8_t *v119e1d1c04 = (uint8_t *)malloc(0x4);
    fill(v119e1d1c04, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va2bb62833d + 0x0, 0x4, (uint8_t *)v119e1d1c04);
    free(v119e1d1c04);
    uint8_t *vd605e8bc77 = (uint8_t *)malloc(0x4);
    fill(vd605e8bc77, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va2bb62833d + 0x4, 0x4, (uint8_t *)vd605e8bc77);
    free(vd605e8bc77);
    uint8_t *vcd4aa89afa = (uint8_t *)malloc(0x4);
    fill(vcd4aa89afa, 0x4, (OHCI_TD_va2bb62833d & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va2bb62833d + 0x8, 0x4, (uint8_t *)vcd4aa89afa);
    free(vcd4aa89afa);
    uint8_t *vf8b4ec866a = (uint8_t *)malloc(0x4);
    fill(vf8b4ec866a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_va2bb62833d + 0xc, 0x4, (uint8_t *)vf8b4ec866a);
    free(vf8b4ec866a);
    uint8_t *v99aa5f1191 = (uint8_t *)malloc(0x4);
    fill(v99aa5f1191, 0x4, (OHCI_TD_va2bb62833d & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vae09ccfba3 + 0x8, 0x4, (uint8_t *)v99aa5f1191);
    free(v99aa5f1191);
    goto vb4ea16d65e_out;
vb4ea16d65e_1:;
    stateful_free(OHCI_ISO_TD_v5a220eb23c);
    OHCI_ISO_TD_v5a220eb23c = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v5a220eb23c = 0x%lx\n", OHCI_ISO_TD_v5a220eb23c);
    uint8_t *v4f9d9bbbe4 = (uint8_t *)malloc(0x4);
    fill(v4f9d9bbbe4, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x0, 0x4, (uint8_t *)v4f9d9bbbe4);
    free(v4f9d9bbbe4);
    uint8_t *vc01235204d = (uint8_t *)malloc(0x4);
    fill(vc01235204d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x4, 0x4, (uint8_t *)vc01235204d);
    free(vc01235204d);
    uint8_t *vb35a929e03 = (uint8_t *)malloc(0x4);
    fill(vb35a929e03, 0x4, (OHCI_ISO_TD_v5a220eb23c & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x8, 0x4, (uint8_t *)vb35a929e03);
    free(vb35a929e03);
    uint8_t *vcabd877d48 = (uint8_t *)malloc(0x4);
    fill(vcabd877d48, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0xc, 0x4, (uint8_t *)vcabd877d48);
    free(vcabd877d48);
    stateful_free(buffer_ve0db22d329);
    buffer_ve0db22d329 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve0db22d329 = 0x%lx\n", buffer_ve0db22d329);
    uint8_t *ved5dc37361 = (uint8_t *)malloc(0x100);
    fill(ved5dc37361, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve0db22d329 + 0x0, 0x100, (uint8_t *)ved5dc37361);
    free(ved5dc37361);
    uint8_t *v20d8a8fe5c = (uint8_t *)malloc(0x2);
    fill(v20d8a8fe5c, 0x2, (buffer_ve0db22d329 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x10, 0x2, (uint8_t *)v20d8a8fe5c);
    free(v20d8a8fe5c);
    stateful_free(buffer_v2353d45590);
    buffer_v2353d45590 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2353d45590 = 0x%lx\n", buffer_v2353d45590);
    uint8_t *v571532b338 = (uint8_t *)malloc(0x100);
    fill(v571532b338, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2353d45590 + 0x0, 0x100, (uint8_t *)v571532b338);
    free(v571532b338);
    uint8_t *vb56acae6f7 = (uint8_t *)malloc(0x2);
    fill(vb56acae6f7, 0x2, (buffer_v2353d45590 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x12, 0x2, (uint8_t *)vb56acae6f7);
    free(vb56acae6f7);
    stateful_free(buffer_vc5507d2b90);
    buffer_vc5507d2b90 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc5507d2b90 = 0x%lx\n", buffer_vc5507d2b90);
    uint8_t *v1586377856 = (uint8_t *)malloc(0x100);
    fill(v1586377856, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc5507d2b90 + 0x0, 0x100, (uint8_t *)v1586377856);
    free(v1586377856);
    uint8_t *ve1de3de448 = (uint8_t *)malloc(0x2);
    fill(ve1de3de448, 0x2, (buffer_vc5507d2b90 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x14, 0x2, (uint8_t *)ve1de3de448);
    free(ve1de3de448);
    stateful_free(buffer_vafdb4e0b01);
    buffer_vafdb4e0b01 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vafdb4e0b01 = 0x%lx\n", buffer_vafdb4e0b01);
    uint8_t *v9be6a1c738 = (uint8_t *)malloc(0x100);
    fill(v9be6a1c738, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vafdb4e0b01 + 0x0, 0x100, (uint8_t *)v9be6a1c738);
    free(v9be6a1c738);
    uint8_t *vee4a4b6248 = (uint8_t *)malloc(0x2);
    fill(vee4a4b6248, 0x2, (buffer_vafdb4e0b01 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x16, 0x2, (uint8_t *)vee4a4b6248);
    free(vee4a4b6248);
    stateful_free(buffer_vcd34bcd7b7);
    buffer_vcd34bcd7b7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcd34bcd7b7 = 0x%lx\n", buffer_vcd34bcd7b7);
    uint8_t *v3d2e80fa02 = (uint8_t *)malloc(0x100);
    fill(v3d2e80fa02, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcd34bcd7b7 + 0x0, 0x100, (uint8_t *)v3d2e80fa02);
    free(v3d2e80fa02);
    uint8_t *v46038cab0f = (uint8_t *)malloc(0x2);
    fill(v46038cab0f, 0x2, (buffer_vcd34bcd7b7 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x18, 0x2, (uint8_t *)v46038cab0f);
    free(v46038cab0f);
    stateful_free(buffer_v261cec19ff);
    buffer_v261cec19ff = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v261cec19ff = 0x%lx\n", buffer_v261cec19ff);
    uint8_t *v555e45653a = (uint8_t *)malloc(0x100);
    fill(v555e45653a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v261cec19ff + 0x0, 0x100, (uint8_t *)v555e45653a);
    free(v555e45653a);
    uint8_t *v433ca80a1b = (uint8_t *)malloc(0x2);
    fill(v433ca80a1b, 0x2, (buffer_v261cec19ff | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x1a, 0x2, (uint8_t *)v433ca80a1b);
    free(v433ca80a1b);
    stateful_free(buffer_vd2f7442906);
    buffer_vd2f7442906 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vd2f7442906 = 0x%lx\n", buffer_vd2f7442906);
    uint8_t *vbfdee880cb = (uint8_t *)malloc(0x100);
    fill(vbfdee880cb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vd2f7442906 + 0x0, 0x100, (uint8_t *)vbfdee880cb);
    free(vbfdee880cb);
    uint8_t *v203da6391e = (uint8_t *)malloc(0x2);
    fill(v203da6391e, 0x2, (buffer_vd2f7442906 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x1c, 0x2, (uint8_t *)v203da6391e);
    free(v203da6391e);
    stateful_free(buffer_vf246038295);
    buffer_vf246038295 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf246038295 = 0x%lx\n", buffer_vf246038295);
    uint8_t *ve15e787afb = (uint8_t *)malloc(0x100);
    fill(ve15e787afb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf246038295 + 0x0, 0x100, (uint8_t *)ve15e787afb);
    free(ve15e787afb);
    uint8_t *vc0eea397d4 = (uint8_t *)malloc(0x2);
    fill(vc0eea397d4, 0x2, (buffer_vf246038295 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v5a220eb23c + 0x1e, 0x2, (uint8_t *)vc0eea397d4);
    free(vc0eea397d4);
    uint8_t *v425fea712c = (uint8_t *)malloc(0x4);
    fill(v425fea712c, 0x4, (OHCI_ISO_TD_v5a220eb23c & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vae09ccfba3 + 0x8, 0x4, (uint8_t *)v425fea712c);
    free(v425fea712c);
    goto vb4ea16d65e_out;
vb4ea16d65e_out:;
    uint8_t *v2a4e9db93e = (uint8_t *)malloc(0x4);
    fill(v2a4e9db93e, 0x4, OHCI_ED_vae09ccfba3, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vae09ccfba3 + 0xc, 0x4, (uint8_t *)v2a4e9db93e);
    free(v2a4e9db93e);
    uint8_t *v94fc085b30 = (uint8_t *)malloc(0x4);
    fill(v94fc085b30, 0x4, OHCI_ED_vae09ccfba3, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x74, 0x4, (uint8_t *)v94fc085b30);
    free(v94fc085b30);
    goto vebbe1a41c7_out;
vebbe1a41c7_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vc740525525_0; break;
    }
vc740525525_0:;
    stateful_free(OHCI_ED_vc96ef1a5ac);
    OHCI_ED_vc96ef1a5ac = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_vc96ef1a5ac = 0x%lx\n", OHCI_ED_vc96ef1a5ac);
    uint8_t *vf578b202a8 = (uint8_t *)malloc(0x4);
    fill(vf578b202a8, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc96ef1a5ac + 0x0, 0x4, (uint8_t *)vf578b202a8);
    free(vf578b202a8);
    uint8_t *v4bf637b494 = (uint8_t *)malloc(0x4);
    fill(v4bf637b494, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc96ef1a5ac + 0x4, 0x4, (uint8_t *)v4bf637b494);
    free(v4bf637b494);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v6c4e109c9a_0; break;
        case 1: goto v6c4e109c9a_1; break;
    }
v6c4e109c9a_0:;
    stateful_free(OHCI_TD_vec2b5e213f);
    OHCI_TD_vec2b5e213f = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_vec2b5e213f = 0x%lx\n", OHCI_TD_vec2b5e213f);
    uint8_t *v6fd4d110b7 = (uint8_t *)malloc(0x4);
    fill(v6fd4d110b7, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vec2b5e213f + 0x0, 0x4, (uint8_t *)v6fd4d110b7);
    free(v6fd4d110b7);
    uint8_t *v7a67a0cafc = (uint8_t *)malloc(0x4);
    fill(v7a67a0cafc, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vec2b5e213f + 0x4, 0x4, (uint8_t *)v7a67a0cafc);
    free(v7a67a0cafc);
    uint8_t *v4f4394338a = (uint8_t *)malloc(0x4);
    fill(v4f4394338a, 0x4, (OHCI_TD_vec2b5e213f & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vec2b5e213f + 0x8, 0x4, (uint8_t *)v4f4394338a);
    free(v4f4394338a);
    uint8_t *v737ab5fd79 = (uint8_t *)malloc(0x4);
    fill(v737ab5fd79, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_vec2b5e213f + 0xc, 0x4, (uint8_t *)v737ab5fd79);
    free(v737ab5fd79);
    uint8_t *ved39abe091 = (uint8_t *)malloc(0x4);
    fill(ved39abe091, 0x4, (OHCI_TD_vec2b5e213f & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc96ef1a5ac + 0x8, 0x4, (uint8_t *)ved39abe091);
    free(ved39abe091);
    goto v6c4e109c9a_out;
v6c4e109c9a_1:;
    stateful_free(OHCI_ISO_TD_v829fe7ba5d);
    OHCI_ISO_TD_v829fe7ba5d = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v829fe7ba5d = 0x%lx\n", OHCI_ISO_TD_v829fe7ba5d);
    uint8_t *vaedb5e9e8f = (uint8_t *)malloc(0x4);
    fill(vaedb5e9e8f, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x0, 0x4, (uint8_t *)vaedb5e9e8f);
    free(vaedb5e9e8f);
    uint8_t *v284884a255 = (uint8_t *)malloc(0x4);
    fill(v284884a255, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x4, 0x4, (uint8_t *)v284884a255);
    free(v284884a255);
    uint8_t *v645d327b7b = (uint8_t *)malloc(0x4);
    fill(v645d327b7b, 0x4, (OHCI_ISO_TD_v829fe7ba5d & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x8, 0x4, (uint8_t *)v645d327b7b);
    free(v645d327b7b);
    uint8_t *v5d93408018 = (uint8_t *)malloc(0x4);
    fill(v5d93408018, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0xc, 0x4, (uint8_t *)v5d93408018);
    free(v5d93408018);
    stateful_free(buffer_v667fceeb88);
    buffer_v667fceeb88 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v667fceeb88 = 0x%lx\n", buffer_v667fceeb88);
    uint8_t *v1d540d05b0 = (uint8_t *)malloc(0x100);
    fill(v1d540d05b0, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v667fceeb88 + 0x0, 0x100, (uint8_t *)v1d540d05b0);
    free(v1d540d05b0);
    uint8_t *vcf80ac174f = (uint8_t *)malloc(0x2);
    fill(vcf80ac174f, 0x2, (buffer_v667fceeb88 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x10, 0x2, (uint8_t *)vcf80ac174f);
    free(vcf80ac174f);
    stateful_free(buffer_v3ee29e686f);
    buffer_v3ee29e686f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v3ee29e686f = 0x%lx\n", buffer_v3ee29e686f);
    uint8_t *vf7f1fe71c6 = (uint8_t *)malloc(0x100);
    fill(vf7f1fe71c6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v3ee29e686f + 0x0, 0x100, (uint8_t *)vf7f1fe71c6);
    free(vf7f1fe71c6);
    uint8_t *v1cb42e4a91 = (uint8_t *)malloc(0x2);
    fill(v1cb42e4a91, 0x2, (buffer_v3ee29e686f | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x12, 0x2, (uint8_t *)v1cb42e4a91);
    free(v1cb42e4a91);
    stateful_free(buffer_vff7acd8640);
    buffer_vff7acd8640 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vff7acd8640 = 0x%lx\n", buffer_vff7acd8640);
    uint8_t *v4a1393ab39 = (uint8_t *)malloc(0x100);
    fill(v4a1393ab39, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vff7acd8640 + 0x0, 0x100, (uint8_t *)v4a1393ab39);
    free(v4a1393ab39);
    uint8_t *v1c16dc3904 = (uint8_t *)malloc(0x2);
    fill(v1c16dc3904, 0x2, (buffer_vff7acd8640 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x14, 0x2, (uint8_t *)v1c16dc3904);
    free(v1c16dc3904);
    stateful_free(buffer_v86ce563de2);
    buffer_v86ce563de2 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v86ce563de2 = 0x%lx\n", buffer_v86ce563de2);
    uint8_t *vfc1771ce4c = (uint8_t *)malloc(0x100);
    fill(vfc1771ce4c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v86ce563de2 + 0x0, 0x100, (uint8_t *)vfc1771ce4c);
    free(vfc1771ce4c);
    uint8_t *vd996f12519 = (uint8_t *)malloc(0x2);
    fill(vd996f12519, 0x2, (buffer_v86ce563de2 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x16, 0x2, (uint8_t *)vd996f12519);
    free(vd996f12519);
    stateful_free(buffer_vc79385209c);
    buffer_vc79385209c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc79385209c = 0x%lx\n", buffer_vc79385209c);
    uint8_t *v23e0e84ebc = (uint8_t *)malloc(0x100);
    fill(v23e0e84ebc, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc79385209c + 0x0, 0x100, (uint8_t *)v23e0e84ebc);
    free(v23e0e84ebc);
    uint8_t *vc45181ec41 = (uint8_t *)malloc(0x2);
    fill(vc45181ec41, 0x2, (buffer_vc79385209c | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x18, 0x2, (uint8_t *)vc45181ec41);
    free(vc45181ec41);
    stateful_free(buffer_v3cad275ae0);
    buffer_v3cad275ae0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v3cad275ae0 = 0x%lx\n", buffer_v3cad275ae0);
    uint8_t *v6fda1a8b7b = (uint8_t *)malloc(0x100);
    fill(v6fda1a8b7b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v3cad275ae0 + 0x0, 0x100, (uint8_t *)v6fda1a8b7b);
    free(v6fda1a8b7b);
    uint8_t *va0ec729fb4 = (uint8_t *)malloc(0x2);
    fill(va0ec729fb4, 0x2, (buffer_v3cad275ae0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x1a, 0x2, (uint8_t *)va0ec729fb4);
    free(va0ec729fb4);
    stateful_free(buffer_v9c684df10a);
    buffer_v9c684df10a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9c684df10a = 0x%lx\n", buffer_v9c684df10a);
    uint8_t *v211312e12e = (uint8_t *)malloc(0x100);
    fill(v211312e12e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9c684df10a + 0x0, 0x100, (uint8_t *)v211312e12e);
    free(v211312e12e);
    uint8_t *v46e98b7548 = (uint8_t *)malloc(0x2);
    fill(v46e98b7548, 0x2, (buffer_v9c684df10a | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x1c, 0x2, (uint8_t *)v46e98b7548);
    free(v46e98b7548);
    stateful_free(buffer_vcc4e66dade);
    buffer_vcc4e66dade = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcc4e66dade = 0x%lx\n", buffer_vcc4e66dade);
    uint8_t *vfed68dc132 = (uint8_t *)malloc(0x100);
    fill(vfed68dc132, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcc4e66dade + 0x0, 0x100, (uint8_t *)vfed68dc132);
    free(vfed68dc132);
    uint8_t *vb046463493 = (uint8_t *)malloc(0x2);
    fill(vb046463493, 0x2, (buffer_vcc4e66dade | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v829fe7ba5d + 0x1e, 0x2, (uint8_t *)vb046463493);
    free(vb046463493);
    uint8_t *vfef5a55187 = (uint8_t *)malloc(0x4);
    fill(vfef5a55187, 0x4, (OHCI_ISO_TD_v829fe7ba5d & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc96ef1a5ac + 0x8, 0x4, (uint8_t *)vfef5a55187);
    free(vfef5a55187);
    goto v6c4e109c9a_out;
v6c4e109c9a_out:;
    uint8_t *v9916e08e3b = (uint8_t *)malloc(0x4);
    fill(v9916e08e3b, 0x4, OHCI_ED_vc96ef1a5ac, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_vc96ef1a5ac + 0xc, 0x4, (uint8_t *)v9916e08e3b);
    free(v9916e08e3b);
    uint8_t *veaa7847309 = (uint8_t *)malloc(0x4);
    fill(veaa7847309, 0x4, OHCI_ED_vc96ef1a5ac, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x78, 0x4, (uint8_t *)veaa7847309);
    free(veaa7847309);
    goto vc740525525_out;
vc740525525_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto va0483bb2f6_0; break;
    }
va0483bb2f6_0:;
    stateful_free(OHCI_ED_v64a2bc48f9);
    OHCI_ED_v64a2bc48f9 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_ED_v64a2bc48f9 = 0x%lx\n", OHCI_ED_v64a2bc48f9);
    uint8_t *v4a51de416a = (uint8_t *)malloc(0x4);
    fill(v4a51de416a, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v64a2bc48f9 + 0x0, 0x4, (uint8_t *)v4a51de416a);
    free(v4a51de416a);
    uint8_t *v15f66e2375 = (uint8_t *)malloc(0x4);
    fill(v15f66e2375, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v64a2bc48f9 + 0x4, 0x4, (uint8_t *)v15f66e2375);
    free(v15f66e2375);
    switch (get_data_from_pool4() % 2){ 
        case 0: goto v9aabd22d75_0; break;
        case 1: goto v9aabd22d75_1; break;
    }
v9aabd22d75_0:;
    stateful_free(OHCI_TD_v2b6b7b4229);
    OHCI_TD_v2b6b7b4229 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] OHCI_TD_v2b6b7b4229 = 0x%lx\n", OHCI_TD_v2b6b7b4229);
    uint8_t *v87b8a1f9e0 = (uint8_t *)malloc(0x4);
    fill(v87b8a1f9e0, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2b6b7b4229 + 0x0, 0x4, (uint8_t *)v87b8a1f9e0);
    free(v87b8a1f9e0);
    uint8_t *vd3ca44770f = (uint8_t *)malloc(0x4);
    fill(vd3ca44770f, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2b6b7b4229 + 0x4, 0x4, (uint8_t *)vd3ca44770f);
    free(vd3ca44770f);
    uint8_t *ve37872462f = (uint8_t *)malloc(0x4);
    fill(ve37872462f, 0x4, (OHCI_TD_v2b6b7b4229 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2b6b7b4229 + 0x8, 0x4, (uint8_t *)ve37872462f);
    free(ve37872462f);
    uint8_t *v30a407e992 = (uint8_t *)malloc(0x4);
    fill(v30a407e992, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_TD_v2b6b7b4229 + 0xc, 0x4, (uint8_t *)v30a407e992);
    free(v30a407e992);
    uint8_t *v6fcc8b274d = (uint8_t *)malloc(0x4);
    fill(v6fcc8b274d, 0x4, (OHCI_TD_v2b6b7b4229 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v64a2bc48f9 + 0x8, 0x4, (uint8_t *)v6fcc8b274d);
    free(v6fcc8b274d);
    goto v9aabd22d75_out;
v9aabd22d75_1:;
    stateful_free(OHCI_ISO_TD_v693d993c79);
    OHCI_ISO_TD_v693d993c79 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] OHCI_ISO_TD_v693d993c79 = 0x%lx\n", OHCI_ISO_TD_v693d993c79);
    uint8_t *v3a9f74eff4 = (uint8_t *)malloc(0x4);
    fill(v3a9f74eff4, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x16) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1a)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x0, 0x4, (uint8_t *)v3a9f74eff4);
    free(v3a9f74eff4);
    uint8_t *v823c694cf3 = (uint8_t *)malloc(0x4);
    fill(v823c694cf3, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x4, 0x4, (uint8_t *)v823c694cf3);
    free(v823c694cf3);
    uint8_t *v28714114e0 = (uint8_t *)malloc(0x4);
    fill(v28714114e0, 0x4, (OHCI_ISO_TD_v693d993c79 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x8, 0x4, (uint8_t *)v28714114e0);
    free(v28714114e0);
    uint8_t *v5fe5162e9a = (uint8_t *)malloc(0x4);
    fill(v5fe5162e9a, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0xc, 0x4, (uint8_t *)v5fe5162e9a);
    free(v5fe5162e9a);
    stateful_free(buffer_v586d7f415e);
    buffer_v586d7f415e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v586d7f415e = 0x%lx\n", buffer_v586d7f415e);
    uint8_t *vb61c14e4aa = (uint8_t *)malloc(0x100);
    fill(vb61c14e4aa, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v586d7f415e + 0x0, 0x100, (uint8_t *)vb61c14e4aa);
    free(vb61c14e4aa);
    uint8_t *v6721f589e6 = (uint8_t *)malloc(0x2);
    fill(v6721f589e6, 0x2, (buffer_v586d7f415e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x10, 0x2, (uint8_t *)v6721f589e6);
    free(v6721f589e6);
    stateful_free(buffer_vdccbbedc0e);
    buffer_vdccbbedc0e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vdccbbedc0e = 0x%lx\n", buffer_vdccbbedc0e);
    uint8_t *v2a236a88f6 = (uint8_t *)malloc(0x100);
    fill(v2a236a88f6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vdccbbedc0e + 0x0, 0x100, (uint8_t *)v2a236a88f6);
    free(v2a236a88f6);
    uint8_t *v34e6a5305f = (uint8_t *)malloc(0x2);
    fill(v34e6a5305f, 0x2, (buffer_vdccbbedc0e | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x12, 0x2, (uint8_t *)v34e6a5305f);
    free(v34e6a5305f);
    stateful_free(buffer_vf5141524e0);
    buffer_vf5141524e0 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf5141524e0 = 0x%lx\n", buffer_vf5141524e0);
    uint8_t *vc30b2808b6 = (uint8_t *)malloc(0x100);
    fill(vc30b2808b6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf5141524e0 + 0x0, 0x100, (uint8_t *)vc30b2808b6);
    free(vc30b2808b6);
    uint8_t *v3b88f47db6 = (uint8_t *)malloc(0x2);
    fill(v3b88f47db6, 0x2, (buffer_vf5141524e0 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x14, 0x2, (uint8_t *)v3b88f47db6);
    free(v3b88f47db6);
    stateful_free(buffer_v4bc972ce53);
    buffer_v4bc972ce53 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4bc972ce53 = 0x%lx\n", buffer_v4bc972ce53);
    uint8_t *vb8b69abed5 = (uint8_t *)malloc(0x100);
    fill(vb8b69abed5, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4bc972ce53 + 0x0, 0x100, (uint8_t *)vb8b69abed5);
    free(vb8b69abed5);
    uint8_t *v5fceaae665 = (uint8_t *)malloc(0x2);
    fill(v5fceaae665, 0x2, (buffer_v4bc972ce53 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x16, 0x2, (uint8_t *)v5fceaae665);
    free(v5fceaae665);
    stateful_free(buffer_va9d499ca26);
    buffer_va9d499ca26 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va9d499ca26 = 0x%lx\n", buffer_va9d499ca26);
    uint8_t *v32f33d7ab4 = (uint8_t *)malloc(0x100);
    fill(v32f33d7ab4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va9d499ca26 + 0x0, 0x100, (uint8_t *)v32f33d7ab4);
    free(v32f33d7ab4);
    uint8_t *ve60d2adad2 = (uint8_t *)malloc(0x2);
    fill(ve60d2adad2, 0x2, (buffer_va9d499ca26 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x18, 0x2, (uint8_t *)ve60d2adad2);
    free(ve60d2adad2);
    stateful_free(buffer_v6e63ffa48d);
    buffer_v6e63ffa48d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v6e63ffa48d = 0x%lx\n", buffer_v6e63ffa48d);
    uint8_t *vaa2505aa51 = (uint8_t *)malloc(0x100);
    fill(vaa2505aa51, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v6e63ffa48d + 0x0, 0x100, (uint8_t *)vaa2505aa51);
    free(vaa2505aa51);
    uint8_t *v4a4fa6a208 = (uint8_t *)malloc(0x2);
    fill(v4a4fa6a208, 0x2, (buffer_v6e63ffa48d | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x1a, 0x2, (uint8_t *)v4a4fa6a208);
    free(v4a4fa6a208);
    stateful_free(buffer_v69199a8aae);
    buffer_v69199a8aae = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v69199a8aae = 0x%lx\n", buffer_v69199a8aae);
    uint8_t *vf152ff17a5 = (uint8_t *)malloc(0x100);
    fill(vf152ff17a5, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v69199a8aae + 0x0, 0x100, (uint8_t *)vf152ff17a5);
    free(vf152ff17a5);
    uint8_t *v358221ccd7 = (uint8_t *)malloc(0x2);
    fill(v358221ccd7, 0x2, (buffer_v69199a8aae | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x1c, 0x2, (uint8_t *)v358221ccd7);
    free(v358221ccd7);
    stateful_free(buffer_vba5612f760);
    buffer_vba5612f760 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vba5612f760 = 0x%lx\n", buffer_vba5612f760);
    uint8_t *v876a516f3a = (uint8_t *)malloc(0x100);
    fill(v876a516f3a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vba5612f760 + 0x0, 0x100, (uint8_t *)v876a516f3a);
    free(v876a516f3a);
    uint8_t *vb6e1da1824 = (uint8_t *)malloc(0x2);
    fill(vb6e1da1824, 0x2, (buffer_vba5612f760 | 0x0), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ISO_TD_v693d993c79 + 0x1e, 0x2, (uint8_t *)vb6e1da1824);
    free(vb6e1da1824);
    uint8_t *va3db26e992 = (uint8_t *)malloc(0x4);
    fill(va3db26e992, 0x4, (OHCI_ISO_TD_v693d993c79 & 0xfffffff0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v64a2bc48f9 + 0x8, 0x4, (uint8_t *)va3db26e992);
    free(va3db26e992);
    goto v9aabd22d75_out;
v9aabd22d75_out:;
    uint8_t *v7a3e128f36 = (uint8_t *)malloc(0x4);
    fill(v7a3e128f36, 0x4, OHCI_ED_v64a2bc48f9, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, OHCI_ED_v64a2bc48f9 + 0xc, 0x4, (uint8_t *)v7a3e128f36);
    free(v7a3e128f36);
    uint8_t *v1fc5554c8a = (uint8_t *)malloc(0x4);
    fill(v1fc5554c8a, 0x4, OHCI_ED_v64a2bc48f9, 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x7c, 0x4, (uint8_t *)v1fc5554c8a);
    free(v1fc5554c8a);
    goto va0483bb2f6_out;
va0483bb2f6_out:;
    uint8_t *v74d036975a = (uint8_t *)malloc(0x2);
    fill(v74d036975a, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x80, 0x2, (uint8_t *)v74d036975a);
    free(v74d036975a);
    uint8_t *vf867760a8b = (uint8_t *)malloc(0x2);
    fill(vf867760a8b, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x82, 0x2, (uint8_t *)vf867760a8b);
    free(vf867760a8b);
    uint8_t *vc5dfdbb269 = (uint8_t *)malloc(0x4);
    fill(vc5dfdbb269, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ohci_hcca_0 + 0x84, 0x4, (uint8_t *)vc5dfdbb269);
    free(vc5dfdbb269);
    uint64_t v1d8a5b3a35 = (ohci_hcca_0 & 0xffffff00);
    size_1 += serialize(Data, size_1, CALLBACK_MAXSIZE, get_interface_id("ohci", EVENT_TYPE_MMIO_WRITE), 0x18, 0x4, (uint8_t *)&v1d8a5b3a35);
    goto v11ebcd4942_out;
v11ebcd4942_out:;
    return Data;
}

static size_t get_size_1() { return size_1;}

// ==== hw/usb/hcd-ehci.c:ehci_state_waitlisthead:uint32_t entry = ============================
size_t size_2 = 0;

static uint64_t ehci_qh_0 = 0;
static uint64_t EHCIqtd_v3271dcf600 = 0;
static uint64_t buffer_v1770a5062a = 0;
static uint64_t buffer_v991cbb26c1 = 0;
static uint64_t buffer_v2c73746464 = 0;
static uint64_t buffer_vfdde282ec3 = 0;
static uint64_t buffer_v194a5bfdcf = 0;
static uint64_t EHCIqtd_v647611e934 = 0;
static uint64_t buffer_vad7b70fad3 = 0;
static uint64_t buffer_v505a80b426 = 0;
static uint64_t buffer_v673d619208 = 0;
static uint64_t buffer_v2f927936fb = 0;
static uint64_t buffer_v9d734dcb98 = 0;
static uint64_t EHCIqtd_v375c61ff23 = 0;
static uint64_t buffer_va91e17441f = 0;
static uint64_t buffer_v1558f8ff23 = 0;
static uint64_t buffer_v786c246273 = 0;
static uint64_t buffer_v2456240a66 = 0;
static uint64_t buffer_v703fe59109 = 0;
static uint64_t buffer_vf6e405cda7 = 0;
static uint64_t buffer_v52b1791a45 = 0;
static uint64_t buffer_v604e263e57 = 0;
static uint64_t buffer_v513b7956d6 = 0;
static uint64_t buffer_ve8c77b7b86 = 0;

static uint8_t *get_data_2() {
    size_2 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vd35a3a1464_0; break;
    }
vd35a3a1464_0:;
    stateful_free(ehci_qh_0);
    ehci_qh_0 = stateful_malloc(0x30, /*chained=*/false);
    // printf("[+] ehci_qh_0 = 0x%lx\n", ehci_qh_0);
    uint8_t *v8cea5c8bc4 = (uint8_t *)malloc(0x4);
    fill(v8cea5c8bc4, 0x4, ((ehci_qh_0 & 0xffffffe0) | 0x1), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x0, 0x4, (uint8_t *)v8cea5c8bc4);
    free(v8cea5c8bc4);
    uint8_t *vf5d2148ced = (uint8_t *)malloc(0x4);
    fill(vf5d2148ced, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1b) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1c)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x4, 0x4, (uint8_t *)vf5d2148ced);
    free(vf5d2148ced);
    uint8_t *v905d811c1b = (uint8_t *)malloc(0x4);
    fill(v905d811c1b, 0x4, (((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x07 + 1)) - 1)) << 0x14) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x8, 0x4, (uint8_t *)v905d811c1b);
    free(v905d811c1b);
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v7039d22d04_0; break;
    }
v7039d22d04_0:;
    stateful_free(EHCIqtd_v3271dcf600);
    EHCIqtd_v3271dcf600 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] EHCIqtd_v3271dcf600 = 0x%lx\n", EHCIqtd_v3271dcf600);
    uint8_t *vcf92da64dc = (uint8_t *)malloc(0x4);
    fill(vcf92da64dc, 0x4, ((EHCIqtd_v3271dcf600 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0x0, 0x4, (uint8_t *)vcf92da64dc);
    free(vcf92da64dc);
    uint8_t *vdf7a78a660 = (uint8_t *)malloc(0x4);
    fill(vdf7a78a660, 0x4, ((EHCIqtd_v3271dcf600 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0x4, 0x4, (uint8_t *)vdf7a78a660);
    free(vdf7a78a660);
    uint8_t *vaa02f76e54 = (uint8_t *)malloc(0x4);
    fill(vaa02f76e54, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0x8, 0x4, (uint8_t *)vaa02f76e54);
    free(vaa02f76e54);
    stateful_free(buffer_v1770a5062a);
    buffer_v1770a5062a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1770a5062a = 0x%lx\n", buffer_v1770a5062a);
    uint8_t *vd625e7c457 = (uint8_t *)malloc(0x100);
    fill(vd625e7c457, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1770a5062a + 0x0, 0x100, (uint8_t *)vd625e7c457);
    free(vd625e7c457);
    uint8_t *vddb2f3dae9 = (uint8_t *)malloc(0x4);
    fill(vddb2f3dae9, 0x4, (buffer_v1770a5062a | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0xc, 0x4, (uint8_t *)vddb2f3dae9);
    free(vddb2f3dae9);
    stateful_free(buffer_v991cbb26c1);
    buffer_v991cbb26c1 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v991cbb26c1 = 0x%lx\n", buffer_v991cbb26c1);
    uint8_t *v1e49dc9e29 = (uint8_t *)malloc(0x100);
    fill(v1e49dc9e29, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v991cbb26c1 + 0x0, 0x100, (uint8_t *)v1e49dc9e29);
    free(v1e49dc9e29);
    uint8_t *v8ca9db0b53 = (uint8_t *)malloc(0x4);
    fill(v8ca9db0b53, 0x4, (buffer_v991cbb26c1 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0x10, 0x4, (uint8_t *)v8ca9db0b53);
    free(v8ca9db0b53);
    stateful_free(buffer_v2c73746464);
    buffer_v2c73746464 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2c73746464 = 0x%lx\n", buffer_v2c73746464);
    uint8_t *v43b545203b = (uint8_t *)malloc(0x100);
    fill(v43b545203b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2c73746464 + 0x0, 0x100, (uint8_t *)v43b545203b);
    free(v43b545203b);
    uint8_t *vae299c08e1 = (uint8_t *)malloc(0x4);
    fill(vae299c08e1, 0x4, (buffer_v2c73746464 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0x14, 0x4, (uint8_t *)vae299c08e1);
    free(vae299c08e1);
    stateful_free(buffer_vfdde282ec3);
    buffer_vfdde282ec3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfdde282ec3 = 0x%lx\n", buffer_vfdde282ec3);
    uint8_t *v7bfed5c5d4 = (uint8_t *)malloc(0x100);
    fill(v7bfed5c5d4, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfdde282ec3 + 0x0, 0x100, (uint8_t *)v7bfed5c5d4);
    free(v7bfed5c5d4);
    uint8_t *v20726dd9e0 = (uint8_t *)malloc(0x4);
    fill(v20726dd9e0, 0x4, (buffer_vfdde282ec3 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0x18, 0x4, (uint8_t *)v20726dd9e0);
    free(v20726dd9e0);
    stateful_free(buffer_v194a5bfdcf);
    buffer_v194a5bfdcf = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v194a5bfdcf = 0x%lx\n", buffer_v194a5bfdcf);
    uint8_t *vcd66eb5d10 = (uint8_t *)malloc(0x100);
    fill(vcd66eb5d10, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v194a5bfdcf + 0x0, 0x100, (uint8_t *)vcd66eb5d10);
    free(vcd66eb5d10);
    uint8_t *v4f926225ad = (uint8_t *)malloc(0x4);
    fill(v4f926225ad, 0x4, (buffer_v194a5bfdcf | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v3271dcf600 + 0x1c, 0x4, (uint8_t *)v4f926225ad);
    free(v4f926225ad);
    uint8_t *v6de5e02721 = (uint8_t *)malloc(0x4);
    fill(v6de5e02721, 0x4, ((EHCIqtd_v3271dcf600 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0xc, 0x4, (uint8_t *)v6de5e02721);
    free(v6de5e02721);
    goto v7039d22d04_out;
v7039d22d04_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v185f965898_0; break;
    }
v185f965898_0:;
    stateful_free(EHCIqtd_v647611e934);
    EHCIqtd_v647611e934 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] EHCIqtd_v647611e934 = 0x%lx\n", EHCIqtd_v647611e934);
    uint8_t *va9f5e7b14e = (uint8_t *)malloc(0x4);
    fill(va9f5e7b14e, 0x4, ((EHCIqtd_v647611e934 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0x0, 0x4, (uint8_t *)va9f5e7b14e);
    free(va9f5e7b14e);
    uint8_t *v35ede251e7 = (uint8_t *)malloc(0x4);
    fill(v35ede251e7, 0x4, ((EHCIqtd_v647611e934 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0x4, 0x4, (uint8_t *)v35ede251e7);
    free(v35ede251e7);
    uint8_t *vf1bd04e4c8 = (uint8_t *)malloc(0x4);
    fill(vf1bd04e4c8, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0x8, 0x4, (uint8_t *)vf1bd04e4c8);
    free(vf1bd04e4c8);
    stateful_free(buffer_vad7b70fad3);
    buffer_vad7b70fad3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vad7b70fad3 = 0x%lx\n", buffer_vad7b70fad3);
    uint8_t *vbe35a53466 = (uint8_t *)malloc(0x100);
    fill(vbe35a53466, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vad7b70fad3 + 0x0, 0x100, (uint8_t *)vbe35a53466);
    free(vbe35a53466);
    uint8_t *v7edd05ba29 = (uint8_t *)malloc(0x4);
    fill(v7edd05ba29, 0x4, (buffer_vad7b70fad3 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0xc, 0x4, (uint8_t *)v7edd05ba29);
    free(v7edd05ba29);
    stateful_free(buffer_v505a80b426);
    buffer_v505a80b426 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v505a80b426 = 0x%lx\n", buffer_v505a80b426);
    uint8_t *v413b5c6d6a = (uint8_t *)malloc(0x100);
    fill(v413b5c6d6a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v505a80b426 + 0x0, 0x100, (uint8_t *)v413b5c6d6a);
    free(v413b5c6d6a);
    uint8_t *vf57458f9bd = (uint8_t *)malloc(0x4);
    fill(vf57458f9bd, 0x4, (buffer_v505a80b426 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0x10, 0x4, (uint8_t *)vf57458f9bd);
    free(vf57458f9bd);
    stateful_free(buffer_v673d619208);
    buffer_v673d619208 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v673d619208 = 0x%lx\n", buffer_v673d619208);
    uint8_t *va5ee510fc9 = (uint8_t *)malloc(0x100);
    fill(va5ee510fc9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v673d619208 + 0x0, 0x100, (uint8_t *)va5ee510fc9);
    free(va5ee510fc9);
    uint8_t *vcb46120108 = (uint8_t *)malloc(0x4);
    fill(vcb46120108, 0x4, (buffer_v673d619208 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0x14, 0x4, (uint8_t *)vcb46120108);
    free(vcb46120108);
    stateful_free(buffer_v2f927936fb);
    buffer_v2f927936fb = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2f927936fb = 0x%lx\n", buffer_v2f927936fb);
    uint8_t *vc7b2f3ea7c = (uint8_t *)malloc(0x100);
    fill(vc7b2f3ea7c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2f927936fb + 0x0, 0x100, (uint8_t *)vc7b2f3ea7c);
    free(vc7b2f3ea7c);
    uint8_t *v5eb5d53c0c = (uint8_t *)malloc(0x4);
    fill(v5eb5d53c0c, 0x4, (buffer_v2f927936fb | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0x18, 0x4, (uint8_t *)v5eb5d53c0c);
    free(v5eb5d53c0c);
    stateful_free(buffer_v9d734dcb98);
    buffer_v9d734dcb98 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9d734dcb98 = 0x%lx\n", buffer_v9d734dcb98);
    uint8_t *v98c5c7d987 = (uint8_t *)malloc(0x100);
    fill(v98c5c7d987, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9d734dcb98 + 0x0, 0x100, (uint8_t *)v98c5c7d987);
    free(v98c5c7d987);
    uint8_t *v23e868bad3 = (uint8_t *)malloc(0x4);
    fill(v23e868bad3, 0x4, (buffer_v9d734dcb98 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v647611e934 + 0x1c, 0x4, (uint8_t *)v23e868bad3);
    free(v23e868bad3);
    uint8_t *v176088e55b = (uint8_t *)malloc(0x4);
    fill(v176088e55b, 0x4, ((EHCIqtd_v647611e934 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x10, 0x4, (uint8_t *)v176088e55b);
    free(v176088e55b);
    goto v185f965898_out;
v185f965898_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vd4d2885170_0; break;
    }
vd4d2885170_0:;
    stateful_free(EHCIqtd_v375c61ff23);
    EHCIqtd_v375c61ff23 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] EHCIqtd_v375c61ff23 = 0x%lx\n", EHCIqtd_v375c61ff23);
    uint8_t *v8c47eae185 = (uint8_t *)malloc(0x4);
    fill(v8c47eae185, 0x4, ((EHCIqtd_v375c61ff23 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0x0, 0x4, (uint8_t *)v8c47eae185);
    free(v8c47eae185);
    uint8_t *v792613ac21 = (uint8_t *)malloc(0x4);
    fill(v792613ac21, 0x4, ((EHCIqtd_v375c61ff23 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0x4, 0x4, (uint8_t *)v792613ac21);
    free(v792613ac21);
    uint8_t *v35cfb04b08 = (uint8_t *)malloc(0x4);
    fill(v35cfb04b08, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0x8, 0x4, (uint8_t *)v35cfb04b08);
    free(v35cfb04b08);
    stateful_free(buffer_va91e17441f);
    buffer_va91e17441f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va91e17441f = 0x%lx\n", buffer_va91e17441f);
    uint8_t *v515cd165ef = (uint8_t *)malloc(0x100);
    fill(v515cd165ef, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va91e17441f + 0x0, 0x100, (uint8_t *)v515cd165ef);
    free(v515cd165ef);
    uint8_t *v677ea36d9c = (uint8_t *)malloc(0x4);
    fill(v677ea36d9c, 0x4, (buffer_va91e17441f | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0xc, 0x4, (uint8_t *)v677ea36d9c);
    free(v677ea36d9c);
    stateful_free(buffer_v1558f8ff23);
    buffer_v1558f8ff23 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1558f8ff23 = 0x%lx\n", buffer_v1558f8ff23);
    uint8_t *v1bc6b50686 = (uint8_t *)malloc(0x100);
    fill(v1bc6b50686, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1558f8ff23 + 0x0, 0x100, (uint8_t *)v1bc6b50686);
    free(v1bc6b50686);
    uint8_t *v600ae5d2d6 = (uint8_t *)malloc(0x4);
    fill(v600ae5d2d6, 0x4, (buffer_v1558f8ff23 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0x10, 0x4, (uint8_t *)v600ae5d2d6);
    free(v600ae5d2d6);
    stateful_free(buffer_v786c246273);
    buffer_v786c246273 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v786c246273 = 0x%lx\n", buffer_v786c246273);
    uint8_t *v74b6ee7f62 = (uint8_t *)malloc(0x100);
    fill(v74b6ee7f62, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v786c246273 + 0x0, 0x100, (uint8_t *)v74b6ee7f62);
    free(v74b6ee7f62);
    uint8_t *vf7b7b3f1da = (uint8_t *)malloc(0x4);
    fill(vf7b7b3f1da, 0x4, (buffer_v786c246273 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0x14, 0x4, (uint8_t *)vf7b7b3f1da);
    free(vf7b7b3f1da);
    stateful_free(buffer_v2456240a66);
    buffer_v2456240a66 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2456240a66 = 0x%lx\n", buffer_v2456240a66);
    uint8_t *vc327e42d2d = (uint8_t *)malloc(0x100);
    fill(vc327e42d2d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2456240a66 + 0x0, 0x100, (uint8_t *)vc327e42d2d);
    free(vc327e42d2d);
    uint8_t *v714a51398e = (uint8_t *)malloc(0x4);
    fill(v714a51398e, 0x4, (buffer_v2456240a66 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0x18, 0x4, (uint8_t *)v714a51398e);
    free(v714a51398e);
    stateful_free(buffer_v703fe59109);
    buffer_v703fe59109 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v703fe59109 = 0x%lx\n", buffer_v703fe59109);
    uint8_t *vf0ebb8702e = (uint8_t *)malloc(0x100);
    fill(vf0ebb8702e, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v703fe59109 + 0x0, 0x100, (uint8_t *)vf0ebb8702e);
    free(vf0ebb8702e);
    uint8_t *vcb4ff2e218 = (uint8_t *)malloc(0x4);
    fill(vcb4ff2e218, 0x4, (buffer_v703fe59109 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v375c61ff23 + 0x1c, 0x4, (uint8_t *)vcb4ff2e218);
    free(vcb4ff2e218);
    uint8_t *v46c8a6427d = (uint8_t *)malloc(0x4);
    fill(v46c8a6427d, 0x4, ((EHCIqtd_v375c61ff23 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x14, 0x4, (uint8_t *)v46c8a6427d);
    free(v46c8a6427d);
    goto vd4d2885170_out;
vd4d2885170_out:;
    uint8_t *v37448afb30 = (uint8_t *)malloc(0x4);
    fill(v37448afb30, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x18, 0x4, (uint8_t *)v37448afb30);
    free(v37448afb30);
    stateful_free(buffer_vf6e405cda7);
    buffer_vf6e405cda7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf6e405cda7 = 0x%lx\n", buffer_vf6e405cda7);
    uint8_t *v67b899768b = (uint8_t *)malloc(0x100);
    fill(v67b899768b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf6e405cda7 + 0x0, 0x100, (uint8_t *)v67b899768b);
    free(v67b899768b);
    uint8_t *v836cf99b3e = (uint8_t *)malloc(0x4);
    fill(v836cf99b3e, 0x4, (buffer_vf6e405cda7 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x1c, 0x4, (uint8_t *)v836cf99b3e);
    free(v836cf99b3e);
    stateful_free(buffer_v52b1791a45);
    buffer_v52b1791a45 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v52b1791a45 = 0x%lx\n", buffer_v52b1791a45);
    uint8_t *v2e1fee2b03 = (uint8_t *)malloc(0x100);
    fill(v2e1fee2b03, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v52b1791a45 + 0x0, 0x100, (uint8_t *)v2e1fee2b03);
    free(v2e1fee2b03);
    uint8_t *v798246e666 = (uint8_t *)malloc(0x4);
    fill(v798246e666, 0x4, (buffer_v52b1791a45 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x20, 0x4, (uint8_t *)v798246e666);
    free(v798246e666);
    stateful_free(buffer_v604e263e57);
    buffer_v604e263e57 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v604e263e57 = 0x%lx\n", buffer_v604e263e57);
    uint8_t *v7cc6485fdb = (uint8_t *)malloc(0x100);
    fill(v7cc6485fdb, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v604e263e57 + 0x0, 0x100, (uint8_t *)v7cc6485fdb);
    free(v7cc6485fdb);
    uint8_t *vf0909b4a91 = (uint8_t *)malloc(0x4);
    fill(vf0909b4a91, 0x4, (buffer_v604e263e57 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x24, 0x4, (uint8_t *)vf0909b4a91);
    free(vf0909b4a91);
    stateful_free(buffer_v513b7956d6);
    buffer_v513b7956d6 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v513b7956d6 = 0x%lx\n", buffer_v513b7956d6);
    uint8_t *vbe10dce568 = (uint8_t *)malloc(0x100);
    fill(vbe10dce568, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v513b7956d6 + 0x0, 0x100, (uint8_t *)vbe10dce568);
    free(vbe10dce568);
    uint8_t *vcb1dfd4755 = (uint8_t *)malloc(0x4);
    fill(vcb1dfd4755, 0x4, (buffer_v513b7956d6 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x28, 0x4, (uint8_t *)vcb1dfd4755);
    free(vcb1dfd4755);
    stateful_free(buffer_ve8c77b7b86);
    buffer_ve8c77b7b86 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve8c77b7b86 = 0x%lx\n", buffer_ve8c77b7b86);
    uint8_t *ve01ce89d71 = (uint8_t *)malloc(0x100);
    fill(ve01ce89d71, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve8c77b7b86 + 0x0, 0x100, (uint8_t *)ve01ce89d71);
    free(ve01ce89d71);
    uint8_t *vb032378fa6 = (uint8_t *)malloc(0x4);
    fill(vb032378fa6, 0x4, (buffer_ve8c77b7b86 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_qh_0 + 0x2c, 0x4, (uint8_t *)vb032378fa6);
    free(vb032378fa6);
    uint64_t v320919da62 = ((ehci_qh_0 & 0xffffffe0) | 0x1);
    size_2 += serialize(Data, size_2, CALLBACK_MAXSIZE, get_interface_id("operational", EVENT_TYPE_MMIO_WRITE), 0x14, 0x4, (uint8_t *)&v320919da62);
    goto vd35a3a1464_out;
vd35a3a1464_out:;
    return Data;
}

static size_t get_size_2() { return size_2;}

// ==== hw/usb/hcd-ehci.c:ehci_advance_periodic_state:list = ehci->periodiclistbase ============================
size_t size_3 = 0;

static uint64_t ehci_mix_0 = 0;
static uint64_t EHCIqtd_v250f33c8f4 = 0;
static uint64_t buffer_va4e8f069e7 = 0;
static uint64_t buffer_v18f44bb980 = 0;
static uint64_t buffer_v570b1a6d8b = 0;
static uint64_t buffer_v86d34bfe1d = 0;
static uint64_t buffer_v5be5e6a41d = 0;
static uint64_t EHCIqtd_v8714501fe3 = 0;
static uint64_t buffer_v60f80d5de7 = 0;
static uint64_t buffer_v9fd8c2ea88 = 0;
static uint64_t buffer_v289cd17d9c = 0;
static uint64_t buffer_v750e37a7fe = 0;
static uint64_t buffer_v9da63119f6 = 0;
static uint64_t EHCIqtd_v7e7c6aec2c = 0;
static uint64_t buffer_v4492cc126e = 0;
static uint64_t buffer_v1cf843631c = 0;
static uint64_t buffer_vfe4e460f87 = 0;
static uint64_t buffer_v2b96d0ed4e = 0;
static uint64_t buffer_vfd0293cd9d = 0;
static uint64_t buffer_v754ab5b69d = 0;
static uint64_t buffer_ve780160194 = 0;
static uint64_t buffer_va9155dd48f = 0;
static uint64_t buffer_vcdb4b13ec6 = 0;
static uint64_t buffer_vef77324560 = 0;
static uint64_t v81fc446b56_base = 0;
static uint64_t ehci_mix_0_1 = 0;
static uint64_t buffer_vbf90c4b98e = 0;
static uint64_t buffer_vf54c01fd7a = 0;
static uint64_t buffer_v1c0e54d7c3 = 0;
static uint64_t buffer_vbbc173c726 = 0;
static uint64_t buffer_vc838435ac5 = 0;
static uint64_t buffer_v806a5ab8b5 = 0;
static uint64_t buffer_v601a57ec2a = 0;
static uint64_t vd91d15a8df_base = 0;
static uint64_t ehci_mix_0_1_2 = 0;
static uint64_t buffer_v77c801a841 = 0;
static uint64_t buffer_v85b16cd46e = 0;
static uint64_t v6b6e3034f5_base = 0;

static uint8_t *get_data_3() {
    size_3 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 3){ 
        case 0: goto v8d05f9d4df_0; break;
        case 1: goto v8d05f9d4df_1; break;
        case 2: goto v8d05f9d4df_2; break;
    }
v8d05f9d4df_0:;
    stateful_free(ehci_mix_0);
    ehci_mix_0 = stateful_malloc(0x30, /*chained=*/false);
    // printf("[+] ehci_mix_0 = 0x%lx\n", ehci_mix_0);
    uint8_t *vaffce8e962 = (uint8_t *)malloc(0x4);
    fill(vaffce8e962, 0x4, ((ehci_mix_0 & 0xffffffe0) | 0x1), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x0, 0x4, (uint8_t *)vaffce8e962);
    free(vaffce8e962);
    uint8_t *v20a22b16cf = (uint8_t *)malloc(0x4);
    fill(v20a22b16cf, 0x4, (((0 & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1b) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x1c)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x4, 0x4, (uint8_t *)v20a22b16cf);
    free(v20a22b16cf);
    uint8_t *v938d45104e = (uint8_t *)malloc(0x4);
    fill(v938d45104e, 0x4, (((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x07 + 1)) - 1)) << 0x14) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x1b)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x8, 0x4, (uint8_t *)v938d45104e);
    free(v938d45104e);
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vbb8cc59b97_0; break;
    }
vbb8cc59b97_0:;
    stateful_free(EHCIqtd_v250f33c8f4);
    EHCIqtd_v250f33c8f4 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] EHCIqtd_v250f33c8f4 = 0x%lx\n", EHCIqtd_v250f33c8f4);
    uint8_t *v9981fd1dec = (uint8_t *)malloc(0x4);
    fill(v9981fd1dec, 0x4, ((EHCIqtd_v250f33c8f4 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0x0, 0x4, (uint8_t *)v9981fd1dec);
    free(v9981fd1dec);
    uint8_t *va22a45f96b = (uint8_t *)malloc(0x4);
    fill(va22a45f96b, 0x4, ((EHCIqtd_v250f33c8f4 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0x4, 0x4, (uint8_t *)va22a45f96b);
    free(va22a45f96b);
    uint8_t *v975fc838a1 = (uint8_t *)malloc(0x4);
    fill(v975fc838a1, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0x8, 0x4, (uint8_t *)v975fc838a1);
    free(v975fc838a1);
    stateful_free(buffer_va4e8f069e7);
    buffer_va4e8f069e7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va4e8f069e7 = 0x%lx\n", buffer_va4e8f069e7);
    uint8_t *va49778e219 = (uint8_t *)malloc(0x100);
    fill(va49778e219, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va4e8f069e7 + 0x0, 0x100, (uint8_t *)va49778e219);
    free(va49778e219);
    uint8_t *v8b3d69b717 = (uint8_t *)malloc(0x4);
    fill(v8b3d69b717, 0x4, (buffer_va4e8f069e7 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0xc, 0x4, (uint8_t *)v8b3d69b717);
    free(v8b3d69b717);
    stateful_free(buffer_v18f44bb980);
    buffer_v18f44bb980 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v18f44bb980 = 0x%lx\n", buffer_v18f44bb980);
    uint8_t *v93fde11fb6 = (uint8_t *)malloc(0x100);
    fill(v93fde11fb6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v18f44bb980 + 0x0, 0x100, (uint8_t *)v93fde11fb6);
    free(v93fde11fb6);
    uint8_t *v1960db478e = (uint8_t *)malloc(0x4);
    fill(v1960db478e, 0x4, (buffer_v18f44bb980 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0x10, 0x4, (uint8_t *)v1960db478e);
    free(v1960db478e);
    stateful_free(buffer_v570b1a6d8b);
    buffer_v570b1a6d8b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v570b1a6d8b = 0x%lx\n", buffer_v570b1a6d8b);
    uint8_t *vd58bac20b0 = (uint8_t *)malloc(0x100);
    fill(vd58bac20b0, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v570b1a6d8b + 0x0, 0x100, (uint8_t *)vd58bac20b0);
    free(vd58bac20b0);
    uint8_t *v8501bca8de = (uint8_t *)malloc(0x4);
    fill(v8501bca8de, 0x4, (buffer_v570b1a6d8b | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0x14, 0x4, (uint8_t *)v8501bca8de);
    free(v8501bca8de);
    stateful_free(buffer_v86d34bfe1d);
    buffer_v86d34bfe1d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v86d34bfe1d = 0x%lx\n", buffer_v86d34bfe1d);
    uint8_t *v4655114404 = (uint8_t *)malloc(0x100);
    fill(v4655114404, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v86d34bfe1d + 0x0, 0x100, (uint8_t *)v4655114404);
    free(v4655114404);
    uint8_t *v15d3c9bad8 = (uint8_t *)malloc(0x4);
    fill(v15d3c9bad8, 0x4, (buffer_v86d34bfe1d | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0x18, 0x4, (uint8_t *)v15d3c9bad8);
    free(v15d3c9bad8);
    stateful_free(buffer_v5be5e6a41d);
    buffer_v5be5e6a41d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v5be5e6a41d = 0x%lx\n", buffer_v5be5e6a41d);
    uint8_t *ve1eac6fac7 = (uint8_t *)malloc(0x100);
    fill(ve1eac6fac7, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v5be5e6a41d + 0x0, 0x100, (uint8_t *)ve1eac6fac7);
    free(ve1eac6fac7);
    uint8_t *ve086f500f2 = (uint8_t *)malloc(0x4);
    fill(ve086f500f2, 0x4, (buffer_v5be5e6a41d | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v250f33c8f4 + 0x1c, 0x4, (uint8_t *)ve086f500f2);
    free(ve086f500f2);
    uint8_t *vad750469ea = (uint8_t *)malloc(0x4);
    fill(vad750469ea, 0x4, ((EHCIqtd_v250f33c8f4 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0xc, 0x4, (uint8_t *)vad750469ea);
    free(vad750469ea);
    goto vbb8cc59b97_out;
vbb8cc59b97_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vf0706a797d_0; break;
    }
vf0706a797d_0:;
    stateful_free(EHCIqtd_v8714501fe3);
    EHCIqtd_v8714501fe3 = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] EHCIqtd_v8714501fe3 = 0x%lx\n", EHCIqtd_v8714501fe3);
    uint8_t *vb464a07f3c = (uint8_t *)malloc(0x4);
    fill(vb464a07f3c, 0x4, ((EHCIqtd_v8714501fe3 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0x0, 0x4, (uint8_t *)vb464a07f3c);
    free(vb464a07f3c);
    uint8_t *v83ce962b45 = (uint8_t *)malloc(0x4);
    fill(v83ce962b45, 0x4, ((EHCIqtd_v8714501fe3 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0x4, 0x4, (uint8_t *)v83ce962b45);
    free(v83ce962b45);
    uint8_t *vdfad124a68 = (uint8_t *)malloc(0x4);
    fill(vdfad124a68, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0x8, 0x4, (uint8_t *)vdfad124a68);
    free(vdfad124a68);
    stateful_free(buffer_v60f80d5de7);
    buffer_v60f80d5de7 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v60f80d5de7 = 0x%lx\n", buffer_v60f80d5de7);
    uint8_t *vbd797e9a8b = (uint8_t *)malloc(0x100);
    fill(vbd797e9a8b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v60f80d5de7 + 0x0, 0x100, (uint8_t *)vbd797e9a8b);
    free(vbd797e9a8b);
    uint8_t *vdf85e6bfe2 = (uint8_t *)malloc(0x4);
    fill(vdf85e6bfe2, 0x4, (buffer_v60f80d5de7 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0xc, 0x4, (uint8_t *)vdf85e6bfe2);
    free(vdf85e6bfe2);
    stateful_free(buffer_v9fd8c2ea88);
    buffer_v9fd8c2ea88 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9fd8c2ea88 = 0x%lx\n", buffer_v9fd8c2ea88);
    uint8_t *vc098d28608 = (uint8_t *)malloc(0x100);
    fill(vc098d28608, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9fd8c2ea88 + 0x0, 0x100, (uint8_t *)vc098d28608);
    free(vc098d28608);
    uint8_t *vf0b871778c = (uint8_t *)malloc(0x4);
    fill(vf0b871778c, 0x4, (buffer_v9fd8c2ea88 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0x10, 0x4, (uint8_t *)vf0b871778c);
    free(vf0b871778c);
    stateful_free(buffer_v289cd17d9c);
    buffer_v289cd17d9c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v289cd17d9c = 0x%lx\n", buffer_v289cd17d9c);
    uint8_t *v14ab54b4c1 = (uint8_t *)malloc(0x100);
    fill(v14ab54b4c1, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v289cd17d9c + 0x0, 0x100, (uint8_t *)v14ab54b4c1);
    free(v14ab54b4c1);
    uint8_t *v523c9ef4eb = (uint8_t *)malloc(0x4);
    fill(v523c9ef4eb, 0x4, (buffer_v289cd17d9c | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0x14, 0x4, (uint8_t *)v523c9ef4eb);
    free(v523c9ef4eb);
    stateful_free(buffer_v750e37a7fe);
    buffer_v750e37a7fe = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v750e37a7fe = 0x%lx\n", buffer_v750e37a7fe);
    uint8_t *va185a46d5b = (uint8_t *)malloc(0x100);
    fill(va185a46d5b, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v750e37a7fe + 0x0, 0x100, (uint8_t *)va185a46d5b);
    free(va185a46d5b);
    uint8_t *v21c7dfdec5 = (uint8_t *)malloc(0x4);
    fill(v21c7dfdec5, 0x4, (buffer_v750e37a7fe | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0x18, 0x4, (uint8_t *)v21c7dfdec5);
    free(v21c7dfdec5);
    stateful_free(buffer_v9da63119f6);
    buffer_v9da63119f6 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v9da63119f6 = 0x%lx\n", buffer_v9da63119f6);
    uint8_t *v69c897da22 = (uint8_t *)malloc(0x100);
    fill(v69c897da22, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v9da63119f6 + 0x0, 0x100, (uint8_t *)v69c897da22);
    free(v69c897da22);
    uint8_t *v5b434e022c = (uint8_t *)malloc(0x4);
    fill(v5b434e022c, 0x4, (buffer_v9da63119f6 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v8714501fe3 + 0x1c, 0x4, (uint8_t *)v5b434e022c);
    free(v5b434e022c);
    uint8_t *v77106d15cd = (uint8_t *)malloc(0x4);
    fill(v77106d15cd, 0x4, ((EHCIqtd_v8714501fe3 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x10, 0x4, (uint8_t *)v77106d15cd);
    free(v77106d15cd);
    goto vf0706a797d_out;
vf0706a797d_out:;
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vb66da8e3a7_0; break;
    }
vb66da8e3a7_0:;
    stateful_free(EHCIqtd_v7e7c6aec2c);
    EHCIqtd_v7e7c6aec2c = stateful_malloc(0x20, /*chained=*/false);
    // printf("[+] EHCIqtd_v7e7c6aec2c = 0x%lx\n", EHCIqtd_v7e7c6aec2c);
    uint8_t *v6f18780731 = (uint8_t *)malloc(0x4);
    fill(v6f18780731, 0x4, ((EHCIqtd_v7e7c6aec2c & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0x0, 0x4, (uint8_t *)v6f18780731);
    free(v6f18780731);
    uint8_t *v345ce8cb0a = (uint8_t *)malloc(0x4);
    fill(v345ce8cb0a, 0x4, ((EHCIqtd_v7e7c6aec2c & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0x4, 0x4, (uint8_t *)v345ce8cb0a);
    free(v345ce8cb0a);
    uint8_t *vf57bbe5811 = (uint8_t *)malloc(0x4);
    fill(vf57bbe5811, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0x8, 0x4, (uint8_t *)vf57bbe5811);
    free(vf57bbe5811);
    stateful_free(buffer_v4492cc126e);
    buffer_v4492cc126e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v4492cc126e = 0x%lx\n", buffer_v4492cc126e);
    uint8_t *v85d40ed276 = (uint8_t *)malloc(0x100);
    fill(v85d40ed276, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v4492cc126e + 0x0, 0x100, (uint8_t *)v85d40ed276);
    free(v85d40ed276);
    uint8_t *vc8466f9c45 = (uint8_t *)malloc(0x4);
    fill(vc8466f9c45, 0x4, (buffer_v4492cc126e | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0xc, 0x4, (uint8_t *)vc8466f9c45);
    free(vc8466f9c45);
    stateful_free(buffer_v1cf843631c);
    buffer_v1cf843631c = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1cf843631c = 0x%lx\n", buffer_v1cf843631c);
    uint8_t *v12fdd31232 = (uint8_t *)malloc(0x100);
    fill(v12fdd31232, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1cf843631c + 0x0, 0x100, (uint8_t *)v12fdd31232);
    free(v12fdd31232);
    uint8_t *v7d8ab4976e = (uint8_t *)malloc(0x4);
    fill(v7d8ab4976e, 0x4, (buffer_v1cf843631c | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0x10, 0x4, (uint8_t *)v7d8ab4976e);
    free(v7d8ab4976e);
    stateful_free(buffer_vfe4e460f87);
    buffer_vfe4e460f87 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfe4e460f87 = 0x%lx\n", buffer_vfe4e460f87);
    uint8_t *vafed0efad2 = (uint8_t *)malloc(0x100);
    fill(vafed0efad2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfe4e460f87 + 0x0, 0x100, (uint8_t *)vafed0efad2);
    free(vafed0efad2);
    uint8_t *v6c4862a4bd = (uint8_t *)malloc(0x4);
    fill(v6c4862a4bd, 0x4, (buffer_vfe4e460f87 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0x14, 0x4, (uint8_t *)v6c4862a4bd);
    free(v6c4862a4bd);
    stateful_free(buffer_v2b96d0ed4e);
    buffer_v2b96d0ed4e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2b96d0ed4e = 0x%lx\n", buffer_v2b96d0ed4e);
    uint8_t *vbbc235c6bd = (uint8_t *)malloc(0x100);
    fill(vbbc235c6bd, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2b96d0ed4e + 0x0, 0x100, (uint8_t *)vbbc235c6bd);
    free(vbbc235c6bd);
    uint8_t *v919108b063 = (uint8_t *)malloc(0x4);
    fill(v919108b063, 0x4, (buffer_v2b96d0ed4e | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0x18, 0x4, (uint8_t *)v919108b063);
    free(v919108b063);
    stateful_free(buffer_vfd0293cd9d);
    buffer_vfd0293cd9d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vfd0293cd9d = 0x%lx\n", buffer_vfd0293cd9d);
    uint8_t *vece6ce51ce = (uint8_t *)malloc(0x100);
    fill(vece6ce51ce, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vfd0293cd9d + 0x0, 0x100, (uint8_t *)vece6ce51ce);
    free(vece6ce51ce);
    uint8_t *v815db01a81 = (uint8_t *)malloc(0x4);
    fill(v815db01a81, 0x4, (buffer_vfd0293cd9d | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, EHCIqtd_v7e7c6aec2c + 0x1c, 0x4, (uint8_t *)v815db01a81);
    free(v815db01a81);
    uint8_t *ve78824f506 = (uint8_t *)malloc(0x4);
    fill(ve78824f506, 0x4, ((EHCIqtd_v7e7c6aec2c & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x14, 0x4, (uint8_t *)ve78824f506);
    free(ve78824f506);
    goto vb66da8e3a7_out;
vb66da8e3a7_out:;
    uint8_t *v4826a22247 = (uint8_t *)malloc(0x4);
    fill(v4826a22247, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0f + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x18, 0x4, (uint8_t *)v4826a22247);
    free(v4826a22247);
    stateful_free(buffer_v754ab5b69d);
    buffer_v754ab5b69d = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v754ab5b69d = 0x%lx\n", buffer_v754ab5b69d);
    uint8_t *v7f5885309c = (uint8_t *)malloc(0x100);
    fill(v7f5885309c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v754ab5b69d + 0x0, 0x100, (uint8_t *)v7f5885309c);
    free(v7f5885309c);
    uint8_t *va9ed0290dd = (uint8_t *)malloc(0x4);
    fill(va9ed0290dd, 0x4, (buffer_v754ab5b69d | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x1c, 0x4, (uint8_t *)va9ed0290dd);
    free(va9ed0290dd);
    stateful_free(buffer_ve780160194);
    buffer_ve780160194 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve780160194 = 0x%lx\n", buffer_ve780160194);
    uint8_t *v9e0516bcb8 = (uint8_t *)malloc(0x100);
    fill(v9e0516bcb8, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve780160194 + 0x0, 0x100, (uint8_t *)v9e0516bcb8);
    free(v9e0516bcb8);
    uint8_t *vd811a6c0af = (uint8_t *)malloc(0x4);
    fill(vd811a6c0af, 0x4, (buffer_ve780160194 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x20, 0x4, (uint8_t *)vd811a6c0af);
    free(vd811a6c0af);
    stateful_free(buffer_va9155dd48f);
    buffer_va9155dd48f = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_va9155dd48f = 0x%lx\n", buffer_va9155dd48f);
    uint8_t *vc47f3f2bb9 = (uint8_t *)malloc(0x100);
    fill(vc47f3f2bb9, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_va9155dd48f + 0x0, 0x100, (uint8_t *)vc47f3f2bb9);
    free(vc47f3f2bb9);
    uint8_t *vd35af022c9 = (uint8_t *)malloc(0x4);
    fill(vd35af022c9, 0x4, (buffer_va9155dd48f | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x24, 0x4, (uint8_t *)vd35af022c9);
    free(vd35af022c9);
    stateful_free(buffer_vcdb4b13ec6);
    buffer_vcdb4b13ec6 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vcdb4b13ec6 = 0x%lx\n", buffer_vcdb4b13ec6);
    uint8_t *v92415203d6 = (uint8_t *)malloc(0x100);
    fill(v92415203d6, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vcdb4b13ec6 + 0x0, 0x100, (uint8_t *)v92415203d6);
    free(v92415203d6);
    uint8_t *v47ce727b4b = (uint8_t *)malloc(0x4);
    fill(v47ce727b4b, 0x4, (buffer_vcdb4b13ec6 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x28, 0x4, (uint8_t *)v47ce727b4b);
    free(v47ce727b4b);
    stateful_free(buffer_vef77324560);
    buffer_vef77324560 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vef77324560 = 0x%lx\n", buffer_vef77324560);
    uint8_t *vb61219ad8c = (uint8_t *)malloc(0x100);
    fill(vb61219ad8c, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vef77324560 + 0x0, 0x100, (uint8_t *)vb61219ad8c);
    free(vb61219ad8c);
    uint8_t *v96d4e7ce46 = (uint8_t *)malloc(0x4);
    fill(v96d4e7ce46, 0x4, (buffer_vef77324560 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0 + 0x2c, 0x4, (uint8_t *)v96d4e7ce46);
    free(v96d4e7ce46);
    stateful_free(v81fc446b56_base);
    v81fc446b56_base = stateful_malloc(0x1000, /*chained=*/false);
    // printf("[+] v81fc446b56_base = 0x%lx\n", v81fc446b56_base);
    uint8_t *v133df6e9b5 = (uint8_t *)malloc(0x1000);
    fill(v133df6e9b5, 0x1000, ((ehci_mix_0 & 0xffffffe0) | 0x1), 0x1000 > 0x4 ? 0x4 : 0x1000);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, v81fc446b56_base, 0x1000, (uint8_t *)v133df6e9b5);
    free(v133df6e9b5);
    uint64_t v7c6bdbe378 = (v81fc446b56_base | 0x0);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, get_interface_id("operational", EVENT_TYPE_MMIO_WRITE), 0x14, 0x4, (uint8_t *)&v7c6bdbe378);
    goto v8d05f9d4df_out;
v8d05f9d4df_1:;
    stateful_free(ehci_mix_0_1);
    ehci_mix_0_1 = stateful_malloc(0x40, /*chained=*/false);
    // printf("[+] ehci_mix_0_1 = 0x%lx\n", ehci_mix_0_1);
    uint8_t *vb40aaa7c7a = (uint8_t *)malloc(0x4);
    fill(vb40aaa7c7a, 0x4, ((ehci_mix_0_1 & 0xffffffe0) | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x0, 0x4, (uint8_t *)vb40aaa7c7a);
    free(vb40aaa7c7a);
    uint8_t *vcbacc1598e = (uint8_t *)malloc(0x4);
    fill(vcbacc1598e, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x4, 0x4, (uint8_t *)vcbacc1598e);
    free(vcbacc1598e);
    uint8_t *v4a3e176287 = (uint8_t *)malloc(0x4);
    fill(v4a3e176287, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x8, 0x4, (uint8_t *)v4a3e176287);
    free(v4a3e176287);
    uint8_t *ve7ffbb72c8 = (uint8_t *)malloc(0x4);
    fill(ve7ffbb72c8, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0xc, 0x4, (uint8_t *)ve7ffbb72c8);
    free(ve7ffbb72c8);
    uint8_t *v46740c3e4d = (uint8_t *)malloc(0x4);
    fill(v46740c3e4d, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x10, 0x4, (uint8_t *)v46740c3e4d);
    free(v46740c3e4d);
    uint8_t *vb8f4665798 = (uint8_t *)malloc(0x4);
    fill(vb8f4665798, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x14, 0x4, (uint8_t *)vb8f4665798);
    free(vb8f4665798);
    uint8_t *v4d73e48039 = (uint8_t *)malloc(0x4);
    fill(v4d73e48039, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x18, 0x4, (uint8_t *)v4d73e48039);
    free(v4d73e48039);
    uint8_t *v9956c9743a = (uint8_t *)malloc(0x4);
    fill(v9956c9743a, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x1c, 0x4, (uint8_t *)v9956c9743a);
    free(v9956c9743a);
    uint8_t *ve7a01b9df7 = (uint8_t *)malloc(0x4);
    fill(ve7a01b9df7, 0x4, (((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x20, 0x4, (uint8_t *)ve7a01b9df7);
    free(ve7a01b9df7);
    stateful_free(buffer_vbf90c4b98e);
    buffer_vbf90c4b98e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbf90c4b98e = 0x%lx\n", buffer_vbf90c4b98e);
    uint8_t *v40b7c7ba7f = (uint8_t *)malloc(0x100);
    fill(v40b7c7ba7f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbf90c4b98e + 0x0, 0x100, (uint8_t *)v40b7c7ba7f);
    free(v40b7c7ba7f);
    uint8_t *v64f33f45f6 = (uint8_t *)malloc(0x4);
    fill(v64f33f45f6, 0x4, (buffer_vbf90c4b98e | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x24, 0x4, (uint8_t *)v64f33f45f6);
    free(v64f33f45f6);
    stateful_free(buffer_vf54c01fd7a);
    buffer_vf54c01fd7a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vf54c01fd7a = 0x%lx\n", buffer_vf54c01fd7a);
    uint8_t *v615620f30f = (uint8_t *)malloc(0x100);
    fill(v615620f30f, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vf54c01fd7a + 0x0, 0x100, (uint8_t *)v615620f30f);
    free(v615620f30f);
    uint8_t *vf9f0601253 = (uint8_t *)malloc(0x4);
    fill(vf9f0601253, 0x4, (buffer_vf54c01fd7a | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x28, 0x4, (uint8_t *)vf9f0601253);
    free(vf9f0601253);
    stateful_free(buffer_v1c0e54d7c3);
    buffer_v1c0e54d7c3 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v1c0e54d7c3 = 0x%lx\n", buffer_v1c0e54d7c3);
    uint8_t *v216c9bc309 = (uint8_t *)malloc(0x100);
    fill(v216c9bc309, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v1c0e54d7c3 + 0x0, 0x100, (uint8_t *)v216c9bc309);
    free(v216c9bc309);
    uint8_t *v3886c62ecc = (uint8_t *)malloc(0x4);
    fill(v3886c62ecc, 0x4, (buffer_v1c0e54d7c3 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x2c, 0x4, (uint8_t *)v3886c62ecc);
    free(v3886c62ecc);
    stateful_free(buffer_vbbc173c726);
    buffer_vbbc173c726 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vbbc173c726 = 0x%lx\n", buffer_vbbc173c726);
    uint8_t *v5ca5042e10 = (uint8_t *)malloc(0x100);
    fill(v5ca5042e10, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vbbc173c726 + 0x0, 0x100, (uint8_t *)v5ca5042e10);
    free(v5ca5042e10);
    uint8_t *v94308f8712 = (uint8_t *)malloc(0x4);
    fill(v94308f8712, 0x4, (buffer_vbbc173c726 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x30, 0x4, (uint8_t *)v94308f8712);
    free(v94308f8712);
    stateful_free(buffer_vc838435ac5);
    buffer_vc838435ac5 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_vc838435ac5 = 0x%lx\n", buffer_vc838435ac5);
    uint8_t *vc29aa86e2d = (uint8_t *)malloc(0x100);
    fill(vc29aa86e2d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_vc838435ac5 + 0x0, 0x100, (uint8_t *)vc29aa86e2d);
    free(vc29aa86e2d);
    uint8_t *ve7c7b483ed = (uint8_t *)malloc(0x4);
    fill(ve7c7b483ed, 0x4, (buffer_vc838435ac5 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x34, 0x4, (uint8_t *)ve7c7b483ed);
    free(ve7c7b483ed);
    stateful_free(buffer_v806a5ab8b5);
    buffer_v806a5ab8b5 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v806a5ab8b5 = 0x%lx\n", buffer_v806a5ab8b5);
    uint8_t *v606ae32b89 = (uint8_t *)malloc(0x100);
    fill(v606ae32b89, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v806a5ab8b5 + 0x0, 0x100, (uint8_t *)v606ae32b89);
    free(v606ae32b89);
    uint8_t *vee19141604 = (uint8_t *)malloc(0x4);
    fill(vee19141604, 0x4, (buffer_v806a5ab8b5 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x38, 0x4, (uint8_t *)vee19141604);
    free(vee19141604);
    stateful_free(buffer_v601a57ec2a);
    buffer_v601a57ec2a = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v601a57ec2a = 0x%lx\n", buffer_v601a57ec2a);
    uint8_t *v3d2c163680 = (uint8_t *)malloc(0x100);
    fill(v3d2c163680, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v601a57ec2a + 0x0, 0x100, (uint8_t *)v3d2c163680);
    free(v3d2c163680);
    uint8_t *v7143f8fd38 = (uint8_t *)malloc(0x4);
    fill(v7143f8fd38, 0x4, (buffer_v601a57ec2a | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1 + 0x3c, 0x4, (uint8_t *)v7143f8fd38);
    free(v7143f8fd38);
    stateful_free(vd91d15a8df_base);
    vd91d15a8df_base = stateful_malloc(0x1000, /*chained=*/false);
    // printf("[+] vd91d15a8df_base = 0x%lx\n", vd91d15a8df_base);
    uint8_t *v3f4f87383d = (uint8_t *)malloc(0x1000);
    fill(v3f4f87383d, 0x1000, ((ehci_mix_0_1 & 0xffffffe0) | 0x0), 0x1000 > 0x4 ? 0x4 : 0x1000);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, vd91d15a8df_base, 0x1000, (uint8_t *)v3f4f87383d);
    free(v3f4f87383d);
    uint64_t vbbf6da7c44 = (vd91d15a8df_base | 0x0);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, get_interface_id("operational", EVENT_TYPE_MMIO_WRITE), 0x14, 0x4, (uint8_t *)&vbbf6da7c44);
    goto v8d05f9d4df_out;
v8d05f9d4df_2:;
    stateful_free(ehci_mix_0_1_2);
    ehci_mix_0_1_2 = stateful_malloc(0x1c, /*chained=*/false);
    // printf("[+] ehci_mix_0_1_2 = 0x%lx\n", ehci_mix_0_1_2);
    uint8_t *v658df18fd5 = (uint8_t *)malloc(0x4);
    fill(v658df18fd5, 0x4, ((ehci_mix_0_1_2 & 0xffffffe0) | 0x2), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1_2 + 0x0, 0x4, (uint8_t *)v658df18fd5);
    free(v658df18fd5);
    uint8_t *v116d5d35e4 = (uint8_t *)malloc(0x4);
    fill(v116d5d35e4, 0x4, (((get_data_from_pool4() & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x07 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x17) | ((get_data_from_pool4() & ((1 << (0x07 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1_2 + 0x4, 0x4, (uint8_t *)v116d5d35e4);
    free(v116d5d35e4);
    uint8_t *vb6d8d3a502 = (uint8_t *)malloc(0x4);
    fill(vb6d8d3a502, 0x4, (((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x10)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1_2 + 0x8, 0x4, (uint8_t *)vb6d8d3a502);
    free(vb6d8d3a502);
    uint8_t *va8c700b573 = (uint8_t *)malloc(0x4);
    fill(va8c700b573, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x0b + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x1b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1_2 + 0xc, 0x4, (uint8_t *)va8c700b573);
    free(va8c700b573);
    stateful_free(buffer_v77c801a841);
    buffer_v77c801a841 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v77c801a841 = 0x%lx\n", buffer_v77c801a841);
    uint8_t *v8f0d3721d7 = (uint8_t *)malloc(0x100);
    fill(v8f0d3721d7, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v77c801a841 + 0x0, 0x100, (uint8_t *)v8f0d3721d7);
    free(v8f0d3721d7);
    uint8_t *v834cff3c40 = (uint8_t *)malloc(0x4);
    fill(v834cff3c40, 0x4, (buffer_v77c801a841 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1_2 + 0x10, 0x4, (uint8_t *)v834cff3c40);
    free(v834cff3c40);
    stateful_free(buffer_v85b16cd46e);
    buffer_v85b16cd46e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v85b16cd46e = 0x%lx\n", buffer_v85b16cd46e);
    uint8_t *vda11d2c943 = (uint8_t *)malloc(0x100);
    fill(vda11d2c943, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v85b16cd46e + 0x0, 0x100, (uint8_t *)vda11d2c943);
    free(vda11d2c943);
    uint8_t *v7225b32c6d = (uint8_t *)malloc(0x4);
    fill(v7225b32c6d, 0x4, (buffer_v85b16cd46e | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1_2 + 0x14, 0x4, (uint8_t *)v7225b32c6d);
    free(v7225b32c6d);
    uint8_t *v6afb2c2bfb = (uint8_t *)malloc(0x4);
    fill(v6afb2c2bfb, 0x4, ((ehci_mix_0_1_2 & 0xffffffe0) | 0x2), 0x4 > 0x4 ? 0x4 : 0x4);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, ehci_mix_0_1_2 + 0x18, 0x4, (uint8_t *)v6afb2c2bfb);
    free(v6afb2c2bfb);
    stateful_free(v6b6e3034f5_base);
    v6b6e3034f5_base = stateful_malloc(0x1000, /*chained=*/false);
    // printf("[+] v6b6e3034f5_base = 0x%lx\n", v6b6e3034f5_base);
    uint8_t *v4c3743bd79 = (uint8_t *)malloc(0x1000);
    fill(v4c3743bd79, 0x1000, ((ehci_mix_0_1_2 & 0xffffffe0) | 0x2), 0x1000 > 0x4 ? 0x4 : 0x1000);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, v6b6e3034f5_base, 0x1000, (uint8_t *)v4c3743bd79);
    free(v4c3743bd79);
    uint64_t vc617d62fd0 = (v6b6e3034f5_base | 0x0);
    size_3 += serialize(Data, size_3, CALLBACK_MAXSIZE, get_interface_id("operational", EVENT_TYPE_MMIO_WRITE), 0x14, 0x4, (uint8_t *)&vc617d62fd0);
    goto v8d05f9d4df_out;
v8d05f9d4df_out:;
    return Data;
}

static size_t get_size_3() { return size_3;}

// ==== hw/net/vmxnet3.c:vmxnet3_activate_device:/* Verify configuration consistency ============================
size_t size_4 = 0;

static uint64_t dshmem_0 = 0;

static uint8_t *get_data_4() {
    size_4 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v477453988a_0; break;
    }
v477453988a_0:;
    stateful_free(dshmem_0);
    dshmem_0 = stateful_malloc(0x20b0, /*chained=*/false);
    // printf("[+] dshmem_0 = 0x%lx\n", dshmem_0);
    uint8_t *v30f3fb01f7 = (uint8_t *)malloc(0x4);
    fill(v30f3fb01f7, 0x4, 0xbabefee1, 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x0, 0x4, (uint8_t *)v30f3fb01f7);
    free(v30f3fb01f7);
    uint8_t *vc083c02d8c = (uint8_t *)malloc(0x4);
    fill(vc083c02d8c, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x4, 0x4, (uint8_t *)vc083c02d8c);
    free(vc083c02d8c);
    uint8_t *v33fd21eb7d = (uint8_t *)malloc(0x4);
    fill(v33fd21eb7d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x8, 0x4, (uint8_t *)v33fd21eb7d);
    free(v33fd21eb7d);
    uint8_t *vea0d57eb4b = (uint8_t *)malloc(0x4);
    fill(vea0d57eb4b, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0xc, 0x4, (uint8_t *)vea0d57eb4b);
    free(vea0d57eb4b);
    uint8_t *v40558dbbf2 = (uint8_t *)malloc(0x4);
    fill(v40558dbbf2, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x10, 0x4, (uint8_t *)v40558dbbf2);
    free(v40558dbbf2);
    uint8_t *v9a91e7527d = (uint8_t *)malloc(0x4);
    fill(v9a91e7527d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x14, 0x4, (uint8_t *)v9a91e7527d);
    free(v9a91e7527d);
    uint8_t *vb323592ebd = (uint8_t *)malloc(0x8);
    fill(vb323592ebd, 0x8, get_data_from_pool4(), 0x8 > 0x4 ? 0x4 : 0x8);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x18, 0x8, (uint8_t *)vb323592ebd);
    free(vb323592ebd);
    uint8_t *vc09881b701 = (uint8_t *)malloc(0x8);
    fill(vc09881b701, 0x8, get_data_from_pool4(), 0x8 > 0x4 ? 0x4 : 0x8);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x20, 0x8, (uint8_t *)vc09881b701);
    free(vc09881b701);
    uint8_t *veb5d9cfb7e = (uint8_t *)malloc(0x8);
    fill(veb5d9cfb7e, 0x8, get_data_from_pool4(), 0x8 > 0x4 ? 0x4 : 0x8);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x28, 0x8, (uint8_t *)veb5d9cfb7e);
    free(veb5d9cfb7e);
    uint8_t *v5333bd70ac = (uint8_t *)malloc(0x4);
    fill(v5333bd70ac, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x30, 0x4, (uint8_t *)v5333bd70ac);
    free(v5333bd70ac);
    uint8_t *v3f1f8ad9d1 = (uint8_t *)malloc(0x4);
    fill(v3f1f8ad9d1, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x34, 0x4, (uint8_t *)v3f1f8ad9d1);
    free(v3f1f8ad9d1);
    uint8_t *v9e875edb97 = (uint8_t *)malloc(0x4);
    fill(v9e875edb97, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x38, 0x4, (uint8_t *)v9e875edb97);
    free(v9e875edb97);
    uint8_t *v8ba3f66b59 = (uint8_t *)malloc(0x2);
    fill(v8ba3f66b59, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x3c, 0x2, (uint8_t *)v8ba3f66b59);
    free(v8ba3f66b59);
    uint8_t *veab603af70 = (uint8_t *)malloc(0x1);
    fill(veab603af70, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x3e, 0x1, (uint8_t *)veab603af70);
    free(veab603af70);
    uint8_t *vba143f637f = (uint8_t *)malloc(0x1);
    fill(vba143f637f, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x3f, 0x1, (uint8_t *)vba143f637f);
    free(vba143f637f);
    uint8_t *ve6d2b4cf16 = (uint8_t *)malloc(0x10);
    fill(ve6d2b4cf16, 0x10, get_data_from_pool4(), 0x10 > 0x4 ? 0x4 : 0x10);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x40, 0x10, (uint8_t *)ve6d2b4cf16);
    free(ve6d2b4cf16);
    uint8_t *v41543915dd = (uint8_t *)malloc(0x1);
    fill(v41543915dd, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x50, 0x1, (uint8_t *)v41543915dd);
    free(v41543915dd);
    uint8_t *vd55e69fbd9 = (uint8_t *)malloc(0x1);
    fill(vd55e69fbd9, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x51, 0x1, (uint8_t *)vd55e69fbd9);
    free(vd55e69fbd9);
    uint8_t *v3ad0c58552 = (uint8_t *)malloc(0x1);
    fill(v3ad0c58552, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x52, 0x1, (uint8_t *)v3ad0c58552);
    free(v3ad0c58552);
    uint8_t *vcac342327d = (uint8_t *)malloc(0x19);
    fill(vcac342327d, 0x19, get_data_from_pool1(), 0x19 > 0x4 ? 0x4 : 0x19);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x53, 0x19, (uint8_t *)vcac342327d);
    free(vcac342327d);
    uint8_t *vc09d6dbcf7 = (uint8_t *)malloc(0x4);
    fill(vc09d6dbcf7, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x6c, 0x4, (uint8_t *)vc09d6dbcf7);
    free(vc09d6dbcf7);
    uint8_t *vdd602c19cb = (uint8_t *)malloc(0x8);
    fill(vdd602c19cb, 0x8, get_data_from_pool4(), 0x8 > 0x4 ? 0x4 : 0x8);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x70, 0x8, (uint8_t *)vdd602c19cb);
    free(vdd602c19cb);
    uint8_t *v62d9ae837c = (uint8_t *)malloc(0x4);
    fill(v62d9ae837c, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x78, 0x4, (uint8_t *)v62d9ae837c);
    free(v62d9ae837c);
    uint8_t *v316e3285b5 = (uint8_t *)malloc(0x2);
    fill(v316e3285b5, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x7c, 0x2, (uint8_t *)v316e3285b5);
    free(v316e3285b5);
    uint8_t *v2b74389d3d = (uint8_t *)malloc(0x2);
    fill(v2b74389d3d, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x7e, 0x2, (uint8_t *)v2b74389d3d);
    free(v2b74389d3d);
    uint8_t *v9711192480 = (uint8_t *)malloc(0x8);
    fill(v9711192480, 0x8, get_data_from_pool4(), 0x8 > 0x4 ? 0x4 : 0x8);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x80, 0x8, (uint8_t *)v9711192480);
    free(v9711192480);
    uint8_t *ve567b1ccd4 = (uint8_t *)malloc(0x2000);
    fill(ve567b1ccd4, 0x2000, get_data_from_pool4(), 0x2000 > 0x4 ? 0x4 : 0x2000);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x88, 0x2000, (uint8_t *)ve567b1ccd4);
    free(ve567b1ccd4);
    uint8_t *vfb87cf23ae = (uint8_t *)malloc(0x4);
    fill(vfb87cf23ae, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x2088, 0x4, (uint8_t *)vfb87cf23ae);
    free(vfb87cf23ae);
    uint8_t *vc01ff5e3ad = (uint8_t *)malloc(0x4);
    fill(vc01ff5e3ad, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x208c, 0x4, (uint8_t *)vc01ff5e3ad);
    free(vc01ff5e3ad);
    uint8_t *vd7cb840ebd = (uint8_t *)malloc(0x8);
    fill(vd7cb840ebd, 0x8, get_data_from_pool4(), 0x8 > 0x4 ? 0x4 : 0x8);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x2090, 0x8, (uint8_t *)vd7cb840ebd);
    free(vd7cb840ebd);
    uint8_t *v6ee6271640 = (uint8_t *)malloc(0x4);
    fill(v6ee6271640, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x2098, 0x4, (uint8_t *)v6ee6271640);
    free(v6ee6271640);
    uint8_t *v607caba493 = (uint8_t *)malloc(0x14);
    fill(v607caba493, 0x14, get_data_from_pool4(), 0x14 > 0x4 ? 0x4 : 0x14);
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, dshmem_0 + 0x209c, 0x14, (uint8_t *)v607caba493);
    free(v607caba493);
    uint64_t vf61ed23388 = dshmem_0;
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, get_interface_id("vmxnet3-b1", EVENT_TYPE_MMIO_WRITE), 0x10, 0x4, (uint8_t *)&vf61ed23388);
    uint64_t v358d3e42ed = 0x0;
    size_4 += serialize(Data, size_4, CALLBACK_MAXSIZE, get_interface_id("vmxnet3-b1", EVENT_TYPE_MMIO_WRITE), 0x18, 0x4, (uint8_t *)&v358d3e42ed);
    goto v477453988a_out;
v477453988a_out:;
    return Data;
}

static size_t get_size_4() { return size_4;}

// ==== hw/usb/hcd-xhci.c:xhci_process_commands:while ((type = ============================
size_t size_5 = 0;

static uint64_t xhci_trb_0 = 0;

static uint8_t *get_data_5() {
    size_5 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v994907f128_0; break;
    }
v994907f128_0:;
    stateful_free(xhci_trb_0);
    xhci_trb_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] xhci_trb_0 = 0x%lx\n", xhci_trb_0);
    uint8_t *vb9be64e1b0 = (uint8_t *)malloc(0x8);
    fill(vb9be64e1b0, 0x8, (xhci_trb_0 & 0xffffffc0), 0x8 > 0x4 ? 0x4 : 0x8);
    size_5 += serialize(Data, size_5, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, xhci_trb_0 + 0x0, 0x8, (uint8_t *)vb9be64e1b0);
    free(vb9be64e1b0);
    uint8_t *v649ddd5103 = (uint8_t *)malloc(0x4);
    fill(v649ddd5103, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x06 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x0a + 1)) - 1)) << 0x16)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_5 += serialize(Data, size_5, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, xhci_trb_0 + 0x8, 0x4, (uint8_t *)v649ddd5103);
    free(v649ddd5103);
    uint8_t *v431d779ade = (uint8_t *)malloc(0x4);
    fill(v431d779ade, 0x4, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x02 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x09) | ((get_data_from_pool4() & ((1 << (0x06 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x05 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x03 + 1)) - 1)) << 0x15) | ((get_data_from_pool4() & ((1 << (0x08 + 1)) - 1)) << 0x18)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_5 += serialize(Data, size_5, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, xhci_trb_0 + 0xc, 0x4, (uint8_t *)v431d779ade);
    free(v431d779ade);
    uint64_t v95f45a1fe1 = (xhci_trb_0 & 0xffffffc0);
    size_5 += serialize(Data, size_5, CALLBACK_MAXSIZE, get_interface_id("operational", EVENT_TYPE_MMIO_WRITE), 0x18, 0x4, (uint8_t *)&v95f45a1fe1);
    uint64_t v19cf40ca16 = 0x0;
    size_5 += serialize(Data, size_5, CALLBACK_MAXSIZE, get_interface_id("operational", EVENT_TYPE_MMIO_WRITE), 0x1c, 0x0, (uint8_t *)&v19cf40ca16);
    goto v994907f128_out;
v994907f128_out:;
    return Data;
}

static size_t get_size_5() { return size_5;}

// ==== hw/net/e1000.c:start_xmit:while (s->mac_reg ============================
size_t size_6 = 0;

static uint64_t e1000_desc0_0 = 0;
static uint64_t buffer_ve53d145972 = 0;

static uint8_t *get_data_6() {
    size_6 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vb112757e23_0; break;
    }
vb112757e23_0:;
    stateful_free(e1000_desc0_0);
    e1000_desc0_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] e1000_desc0_0 = 0x%lx\n", e1000_desc0_0);
    stateful_free(buffer_ve53d145972);
    buffer_ve53d145972 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve53d145972 = 0x%lx\n", buffer_ve53d145972);
    uint8_t *v390c36c33d = (uint8_t *)malloc(0x100);
    fill(v390c36c33d, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve53d145972 + 0x0, 0x100, (uint8_t *)v390c36c33d);
    free(v390c36c33d);
    uint8_t *v49fa67816f = (uint8_t *)malloc(0x4);
    fill(v49fa67816f, 0x4, (buffer_ve53d145972 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0x0, 0x4, (uint8_t *)v49fa67816f);
    free(v49fa67816f);
    uint8_t *v648f08040f = (uint8_t *)malloc(0x4);
    fill(v648f08040f, 0x4, 0x0, 0x4 > 0x4 ? 0x4 : 0x4);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0x4, 0x4, (uint8_t *)v648f08040f);
    free(v648f08040f);
    uint8_t *v1a1b7de767 = (uint8_t *)malloc(0x2);
    fill(v1a1b7de767, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0x8, 0x2, (uint8_t *)v1a1b7de767);
    free(v1a1b7de767);
    uint8_t *v9044d06c1c = (uint8_t *)malloc(0x1);
    fill(v9044d06c1c, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0xa, 0x1, (uint8_t *)v9044d06c1c);
    free(v9044d06c1c);
    uint8_t *vb4e3fdc490 = (uint8_t *)malloc(0x1);
    fill(vb4e3fdc490, 0x1, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07)), 0x1 > 0x4 ? 0x4 : 0x1);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0xb, 0x1, (uint8_t *)vb4e3fdc490);
    free(vb4e3fdc490);
    uint8_t *vc3aebd368f = (uint8_t *)malloc(0x1);
    fill(vc3aebd368f, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0xc, 0x1, (uint8_t *)vc3aebd368f);
    free(vc3aebd368f);
    uint8_t *vf7dc571d0c = (uint8_t *)malloc(0x1);
    fill(vf7dc571d0c, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0xd, 0x1, (uint8_t *)vf7dc571d0c);
    free(vf7dc571d0c);
    uint8_t *v3f507e7b34 = (uint8_t *)malloc(0x2);
    fill(v3f507e7b34, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc0_0 + 0xe, 0x2, (uint8_t *)v3f507e7b34);
    free(v3f507e7b34);
    uint64_t vc801c67cd0 = e1000_desc0_0;
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, get_interface_id("e1000-mmio", EVENT_TYPE_MMIO_WRITE), 0x3800, 0x4, (uint8_t *)&vc801c67cd0);
    uint64_t ve76720f835 = 0x0;
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, get_interface_id("e1000-mmio", EVENT_TYPE_MMIO_WRITE), 0x3804, 0x4, (uint8_t *)&ve76720f835);
    uint64_t v9c3ecbc8b7 = 0x0;
    size_6 += serialize(Data, size_6, CALLBACK_MAXSIZE, get_interface_id("e1000-mmio", EVENT_TYPE_MMIO_WRITE), 0x3810, 0x4, (uint8_t *)&v9c3ecbc8b7);
    goto vb112757e23_out;
vb112757e23_out:;
    return Data;
}

static size_t get_size_6() { return size_6;}

// ==== hw/net/e1000.c:e1000_receive_iov:do { ============================
size_t size_7 = 0;

static uint64_t e1000_desc1_0 = 0;
static uint64_t buffer_v3593dc66cd = 0;

static uint8_t *get_data_7() {
    size_7 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v1d993cf26f_0; break;
    }
v1d993cf26f_0:;
    stateful_free(e1000_desc1_0);
    e1000_desc1_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] e1000_desc1_0 = 0x%lx\n", e1000_desc1_0);
    stateful_free(buffer_v3593dc66cd);
    buffer_v3593dc66cd = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v3593dc66cd = 0x%lx\n", buffer_v3593dc66cd);
    uint8_t *ve94ed09351 = (uint8_t *)malloc(0x100);
    fill(ve94ed09351, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v3593dc66cd + 0x0, 0x100, (uint8_t *)ve94ed09351);
    free(ve94ed09351);
    uint8_t *v5180d2a0ac = (uint8_t *)malloc(0x4);
    fill(v5180d2a0ac, 0x4, (buffer_v3593dc66cd | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc1_0 + 0x0, 0x4, (uint8_t *)v5180d2a0ac);
    free(v5180d2a0ac);
    uint8_t *v1be4143d60 = (uint8_t *)malloc(0x4);
    fill(v1be4143d60, 0x4, 0x0, 0x4 > 0x4 ? 0x4 : 0x4);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc1_0 + 0x4, 0x4, (uint8_t *)v1be4143d60);
    free(v1be4143d60);
    uint8_t *v967006cb2e = (uint8_t *)malloc(0x2);
    fill(v967006cb2e, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc1_0 + 0x8, 0x2, (uint8_t *)v967006cb2e);
    free(v967006cb2e);
    uint8_t *ve9052731bd = (uint8_t *)malloc(0x2);
    fill(ve9052731bd, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc1_0 + 0xa, 0x2, (uint8_t *)ve9052731bd);
    free(ve9052731bd);
    uint8_t *v2ed3dea2f3 = (uint8_t *)malloc(0x1);
    fill(v2ed3dea2f3, 0x1, (((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x01) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x02) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x03) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07)), 0x1 > 0x4 ? 0x4 : 0x1);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc1_0 + 0xc, 0x1, (uint8_t *)v2ed3dea2f3);
    free(v2ed3dea2f3);
    uint8_t *v3f4fdb9b15 = (uint8_t *)malloc(0x1);
    fill(v3f4fdb9b15, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc1_0 + 0xd, 0x1, (uint8_t *)v3f4fdb9b15);
    free(v3f4fdb9b15);
    uint8_t *v5ca5b513ac = (uint8_t *)malloc(0x2);
    fill(v5ca5b513ac, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, e1000_desc1_0 + 0xe, 0x2, (uint8_t *)v5ca5b513ac);
    free(v5ca5b513ac);
    uint64_t ve2fe66d1cb = e1000_desc1_0;
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, get_interface_id("e1000-mmio", EVENT_TYPE_MMIO_WRITE), 0x2800, 0x4, (uint8_t *)&ve2fe66d1cb);
    uint64_t v181da1f8f1 = 0x0;
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, get_interface_id("e1000-mmio", EVENT_TYPE_MMIO_WRITE), 0x2804, 0x4, (uint8_t *)&v181da1f8f1);
    uint64_t vfb6d40cea1 = 0x0;
    size_7 += serialize(Data, size_7, CALLBACK_MAXSIZE, get_interface_id("e1000-mmio", EVENT_TYPE_MMIO_WRITE), 0x2810, 0x4, (uint8_t *)&vfb6d40cea1);
    goto v1d993cf26f_out;
v1d993cf26f_out:;
    return Data;
}

static size_t get_size_7() { return size_7;}

// ==== hw/net/rtl8139.c:rtl8139_do_receive:int descriptor = s-> ============================
size_t size_8 = 0;

static uint64_t rtl8139_rx_ring_desc_0 = 0;
static uint64_t buffer_ve52cbc1987 = 0;

static uint8_t *get_data_8() {
    size_8 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v88374a8610_0; break;
    }
v88374a8610_0:;
    stateful_free(rtl8139_rx_ring_desc_0);
    rtl8139_rx_ring_desc_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] rtl8139_rx_ring_desc_0 = 0x%lx\n", rtl8139_rx_ring_desc_0);
    uint8_t *v224bfb0d59 = (uint8_t *)malloc(0x4);
    fill(v224bfb0d59, 0x4, (((get_data_from_pool4() & ((1 << (0x0d + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x12) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x13) | ((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x14) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x18) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x19) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1a) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_rx_ring_desc_0 + 0x0, 0x4, (uint8_t *)v224bfb0d59);
    free(v224bfb0d59);
    uint8_t *v4716a271b6 = (uint8_t *)malloc(0x4);
    fill(v4716a271b6, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_rx_ring_desc_0 + 0x4, 0x4, (uint8_t *)v4716a271b6);
    free(v4716a271b6);
    stateful_free(buffer_ve52cbc1987);
    buffer_ve52cbc1987 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_ve52cbc1987 = 0x%lx\n", buffer_ve52cbc1987);
    uint8_t *v596303d936 = (uint8_t *)malloc(0x100);
    fill(v596303d936, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_ve52cbc1987 + 0x0, 0x100, (uint8_t *)v596303d936);
    free(v596303d936);
    uint8_t *v7e4e182b61 = (uint8_t *)malloc(0x4);
    fill(v7e4e182b61, 0x4, (buffer_ve52cbc1987 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_rx_ring_desc_0 + 0x8, 0x4, (uint8_t *)v7e4e182b61);
    free(v7e4e182b61);
    uint8_t *vf13ef6d241 = (uint8_t *)malloc(0x4);
    fill(vf13ef6d241, 0x4, 0x0, 0x4 > 0x4 ? 0x4 : 0x4);
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_rx_ring_desc_0 + 0xc, 0x4, (uint8_t *)vf13ef6d241);
    free(vf13ef6d241);
    uint64_t vc9ab9a1b98 = 0x8;
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x37, 0x1, (uint8_t *)&vc9ab9a1b98);
    uint64_t v3afed6be43 = rtl8139_rx_ring_desc_0;
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0xE4, 0x4, (uint8_t *)&v3afed6be43);
    uint64_t vfc62a7d0e4 = 0x0;
    size_8 += serialize(Data, size_8, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0xE8, 0x4, (uint8_t *)&vfc62a7d0e4);
    goto v88374a8610_out;
v88374a8610_out:;
    return Data;
}

static size_t get_size_8() { return size_8;}

// ==== hw/net/rtl8139.c:rtl8139_cplus_transmit_one:int descriptor = s-> ============================
size_t size_9 = 0;

static uint64_t rtl8139_tx_ring_desc_0 = 0;
static uint64_t buffer_v290819c14b = 0;

static uint8_t *get_data_9() {
    size_9 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vea9f3eb8dd_0; break;
    }
vea9f3eb8dd_0:;
    stateful_free(rtl8139_tx_ring_desc_0);
    rtl8139_tx_ring_desc_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] rtl8139_tx_ring_desc_0 = 0x%lx\n", rtl8139_tx_ring_desc_0);
    uint8_t *ve354f6ae6d = (uint8_t *)malloc(0x4);
    fill(ve354f6ae6d, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x09 + 1)) - 1)) << 0x12) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_tx_ring_desc_0 + 0x0, 0x4, (uint8_t *)ve354f6ae6d);
    free(ve354f6ae6d);
    uint8_t *v6a76c29dd4 = (uint8_t *)malloc(0x4);
    fill(v6a76c29dd4, 0x4, (((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x11) | ((get_data_from_pool4() & ((1 << (0x0e + 1)) - 1)) << 0x12)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_tx_ring_desc_0 + 0x4, 0x4, (uint8_t *)v6a76c29dd4);
    free(v6a76c29dd4);
    stateful_free(buffer_v290819c14b);
    buffer_v290819c14b = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v290819c14b = 0x%lx\n", buffer_v290819c14b);
    uint8_t *v4e2cf6881a = (uint8_t *)malloc(0x100);
    fill(v4e2cf6881a, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v290819c14b + 0x0, 0x100, (uint8_t *)v4e2cf6881a);
    free(v4e2cf6881a);
    uint8_t *v2a9ec86843 = (uint8_t *)malloc(0x4);
    fill(v2a9ec86843, 0x4, (buffer_v290819c14b | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_tx_ring_desc_0 + 0x8, 0x4, (uint8_t *)v2a9ec86843);
    free(v2a9ec86843);
    uint8_t *v30fff4f668 = (uint8_t *)malloc(0x4);
    fill(v30fff4f668, 0x4, 0x0, 0x4 > 0x4 ? 0x4 : 0x4);
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_tx_ring_desc_0 + 0xc, 0x4, (uint8_t *)v30fff4f668);
    free(v30fff4f668);
    uint64_t v17cd9a14eb = 0x4;
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x37, 0x1, (uint8_t *)&v17cd9a14eb);
    uint64_t v31f2c908e3 = rtl8139_tx_ring_desc_0;
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x20, 0x4, (uint8_t *)&v31f2c908e3);
    uint64_t vcaa2e10f4c = 0x0;
    size_9 += serialize(Data, size_9, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x24, 0x4, (uint8_t *)&vcaa2e10f4c);
    goto vea9f3eb8dd_out;
vea9f3eb8dd_out:;
    return Data;
}

static size_t get_size_9() { return size_9;}

// ==== hw/net/rtl8139.c:rtl8139_transmit_one:pci_dma_read( ============================
size_t size_10 = 0;

static uint64_t rtl8139_buffer_0 = 0;

static uint8_t *get_data_10() {
    size_10 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v4d35f1f6d0_0; break;
    }
v4d35f1f6d0_0:;
    stateful_free(rtl8139_buffer_0);
    rtl8139_buffer_0 = stateful_malloc(0x2000, /*chained=*/false);
    // printf("[+] rtl8139_buffer_0 = 0x%lx\n", rtl8139_buffer_0);
    uint8_t *vaa30b1e143 = (uint8_t *)malloc(0x2000);
    fill(vaa30b1e143, 0x2000, get_data_from_pool4(), 0x2000 > 0x4 ? 0x4 : 0x2000);
    size_10 += serialize(Data, size_10, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, rtl8139_buffer_0 + 0x0, 0x2000, (uint8_t *)vaa30b1e143);
    free(vaa30b1e143);
    uint64_t v727201681f = rtl8139_buffer_0;
    size_10 += serialize(Data, size_10, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x20, 0x4, (uint8_t *)&v727201681f);
    uint64_t v29bbd86ece = rtl8139_buffer_0;
    size_10 += serialize(Data, size_10, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x24, 0x4, (uint8_t *)&v29bbd86ece);
    uint64_t v3c6c0da87f = rtl8139_buffer_0;
    size_10 += serialize(Data, size_10, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x28, 0x4, (uint8_t *)&v3c6c0da87f);
    uint64_t v5a24e7864a = rtl8139_buffer_0;
    size_10 += serialize(Data, size_10, CALLBACK_MAXSIZE, get_interface_id("rtl8139", EVENT_TYPE_PIO_WRITE), 0x2C, 0x4, (uint8_t *)&v5a24e7864a);
    goto v4d35f1f6d0_out;
v4d35f1f6d0_out:;
    return Data;
}

static size_t get_size_10() { return size_10;}

// ==== hw/net/pcnet.c:pcnet_init:s->phys_mem_read ============================
size_t size_11 = 0;

static uint64_t pcnet_initblk32_0 = 0;

static uint8_t *get_data_11() {
    size_11 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto ve688f05e7e_0; break;
    }
ve688f05e7e_0:;
    stateful_free(pcnet_initblk32_0);
    pcnet_initblk32_0 = stateful_malloc(0x1c, /*chained=*/false);
    // printf("[+] pcnet_initblk32_0 = 0x%lx\n", pcnet_initblk32_0);
    uint8_t *v88e06c1982 = (uint8_t *)malloc(0x2);
    fill(v88e06c1982, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x0, 0x2, (uint8_t *)v88e06c1982);
    free(v88e06c1982);
    uint8_t *v1b20bbf65e = (uint8_t *)malloc(0x1);
    fill(v1b20bbf65e, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x2, 0x1, (uint8_t *)v1b20bbf65e);
    free(v1b20bbf65e);
    uint8_t *v5996c8b37f = (uint8_t *)malloc(0x1);
    fill(v5996c8b37f, 0x1, get_data_from_pool1(), 0x1 > 0x4 ? 0x4 : 0x1);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x3, 0x1, (uint8_t *)v5996c8b37f);
    free(v5996c8b37f);
    uint8_t *v2f529eb616 = (uint8_t *)malloc(0x2);
    fill(v2f529eb616, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x4, 0x2, (uint8_t *)v2f529eb616);
    free(v2f529eb616);
    uint8_t *v6f25cbe207 = (uint8_t *)malloc(0x2);
    fill(v6f25cbe207, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x6, 0x2, (uint8_t *)v6f25cbe207);
    free(v6f25cbe207);
    uint8_t *v97bf86b357 = (uint8_t *)malloc(0x2);
    fill(v97bf86b357, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x8, 0x2, (uint8_t *)v97bf86b357);
    free(v97bf86b357);
    uint8_t *vaf2dd8f01d = (uint8_t *)malloc(0x2);
    fill(vaf2dd8f01d, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0xa, 0x2, (uint8_t *)vaf2dd8f01d);
    free(vaf2dd8f01d);
    uint8_t *v229edea18b = (uint8_t *)malloc(0x2);
    fill(v229edea18b, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0xc, 0x2, (uint8_t *)v229edea18b);
    free(v229edea18b);
    uint8_t *va043594369 = (uint8_t *)malloc(0x2);
    fill(va043594369, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0xe, 0x2, (uint8_t *)va043594369);
    free(va043594369);
    uint8_t *vb1e89782e2 = (uint8_t *)malloc(0x2);
    fill(vb1e89782e2, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x10, 0x2, (uint8_t *)vb1e89782e2);
    free(vb1e89782e2);
    uint8_t *v5695ac3c0a = (uint8_t *)malloc(0x2);
    fill(v5695ac3c0a, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x12, 0x2, (uint8_t *)v5695ac3c0a);
    free(v5695ac3c0a);
    uint8_t *v333ea67cc5 = (uint8_t *)malloc(0x4);
    fill(v333ea67cc5, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x14, 0x4, (uint8_t *)v333ea67cc5);
    free(v333ea67cc5);
    uint8_t *v4937198de6 = (uint8_t *)malloc(0x4);
    fill(v4937198de6, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk32_0 + 0x18, 0x4, (uint8_t *)v4937198de6);
    free(v4937198de6);
    uint64_t v84e2ca1701 = 0x10;
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v84e2ca1701);
    uint64_t vc7ff1f2188 = pcnet_initblk32_0;
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&vc7ff1f2188);
    uint64_t v35006ba603 = 0x11;
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v35006ba603);
    uint64_t v641ff10686 = (pcnet_initblk32_0 >> 16);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&v641ff10686);
    uint64_t vc03f003473 = 0x10;
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&vc03f003473);
    uint64_t v822bbc3d71 = pcnet_initblk32_0;
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v822bbc3d71);
    uint64_t v7bb8be9470 = 0x11;
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v7bb8be9470);
    uint64_t v109d5c8d45 = (pcnet_initblk32_0 >> 16);
    size_11 += serialize(Data, size_11, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v109d5c8d45);
    goto ve688f05e7e_out;
ve688f05e7e_out:;
    return Data;
}

static size_t get_size_11() { return size_11;}

// ==== hw/net/pcnet.c:pcnet_init:s->phys_mem_read ============================
size_t size_12 = 0;

static uint64_t pcnet_initblk16_0 = 0;

static uint8_t *get_data_12() {
    size_12 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto vadf1c0a7e3_0; break;
    }
vadf1c0a7e3_0:;
    stateful_free(pcnet_initblk16_0);
    pcnet_initblk16_0 = stateful_malloc(0x18, /*chained=*/false);
    // printf("[+] pcnet_initblk16_0 = 0x%lx\n", pcnet_initblk16_0);
    uint8_t *v52c28839db = (uint8_t *)malloc(0x2);
    fill(v52c28839db, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0x0, 0x2, (uint8_t *)v52c28839db);
    free(v52c28839db);
    uint8_t *vc9b7146ea9 = (uint8_t *)malloc(0x2);
    fill(vc9b7146ea9, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0x2, 0x2, (uint8_t *)vc9b7146ea9);
    free(vc9b7146ea9);
    uint8_t *v70cef13775 = (uint8_t *)malloc(0x2);
    fill(v70cef13775, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0x4, 0x2, (uint8_t *)v70cef13775);
    free(v70cef13775);
    uint8_t *v69fbdedcaa = (uint8_t *)malloc(0x2);
    fill(v69fbdedcaa, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0x6, 0x2, (uint8_t *)v69fbdedcaa);
    free(v69fbdedcaa);
    uint8_t *v20cfbc0d66 = (uint8_t *)malloc(0x2);
    fill(v20cfbc0d66, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0x8, 0x2, (uint8_t *)v20cfbc0d66);
    free(v20cfbc0d66);
    uint8_t *v170b9484f1 = (uint8_t *)malloc(0x2);
    fill(v170b9484f1, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0xa, 0x2, (uint8_t *)v170b9484f1);
    free(v170b9484f1);
    uint8_t *v2bf28b9560 = (uint8_t *)malloc(0x2);
    fill(v2bf28b9560, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0xc, 0x2, (uint8_t *)v2bf28b9560);
    free(v2bf28b9560);
    uint8_t *vf9b4657387 = (uint8_t *)malloc(0x2);
    fill(vf9b4657387, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0xe, 0x2, (uint8_t *)vf9b4657387);
    free(vf9b4657387);
    uint8_t *v2dbca078e8 = (uint8_t *)malloc(0x4);
    fill(v2dbca078e8, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0x10, 0x4, (uint8_t *)v2dbca078e8);
    free(v2dbca078e8);
    uint8_t *v2216e670b3 = (uint8_t *)malloc(0x4);
    fill(v2216e670b3, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_initblk16_0 + 0x14, 0x4, (uint8_t *)v2216e670b3);
    free(v2216e670b3);
    uint64_t vf8a2279498 = 0x10;
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&vf8a2279498);
    uint64_t v13bea22432 = pcnet_initblk16_0;
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&v13bea22432);
    uint64_t v4ce8573005 = 0x11;
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v4ce8573005);
    uint64_t vaaf2264b04 = (pcnet_initblk16_0 >> 16);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&vaaf2264b04);
    uint64_t v12602d108a = 0x10;
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v12602d108a);
    uint64_t v768ea5ba93 = pcnet_initblk16_0;
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v768ea5ba93);
    uint64_t v8c49a512f5 = 0x11;
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v8c49a512f5);
    uint64_t ve66bc5a09d = (pcnet_initblk16_0 >> 16);
    size_12 += serialize(Data, size_12, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&ve66bc5a09d);
    goto vadf1c0a7e3_out;
vadf1c0a7e3_out:;
    return Data;
}

static size_t get_size_12() { return size_12;}

// ==== hw/net/pcnet.c:pcnet_transmit:TMDLOAD ============================
size_t size_13 = 0;

static uint64_t pcnet_TMD_0 = 0;
static uint64_t buffer_v6857548c9e = 0;

static uint8_t *get_data_13() {
    size_13 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v62fce1b34e_0; break;
    }
v62fce1b34e_0:;
    stateful_free(pcnet_TMD_0);
    pcnet_TMD_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] pcnet_TMD_0 = 0x%lx\n", pcnet_TMD_0);
    stateful_free(buffer_v6857548c9e);
    buffer_v6857548c9e = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v6857548c9e = 0x%lx\n", buffer_v6857548c9e);
    uint8_t *v24b4aaafab = (uint8_t *)malloc(0x100);
    fill(v24b4aaafab, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v6857548c9e + 0x0, 0x100, (uint8_t *)v24b4aaafab);
    free(v24b4aaafab);
    uint8_t *vf14a58b3ee = (uint8_t *)malloc(0x4);
    fill(vf14a58b3ee, 0x4, (buffer_v6857548c9e | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_TMD_0 + 0x0, 0x4, (uint8_t *)vf14a58b3ee);
    free(vf14a58b3ee);
    uint8_t *v19e0f5b764 = (uint8_t *)malloc(0x2);
    fill(v19e0f5b764, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_TMD_0 + 0x4, 0x2, (uint8_t *)v19e0f5b764);
    free(v19e0f5b764);
    uint8_t *v4cfe1f8acc = (uint8_t *)malloc(0x2);
    fill(v4cfe1f8acc, 0x2, (((get_data_from_pool4() & ((1 << (0x07 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x09) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x10)), 0x2 > 0x4 ? 0x4 : 0x2);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_TMD_0 + 0x6, 0x2, (uint8_t *)v4cfe1f8acc);
    free(v4cfe1f8acc);
    uint8_t *v3ab319ae45 = (uint8_t *)malloc(0x4);
    fill(v3ab319ae45, 0x4, (((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x0c + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x0a + 1)) - 1)) << 0x10) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1a) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x1f)), 0x4 > 0x4 ? 0x4 : 0x4);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_TMD_0 + 0x8, 0x4, (uint8_t *)v3ab319ae45);
    free(v3ab319ae45);
    uint8_t *v2c337ceea9 = (uint8_t *)malloc(0x4);
    fill(v2c337ceea9, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_TMD_0 + 0xc, 0x4, (uint8_t *)v2c337ceea9);
    free(v2c337ceea9);
    uint64_t v5d88c5860f = 0x22;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v5d88c5860f);
    uint64_t v69c45171f0 = pcnet_TMD_0;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&v69c45171f0);
    uint64_t v12d527a03c = 0x23;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v12d527a03c);
    uint64_t v2985c817a9 = (pcnet_TMD_0 >> 16);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&v2985c817a9);
    uint64_t v858f0cef7b = 0x11;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x4, (uint8_t *)&v858f0cef7b);
    uint64_t va6d3b6c478 = 0x0;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&va6d3b6c478);
    uint64_t ve9e0cd8b2d = 0x22;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&ve9e0cd8b2d);
    uint64_t vb32d747134 = pcnet_TMD_0;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&vb32d747134);
    uint64_t v6d4fda9921 = 0x23;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v6d4fda9921);
    uint64_t v8139bf93e5 = (pcnet_TMD_0 >> 16);
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v8139bf93e5);
    uint64_t v77727399ce = 0x11;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v77727399ce);
    uint64_t v21811ff012 = 0x0;
    size_13 += serialize(Data, size_13, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v21811ff012);
    goto v62fce1b34e_out;
v62fce1b34e_out:;
    return Data;
}

static size_t get_size_13() { return size_13;}

// ==== hw/net/pcnet.c:pcnet_rdte_poll:if (CSR_CRDA(s)) { ============================
size_t size_14 = 0;

static uint64_t pcnet_RMD0_0 = 0;
static uint64_t buffer_v701b9ea6b8 = 0;

static uint8_t *get_data_14() {
    size_14 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v1f15b76d87_0; break;
    }
v1f15b76d87_0:;
    stateful_free(pcnet_RMD0_0);
    pcnet_RMD0_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] pcnet_RMD0_0 = 0x%lx\n", pcnet_RMD0_0);
    stateful_free(buffer_v701b9ea6b8);
    buffer_v701b9ea6b8 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v701b9ea6b8 = 0x%lx\n", buffer_v701b9ea6b8);
    uint8_t *v1d665a38c2 = (uint8_t *)malloc(0x100);
    fill(v1d665a38c2, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v701b9ea6b8 + 0x0, 0x100, (uint8_t *)v1d665a38c2);
    free(v1d665a38c2);
    uint8_t *vb140db0c10 = (uint8_t *)malloc(0x4);
    fill(vb140db0c10, 0x4, (buffer_v701b9ea6b8 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD0_0 + 0x0, 0x4, (uint8_t *)vb140db0c10);
    free(vb140db0c10);
    uint8_t *v5f82283e4d = (uint8_t *)malloc(0x2);
    fill(v5f82283e4d, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD0_0 + 0x4, 0x2, (uint8_t *)v5f82283e4d);
    free(v5f82283e4d);
    uint8_t *v4be622a100 = (uint8_t *)malloc(0x2);
    fill(v4be622a100, 0x2, (((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x09) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x10)), 0x2 > 0x4 ? 0x4 : 0x2);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD0_0 + 0x6, 0x2, (uint8_t *)v4be622a100);
    free(v4be622a100);
    uint8_t *v3bef6eeff6 = (uint8_t *)malloc(0x4);
    fill(v3bef6eeff6, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD0_0 + 0x8, 0x4, (uint8_t *)v3bef6eeff6);
    free(v3bef6eeff6);
    uint8_t *ve54425d51d = (uint8_t *)malloc(0x4);
    fill(ve54425d51d, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD0_0 + 0xc, 0x4, (uint8_t *)ve54425d51d);
    free(ve54425d51d);
    uint64_t v2162113f82 = 0x1c;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v2162113f82);
    uint64_t v325659ab7a = pcnet_RMD0_0;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&v325659ab7a);
    uint64_t v4d9f0dfa10 = 0x1d;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v4d9f0dfa10);
    uint64_t ve58cd63c7e = (pcnet_RMD0_0 >> 16);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&ve58cd63c7e);
    uint64_t vdcc3339446 = 0x11;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x4, (uint8_t *)&vdcc3339446);
    uint64_t v8cf6963641 = 0x0;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v8cf6963641);
    uint64_t vb782fe1ab9 = 0x1c;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&vb782fe1ab9);
    uint64_t v114d1ad379 = pcnet_RMD0_0;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v114d1ad379);
    uint64_t v5df270d255 = 0x1d;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v5df270d255);
    uint64_t vb95e9f6046 = (pcnet_RMD0_0 >> 16);
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&vb95e9f6046);
    uint64_t v85325d464e = 0x11;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v85325d464e);
    uint64_t v3579404fb0 = 0x0;
    size_14 += serialize(Data, size_14, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v3579404fb0);
    goto v1f15b76d87_out;
v1f15b76d87_out:;
    return Data;
}

static size_t get_size_14() { return size_14;}

// ==== hw/net/pcnet.c:pcnet_rdte_poll:if (CSR_NRDA(s)) { ============================
size_t size_15 = 0;

static uint64_t pcnet_RMD1_0 = 0;
static uint64_t buffer_v2af139b559 = 0;

static uint8_t *get_data_15() {
    size_15 = 0;
    uint8_t *Data = (uint8_t *)malloc(CALLBACK_MAXSIZE);
    
    switch (get_data_from_pool4() % 1){ 
        case 0: goto v2a6ba43a0e_0; break;
    }
v2a6ba43a0e_0:;
    stateful_free(pcnet_RMD1_0);
    pcnet_RMD1_0 = stateful_malloc(0x10, /*chained=*/false);
    // printf("[+] pcnet_RMD1_0 = 0x%lx\n", pcnet_RMD1_0);
    stateful_free(buffer_v2af139b559);
    buffer_v2af139b559 = stateful_malloc(0x100, /*chained=*/false);
    // printf("[+] buffer_v2af139b559 = 0x%lx\n", buffer_v2af139b559);
    uint8_t *v60e8610172 = (uint8_t *)malloc(0x100);
    fill(v60e8610172, 0x100, get_data_from_pool4(), 0x100 > 0x4 ? 0x4 : 0x100);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, buffer_v2af139b559 + 0x0, 0x100, (uint8_t *)v60e8610172);
    free(v60e8610172);
    uint8_t *v6c3a6e0736 = (uint8_t *)malloc(0x4);
    fill(v6c3a6e0736, 0x4, (buffer_v2af139b559 | 0x0), 0x4 > 0x4 ? 0x4 : 0x4);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD1_0 + 0x0, 0x4, (uint8_t *)v6c3a6e0736);
    free(v6c3a6e0736);
    uint8_t *v688cd288d7 = (uint8_t *)malloc(0x2);
    fill(v688cd288d7, 0x2, get_data_from_pool2(), 0x2 > 0x4 ? 0x4 : 0x2);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD1_0 + 0x4, 0x2, (uint8_t *)v688cd288d7);
    free(v688cd288d7);
    uint8_t *vc8bbea21dd = (uint8_t *)malloc(0x2);
    fill(vc8bbea21dd, 0x2, (((get_data_from_pool4() & ((1 << (0x04 + 1)) - 1)) << 0x00) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x04) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x05) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x06) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x07) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x08) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x09) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0a) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0b) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0c) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0d) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0e) | ((get_data_from_pool4() & ((1 << (0x01 + 1)) - 1)) << 0x0f) | ((get_data_from_pool4() & ((1 << (0x10 + 1)) - 1)) << 0x10)), 0x2 > 0x4 ? 0x4 : 0x2);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD1_0 + 0x6, 0x2, (uint8_t *)vc8bbea21dd);
    free(vc8bbea21dd);
    uint8_t *v1c4cd54536 = (uint8_t *)malloc(0x4);
    fill(v1c4cd54536, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD1_0 + 0x8, 0x4, (uint8_t *)v1c4cd54536);
    free(v1c4cd54536);
    uint8_t *vbbd09a1cc3 = (uint8_t *)malloc(0x4);
    fill(vbbd09a1cc3, 0x4, get_data_from_pool4(), 0x4 > 0x4 ? 0x4 : 0x4);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, INTERFACE_MEM_WRITE, pcnet_RMD1_0 + 0xc, 0x4, (uint8_t *)vbbd09a1cc3);
    free(vbbd09a1cc3);
    uint64_t v7b62caffaf = 0x1a;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v7b62caffaf);
    uint64_t v4733ef7da5 = pcnet_RMD1_0;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&v4733ef7da5);
    uint64_t v940d10cdaf = 0x1b;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x2, (uint8_t *)&v940d10cdaf);
    uint64_t va6aae7ad19 = (pcnet_RMD1_0 >> 16);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x2, (uint8_t *)&va6aae7ad19);
    uint64_t v965f5779e2 = 0x11;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x12, 0x4, (uint8_t *)&v965f5779e2);
    uint64_t v67d7ff805f = 0x0;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v67d7ff805f);
    uint64_t v6ce38dafc2 = 0x1a;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v6ce38dafc2);
    uint64_t v9e73026118 = pcnet_RMD1_0;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v9e73026118);
    uint64_t vdfe68c5171 = 0x1b;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&vdfe68c5171);
    uint64_t v1934c37730 = (pcnet_RMD1_0 >> 16);
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v1934c37730);
    uint64_t v2a183608b3 = 0x11;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x14, 0x4, (uint8_t *)&v2a183608b3);
    uint64_t v9fbe505bac = 0x0;
    size_15 += serialize(Data, size_15, CALLBACK_MAXSIZE, get_interface_id("pcnet-io", EVENT_TYPE_PIO_WRITE), 0x10, 0x4, (uint8_t *)&v9fbe505bac);
    goto v2a6ba43a0e_out;
v2a6ba43a0e_out:;
    return Data;
}

static size_t get_size_15() { return size_15;}

static Callback callbacks[] = { 
    [0] = {
        .id = 0,
        .name = "uhci",
        .get_data = get_data_0,
        .get_size = get_size_0,
    },
    [1] = {
        .id = 1,
        .name = "ohci",
        .get_data = get_data_1,
        .get_size = get_size_1,
    },
    [2] = {
        .id = 2,
        .name = "ehci0",
        .get_data = get_data_2,
        .get_size = get_size_2,
    },
    [3] = {
        .id = 3,
        .name = "ehci1",
        .get_data = get_data_3,
        .get_size = get_size_3,
    },
    [4] = {
        .id = 4,
        .name = "vmxnet31",
        .get_data = get_data_4,
        .get_size = get_size_4,
    },
    [5] = {
        .id = 5,
        .name = "xhci0",
        .get_data = get_data_5,
        .get_size = get_size_5,
    },
    [6] = {
        .id = 6,
        .name = "e10000",
        .get_data = get_data_6,
        .get_size = get_size_6,
    },
    [7] = {
        .id = 7,
        .name = "e10001",
        .get_data = get_data_7,
        .get_size = get_size_7,
    },
    [8] = {
        .id = 8,
        .name = "rtl81390",
        .get_data = get_data_8,
        .get_size = get_size_8,
    },
    [9] = {
        .id = 9,
        .name = "rtl81391",
        .get_data = get_data_9,
        .get_size = get_size_9,
    },
    [10] = {
        .id = 10,
        .name = "rtl81392",
        .get_data = get_data_10,
        .get_size = get_size_10,
    },
    [11] = {
        .id = 11,
        .name = "pcnet0",
        .get_data = get_data_11,
        .get_size = get_size_11,
    },
    [12] = {
        .id = 12,
        .name = "pcnet1",
        .get_data = get_data_12,
        .get_size = get_size_12,
    },
    [13] = {
        .id = 13,
        .name = "pcnet2",
        .get_data = get_data_13,
        .get_size = get_size_13,
    },
    [14] = {
        .id = 14,
        .name = "pcnet3",
        .get_data = get_data_14,
        .get_size = get_size_14,
    },
    [15] = {
        .id = 15,
        .name = "pcnet4",
        .get_data = get_data_15,
        .get_size = get_size_15,
    },
};

#endif /* STATEFUL_FUZZ_TSC_H */
